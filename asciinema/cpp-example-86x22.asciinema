{"version": 2, "width": 86, "height": 22, "timestamp": 1728583502, "env": {"SHELL": "/usr/bin/fish", "TERM": "xterm-256color"}}
[0.162797, "o", "\u001b]0;tomasi@maurizio-tombook:~\u0007"]
[0.163575, "o", "\u001b[?2004h\u001b[01;32m[tomasi@maurizio-tombook\u001b[01;37m ~\u001b[01;32m]$\u001b[00m "]
[1.764445, "o", "v"]
[1.865492, "o", "i"]
[1.967116, "o", "m"]
[2.068453, "o", " "]
[2.169597, "o", "t"]
[2.270921, "o", "e"]
[2.373293, "o", "s"]
[2.475702, "o", "t"]
[2.576294, "o", "."]
[2.678968, "o", "c"]
[2.780313, "o", "p"]
[2.882417, "o", "p"]
[3.006421, "o", "\r\n\u001b[?2004l\r"]
[3.28285, "o", "\u001b[?1049h\u001b[22;0;0t\u001b[>4;2m\u001b[?1h\u001b=\u001b[?2004h\u001b[?1004h\u001b[1;22r\u001b[?12h\u001b[?12l\u001b[22;2t\u001b[22;1t"]
[3.285373, "o", "\u001b[27m\u001b[23m\u001b[29m\u001b[m\u001b[H\u001b[2J\u001b[?25l\u001b[22;1H\"test.cpp\" [New]"]
[3.363, "o", "\u001b[2;1H▽\u001b[6n\u001b[2;1H  \u001b[3;1H\u001bPzz\u001b\\\u001b[0%m\u001b[6n\u001b[3;1H           \u001b[1;1H\u001b[>c\u001b]10;?\u0007\u001b]11;?\u0007"]
[3.407249, "o", "\u001b[1;1H\u001b[93m  1 \u001b[m\r\n\u001b[94m~                                                                                     \u001b[3;1H~                                                                                     \u001b[4;1H~                                                                                     \u001b[5;1H~                                                                                     \u001b[6;1H~                                                                                     \u001b[7;1H~                                                                                     \u001b[8;1H~                                                                                     \u001b[9;1H~                                                                                     \u001b[10;1H~                                                                                     \u001b[11;1H~                                                                                     \u001b[12;1H~                                                                                     \u001b[13;1H~                                                                                     \u001b[14;1H~                                                                                     \u001b[15;1H~                                                                                     \u001b[16;1H~                                                                                     \u001b[17;1H~                                                                                     \u001b[18;1H~                                                                                     \u001b[19;1H~                                                                                     \u001b[20;1H~                                                                                     \u001b[m\u001b[21;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[38;5;85m\u001b[48;5;234m test.cpp                                        cpp \u001b[m\u001b[38;5;255m\u001b[48;5;238m [unix] "]
[3.40758, "o", "\u001b[m\u001b[38;5;17m\u001b[48;5;190m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:0/1☰℅\u001b[21;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b]2;test.cpp (~) - VIM\u0007"]
[3.410082, "o", "\u001b[1;5H\u001b[?25h\u001b[?4m"]
[3.42571, "o", "\u001b[27m\u001b[23m\u001b[29m\u001b[m\u001b[H\u001b[2J\u001b[?25l\u001b[1;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  1 \u001b[m\r\n\u001b[94m~                                                                                     \u001b[3;1H~                                                                                     \u001b[4;1H~                                                                                     \u001b[5;1H~                                                                                     \u001b[6;1H~                                                                                     \u001b[7;1H~                                                                                     \u001b[8;1H~                                                                                     \u001b[9;1H~                                                                                     \u001b[10;1H~                                                                                     \u001b[11;1H~                                                                                     \u001b[12;1H~                                                                                     \u001b[13;1H~                                                                                     \u001b[14;1H~                                                                                     \u001b[15;1H~                                                                                     \u001b[16;1H~                                                                                     \u001b[17;1H~                                                                                     \u001b[18;1H~                                                                                     \u001b[19;1H~                                                                                     \u001b[20;1H~                                                                                     \u001b[m\u001b[21;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[38;5;85m\u001b[48;5;234m test.cpp                                        cpp \u001b[m\u001b[38;5;255m\u001b[48;5;238m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;190m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:0/1☰℅\u001b[21;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[1;7H\u001b[?25h"]
[3.425876, "o", "\u001b[?12$p"]
[3.426006, "o", "\u001b[?25l\u001b[?25h"]
[3.428341, "o", "\u001b[?25l\u001b[?25h"]
[3.431609, "o", "\u001b[?25l\u001b[?25h"]
[3.559318, "o", "\u001b[?25l\u001b[?25h"]
[3.562098, "o", "\u001b[?25l\u001b[?25h"]
[3.562214, "o", "\u001b[?25l\u001b[?25h"]
[3.587445, "o", "\u001b[?25l\u001b[?25h"]
[3.741749, "o", "\u001b[?25l\u001b[?25h"]
[3.745961, "o", "\u001b[?25l\u001b[?25h"]
[3.892807, "o", "\u001b[?25l\u001b[?25h"]
[3.89664, "o", "\u001b[?25l\u001b[?25h"]
[3.931061, "o", "\u001b[?25l\u001b[?25h"]
[4.102346, "o", "\u001b[?25l\u001b[m\u001b[22;1H\u001b[1m-- INSERT --\u001b[m\u001b[21;1H\u001b[38;5;17m\u001b[48;5;45m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45mINSERT\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\b\u001b[38;5;17m\u001b[48;5;45m \u001b[m\u001b[97m\u001b[48;5;17m test.cpp                                        cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:0\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;45m/1☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[m\u001b[21;83H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m℅\u001b[21;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[21;86H\u001b[38;5;17m\u001b[48;5;45m \u001b[1;7H\u001b[?25h"]
[4.258208, "o", "\u001b[?25l\u001b[m#\u001b[21;9H\u001b[38;5;255m\u001b[48;5;53m test.cpp[+]                                    \u001b[m\u001b[22C\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1/\u001b[4C2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b]2;test.cpp + (~) - VIM\u0007\u001b[1;8H\u001b[?25h"]
[4.322692, "o", "\u001b[?25l\u001b[mi\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;9H\u001b[?25h"]
[4.414212, "o", "\u001b[?25l\u001b[?25h"]
[4.423633, "o", "\u001b[?25l\u001b[mn\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;10H\u001b[?25h"]
[4.524741, "o", "\u001b[?25l\u001b[mc\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;11H\u001b[?25h"]
[4.564767, "o", "\u001b[?25l\u001b[?25h"]
[4.625888, "o", "\u001b[?25l\u001b[ml\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;12H\u001b[?25h"]
[4.727539, "o", "\u001b[?25l\u001b[mu\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;13H\u001b[?25h"]
[4.828447, "o", "\u001b[?25l\u001b[md\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;14H\u001b[?25h"]
[4.9298, "o", "\u001b[?25l\u001b[me\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;15H\u001b[?25h"]
[5.028526, "o", "\u001b[?25l\u001b[m\u001b[21;56H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:11\b/1☰☰\b℅\u001b[21;83H:10\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;16H\u001b[?25h"]
[5.131373, "o", "\u001b[?25l\u001b[m\u001b[1;7H\u001b[38;5;81m#include <\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;17H\u001b[?25h"]
[5.233903, "o", "\u001b[?25l\u001b[mi\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;18H\u001b[?25h"]
[5.33476, "o", "\u001b[?25l\u001b[mo\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;19H\u001b[?25h"]
[5.435972, "o", "\u001b[?25l\u001b[ms\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;20H\u001b[?25h"]
[5.536624, "o", "\u001b[?25l\u001b[mt\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;21H\u001b[?25h"]
[5.637809, "o", "\u001b[?25l\u001b[mr\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;22H\u001b[?25h"]
[5.738931, "o", "\u001b[?25l\u001b[me\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;23H\u001b[?25h"]
[5.840109, "o", "\u001b[?25l\u001b[ma\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;24H\u001b[?25h"]
[5.94117, "o", "\u001b[?25l\u001b[mm\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;25H\u001b[?25h"]
[6.046081, "o", "\u001b[?25l\u001b[m\u001b[1;16H\u001b[95m<iostream>\u001b[m\u001b[21;84H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m20\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;26H\u001b[?25h"]
[6.173671, "o", "\u001b[?25l\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  2 \u001b[m\u001b[2;7H\u001b[K\u001b[21;56H\u001b[38;5;255m\u001b[48;5;53m \u001b[m\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:21\b/2☰:\b℅\u001b[21;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[2;7H\u001b[?25h"]
[6.20932, "o", "\u001b[?25l\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  3 \u001b[m\u001b[3;7H\u001b[K\u001b[21;79H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3/3☰\u001b[3;7H\u001b[?25h"]
[6.365315, "o", "\u001b[?25l\u001b[?25h"]
[6.412165, "o", "\u001b[?25l\u001b[?25h"]
[6.418011, "o", "\u001b[?25l\u001b[?25h"]
[6.459371, "o", "\u001b[?25l\u001b[?25h"]
[6.459551, "o", "\u001b[?25l\u001b[?25h"]
[6.83525, "o", "\u001b[?25l\u001b[?25h"]
[6.91298, "o", "\u001b[?25l\u001b[?25h"]
[6.920106, "o", "\u001b[?25l\u001b[?25h"]
[7.423429, "o", "\u001b[?25l\u001b[m\u001b[1;1H\u001b[30m\u001b[103mW>\u001b[4C#include <iostream>\u001b[m\u001b[21;52H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:3/3☰:\b℅\u001b[21;79H:13\u001b[m\b\u001b[38;5;17m\u001b[48;5;45m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m☰\u001b[m\b\u001b[38;5;232m\u001b[48;5;166m W:1 \u001b[3;7H\u001b[?25h"]
[8.263016, "o", "\u001b[?25l\u001b[mi\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;8H\u001b[?25h"]
[8.272227, "o", "\u001b[?25l\u001b[?25h"]
[8.366541, "o", "\u001b[?25l\u001b[mn\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;9H\u001b[?25h"]
[8.466937, "o", "\u001b[?25l\u001b[m\b\b\u001b[38;5;121mint\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;10H\u001b[?25h"]
[8.567807, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;11H\u001b[?25h"]
[8.676461, "o", "\u001b[?25l\u001b[mf\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;12H\u001b[?25h"]
[8.775087, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m(\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;13H\u001b[?25h"]
[8.877973, "o", "\u001b[?25l\u001b[mi\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;14H\u001b[?25h"]
[8.979231, "o", "\u001b[?25l\u001b[mn\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;15H\u001b[?25h"]
[9.080702, "o", "\u001b[?25l\u001b[m\b\b\u001b[38;5;121mint\u001b[m\u001b[21;51H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:33\b/3☰☰\b℅\u001b[21;78H:10\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;16H\u001b[?25h"]
[9.182073, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;17H\u001b[?25h"]
[9.283838, "o", "\u001b[?25l\u001b[ma\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;18H\u001b[?25h"]
[9.385256, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m,\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;19H\u001b[?25h"]
[9.486669, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;20H\u001b[?25h"]
[9.588231, "o", "\u001b[?25l\u001b[mi\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;21H\u001b[?25h"]
[9.689593, "o", "\u001b[?25l\u001b[mn\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;22H\u001b[?25h"]
[9.791414, "o", "\u001b[?25l\u001b[m\b\b\u001b[38;5;121mint\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;23H\u001b[?25h"]
[9.895011, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;24H\u001b[?25h"]
[10.005927, "o", "\u001b[?25l\u001b[mb\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;25H\u001b[?25h"]
[10.10614, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m)\u001b[m\u001b[3;12H\u001b[38;5;130m\u001b[46m(\u001b[12C)\u001b[m\u001b[21;79H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m20\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;26H\u001b[?25h"]
[10.20612, "o", "\u001b[?25l\u001b[m\u001b[3;12H\u001b[38;5;130m(\u001b[12C)\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;27H\u001b[?25h"]
[10.318166, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m{\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;28H\u001b[?25h"]
[10.434857, "o", "\u001b[?25l\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  4 \u001b[m    \u001b[4;11H\u001b[K\u001b[21;51H\u001b[38;5;255m\u001b[48;5;53m \u001b[m\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:43\b/4☰:\b℅\u001b[21;79H:5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;11H\u001b[?25h"]
[10.468848, "o", "\u001b[?25l\u001b[mi\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;12H\u001b[?25h"]
[10.570771, "o", "\u001b[?25l\u001b[mn\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;13H\u001b[?25h"]
[10.673251, "o", "\u001b[?25l\u001b[m\b\b\u001b[38;5;121mint\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;14H\u001b[?25h"]
[10.773743, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;15H\u001b[?25h"]
[10.87669, "o", "\u001b[?25l\u001b[mr\u001b[21;51H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:44\b/4☰☰\b℅\u001b[21;78H:10\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;16H\u001b[?25h"]
[10.97739, "o", "\u001b[?25l\u001b[me\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;17H\u001b[?25h"]
[11.080188, "o", "\u001b[?25l\u001b[ms\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;18H\u001b[?25h"]
[11.182839, "o", "\u001b[?25l\u001b[mu\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;19H\u001b[?25h"]
[11.280793, "o", "\u001b[?25l\u001b[ml\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;20H\u001b[?25h"]
[11.38371, "o", "\u001b[?25l\u001b[mt\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;21H\u001b[?25h"]
[11.486036, "o", "\u001b[?25l\u001b[m\u001b[34m{\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;22H\u001b[?25h"]
[11.58838, "o", "\u001b[?25l\u001b[ma\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;23H\u001b[?25h"]
[11.689817, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;24H\u001b[?25h"]
[11.792904, "o", "\u001b[?25l\u001b[m\u001b[34m+\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;25H\u001b[?25h"]
[11.896325, "o", "\u001b[?25l\u001b[m\u001b[21;79H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m20\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;26H\u001b[?25h"]
[11.998265, "o", "\u001b[?25l\u001b[mb\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;27H\u001b[?25h"]
[12.109522, "o", "\u001b[?25l\u001b[m\u001b[34m}\u001b[m\u001b[4;21H\u001b[34m\u001b[46m{\u001b[5C}\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;28H\u001b[?25h"]
[12.219217, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m;\u001b[m\u001b[4;21H\u001b[34m{\u001b[5C}\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[4;29H\u001b[?25h"]
[12.334543, "o", "\u001b[?25l\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  5 \u001b[m    \u001b[5;11H\u001b[K\u001b[21;51H\u001b[38;5;255m\u001b[48;5;53m \u001b[m\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:54\b/5☰:\b℅\u001b[21;79H:5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;11H\u001b[?25h"]
[12.369946, "o", "\u001b[?25l\u001b[mr\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;12H\u001b[?25h"]
[12.473374, "o", "\u001b[?25l\u001b[me\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;13H\u001b[?25h"]
[12.573862, "o", "\u001b[?25l\u001b[mt\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;14H\u001b[?25h"]
[12.676984, "o", "\u001b[?25l\u001b[mu\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;15H\u001b[?25h"]
[12.777582, "o", "\u001b[?25l\u001b[mr\u001b[21;51H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:55\b/5☰☰\b℅\u001b[21;78H:10\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;16H\u001b[?25h"]
[12.880393, "o", "\u001b[?25l\u001b[m\b\b\b\b\b\u001b[93mreturn\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;17H\u001b[?25h"]
[12.980755, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;18H\u001b[?25h"]
[13.083464, "o", "\u001b[?25l\u001b[m\u001b[95m3\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;19H\u001b[?25h"]
[13.182654, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;20H\u001b[?25h"]
[13.288374, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m*\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;21H\u001b[?25h"]
[13.394738, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;22H\u001b[?25h"]
[13.49609, "o", "\u001b[?25l\u001b[mr\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;23H\u001b[?25h"]
[13.597373, "o", "\u001b[?25l\u001b[me\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;24H\u001b[?25h"]
[13.698263, "o", "\u001b[?25l\u001b[ms\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;25H\u001b[?25h"]
[13.799859, "o", "\u001b[?25l\u001b[mu\u001b[21;79H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m20\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;26H\u001b[?25h"]
[13.900704, "o", "\u001b[?25l\u001b[ml\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;27H\u001b[?25h"]
[14.002472, "o", "\u001b[?25l\u001b[mt\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;28H\u001b[?25h"]
[14.104249, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m;\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[5;29H\u001b[?25h"]
[14.229982, "o", "\u001b[?25l\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  6 \u001b[m    \u001b[6;11H\u001b[K\u001b[21;51H\u001b[38;5;255m\u001b[48;5;53m \u001b[m\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:65\b/6☰:\b℅\u001b[21;79H:5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[6;11H\u001b[?25h"]
[14.27167, "o", "\u001b[?25l\u001b[m\b\b\b\b\u001b[38;5;130m}\u001b[m\u001b[3;27H\u001b[38;5;130m\u001b[46m{\u001b[6;7H}\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[6;8H\u001b[?25h"]
[14.477503, "o", "\u001b[?25l\u001b[?25h"]
[14.481557, "o", "\u001b[?25l\u001b[?25h"]
[14.522594, "o", "\u001b[?25l\u001b[?25h"]
[14.522908, "o", "\u001b[?25l\u001b[?25h"]
[14.530711, "o", "\u001b[?25l\u001b[?25h"]
[14.850466, "o", "\u001b[?25l\u001b[?25h"]
[14.857637, "o", "\u001b[?25l\u001b[?25h"]
[14.860703, "o", "\u001b[?25l\u001b[?25h"]
[15.365875, "o", "\u001b[?25l\u001b[?25h"]
[17.412548, "o", "\u001b[?25l\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  7 \u001b[m\u001b[7;7H\u001b[K\u001b[3;27H\u001b[38;5;130m{\u001b[6;7H}\u001b[m\u001b[21;74H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7/7☰\u001b[2C1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[7;7H\u001b[?25h"]
[17.446504, "o", "\u001b[?25l\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  8 \u001b[m\u001b[8;7H\u001b[K\u001b[21;74H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8/8☰\u001b[8;7H\u001b[?25h"]
[17.481557, "o", "\u001b[?25l\u001b[mi\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;8H\u001b[?25h"]
[17.583025, "o", "\u001b[?25l\u001b[mn\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;9H\u001b[?25h"]
[17.688676, "o", "\u001b[?25l\u001b[m\b\b\u001b[38;5;121mint\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;10H\u001b[?25h"]
[17.794268, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;11H\u001b[?25h"]
[17.89049, "o", "\u001b[?25l\u001b[mm\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;12H\u001b[?25h"]
[17.993498, "o", "\u001b[?25l\u001b[ma\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;13H\u001b[?25h"]
[18.101115, "o", "\u001b[?25l\u001b[mi\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;14H\u001b[?25h"]
[18.196942, "o", "\u001b[?25l\u001b[mn\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;15H\u001b[?25h"]
[18.308868, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m(\u001b[m\u001b[21;51H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:88\b/8☰☰\b℅\u001b[21;78H:10\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;16H\u001b[?25h"]
[18.411922, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m)\u001b[m\b\b\u001b[38;5;130m\u001b[46m()\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;17H\u001b[?25h"]
[18.513844, "o", "\u001b[?25l\u001b[m\b\b\u001b[38;5;130m()\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;18H\u001b[?25h"]
[18.61391, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m{\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[8;19H\u001b[?25h"]
[18.737676, "o", "\u001b[?25l\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  9 \u001b[m    \u001b[9;11H\u001b[K\u001b[21;51H\u001b[38;5;255m\u001b[48;5;53m \u001b[m\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:98\b/9☰:\b℅\u001b[21;79H:5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;11H\u001b[?25h"]
[18.773183, "o", "\u001b[?25l\u001b[ms\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;12H\u001b[?25h"]
[18.876268, "o", "\u001b[?25l\u001b[mt\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;13H\u001b[?25h"]
[18.98431, "o", "\u001b[?25l\u001b[md\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;14H\u001b[?25h"]
[19.089896, "o", "\u001b[?25l\u001b[m\u001b[9;7H\u001b[93mstd\u001b[m:\u001b[9;11H\u001b[K\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;11H\u001b[?25h"]
[19.196888, "o", "\u001b[?25l\u001b[m\b\b\b\b    std\u001b[38;5;130m::\u001b[m\u001b[21;51H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:99\b/9☰☰\b℅\u001b[21;78H:10\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;16H\u001b[?25h"]
[19.303821, "o", "\u001b[?25l\u001b[mc\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;17H\u001b[?25h"]
[19.40466, "o", "\u001b[?25l\u001b[mo\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;18H\u001b[?25h"]
[19.506509, "o", "\u001b[?25l\u001b[mu\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;19H\u001b[?25h"]
[19.607381, "o", "\u001b[?25l\u001b[mt\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;20H\u001b[?25h"]
[19.708823, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;21H\u001b[?25h"]
[19.811097, "o", "\u001b[?25l\u001b[m\u001b[34m<\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;22H\u001b[?25h"]
[19.914837, "o", "\u001b[?25l\u001b[m\b\u001b[38;5;130m<<\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;23H\u001b[?25h"]
[20.019781, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;24H\u001b[?25h"]
[20.121565, "o", "\u001b[?25l\u001b[mf\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;25H\u001b[?25h"]
[20.228552, "o", "\u001b[?25l\u001b[m\u001b[34m(\u001b[m\u001b[21;79H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m20\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;26H\u001b[?25h"]
[20.3312, "o", "\u001b[?25l\u001b[m\u001b[95m3\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;27H\u001b[?25h"]
[20.43119, "o", "\u001b[?25l\u001b[m\u001b[34m,\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;28H\u001b[?25h"]
[20.532152, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;29H\u001b[?25h"]
[20.633719, "o", "\u001b[?25l\u001b[m\u001b[95m5\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;30H\u001b[?25h"]
[20.745238, "o", "\u001b[?25l\u001b[m\u001b[34m)\u001b[m\b\b\b\b\b\b\u001b[34m\u001b[46m(\u001b[4C)\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;31H\u001b[?25h"]
[20.844255, "o", "\u001b[?25l\u001b[m\b\b\b\b\b\b\u001b[34m(\u001b[4C)\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;32H\u001b[?25h"]
[20.94811, "o", "\u001b[?25l\u001b[m\u001b[34m<\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;33H\u001b[?25h"]
[21.057615, "o", "\u001b[?25l\u001b[m\b\u001b[38;5;130m<<\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;34H\u001b[?25h"]
[21.162076, "o", "\u001b[?25l\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;35H\u001b[?25h"]
[21.265057, "o", "\u001b[?25l\u001b[m\u001b[95m\"\u001b[m\u001b[21;79H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m30\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;36H\u001b[?25h"]
[21.367898, "o", "\u001b[?25l\u001b[m\u001b[38;5;224m\\\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;37H\u001b[?25h"]
[21.471088, "o", "\u001b[?25l\u001b[m\u001b[38;5;224mn\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;38H\u001b[?25h"]
[21.579055, "o", "\u001b[?25l\u001b[m\u001b[95m\"\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;39H\u001b[?25h"]
[21.677894, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m;\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[9;40H\u001b[?25h"]
[21.802689, "o", "\u001b[?25l\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m 10 \u001b[m    \u001b[10;11H\u001b[K\u001b[21;50H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:10/10☰:\b℅\u001b[21;79H:5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[10;11H\u001b[?25h"]
[21.840656, "o", "\u001b[?25l\u001b[m\b\b\b\b\u001b[38;5;130m}\u001b[m\u001b[8;18H\u001b[38;5;130m\u001b[46m{\u001b[10;7H}\u001b[m\u001b[21;80H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[10;8H\u001b[?25h"]
[22.045495, "o", "\u001b[?25l\u001b[?25h"]
[22.059578, "o", "\u001b[?25l\u001b[?25h"]
[22.089985, "o", "\u001b[?25l\u001b[?25h"]
[22.090266, "o", "\u001b[?25l\u001b[?25h"]
[22.100347, "o", "\u001b[?25l\u001b[?25h"]
[22.610334, "o", "\u001b[?25l\u001b[m\u001b[1;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[4C\u001b[38;5;81m#include \u001b[m\u001b[95m<iostream>\u001b[m\u001b[21;50H\u001b[38;5;255m\u001b[48;5;53m     \u001b[m\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m0\b ㏑:10:\b/10☰℅\u001b[21;84H:2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[10;8H\u001b[?25h"]
[25.008654, "o", "\u001b[m\u001b[22;1H\u001b[K\u001b[10;7H"]
[25.020054, "o", "\u001b[?25l"]
[25.063216, "o", "\u001b[21;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[m\b\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[46C\u001b[38;5;85m\u001b[48;5;234m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;238m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;190m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:10\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/10☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m℅\u001b[m\u001b[21;83H\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[21;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[m\u001b[21;86H\u001b[38;5;17m\u001b[48;5;190m \u001b[10;7H\u001b[?25h\u001b[?25l\u001b[22;1H\u001b[m:\u001b[21;1H\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40mCOMMAND\u001b[m\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[38;5;85m\u001b[48;5;234m test.cpp[+]                                 \u001b[m\u001b[13C\u001b[38;5;17m\u001b[48;5;40m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40m ㏑:10\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;40m/10☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[m\u001b[21;83H\u001b[1m\u001b[38;5;17m\u001b[48;5;40m℅\u001b[21;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[21;86H\u001b[38;5;17m\u001b[48;5;40m \u001b[22;2H\u001b[?25h"]
[25.123157, "o", "\u001b[mw"]
[25.221523, "o", "\u001b[?25l\u001b[?25h"]
[25.224701, "o", "q"]
[25.352013, "o", "\r"]
[25.352078, "o", "\u001b[?25l\u001b[?2004l\u001b[>4;m"]
[25.511179, "o", "\u001b]2;test.cpp + (~) - VIM\u0007"]
[25.670325, "o", "\u001b]2;test.cpp + (~) - VIM\u0007"]
[25.670746, "o", "3 fewer lines"]
[25.670891, "o", "\r\r\r\n\"test.cpp\""]
[25.674381, "o", " [New] 8L, 137B written"]
[26.182111, "o", "\u001b]2;test.cpp + (~) - VIM\u0007"]
[26.189605, "o", "\r\u001b]2;~ : asciinema\u0007\u001b[23;2t\u001b[23;1t\u001b[22;2t\u001b[22;1t\u001b[23;2t\u001b[23;1t\r\r\n\u001b[?1004l\u001b[?2004l\u001b[?1l\u001b>\u001b[?1049l\u001b[23;0;0t\u001b[?25h\u001b[>4;m"]
[26.194309, "o", "\u001b]0;tomasi@maurizio-tombook:~\u0007\u001b[?2004h"]
[26.194475, "o", "\u001b[01;32m[tomasi@maurizio-tombook\u001b[01;37m ~\u001b[01;32m]$\u001b[00m "]
[26.40704, "o", "g"]
[26.510938, "o", "+"]
[26.622667, "o", "+"]
[26.726168, "o", " "]
[26.83045, "o", "-"]
[26.934997, "o", "o"]
[27.03758, "o", " "]
[27.139524, "o", "t"]
[27.241081, "o", "e"]
[27.341917, "o", "s"]
[27.443957, "o", "t"]
[27.545878, "o", " "]
[27.647365, "o", "-"]
[27.752989, "o", "g"]
[27.853808, "o", "3"]
[27.957167, "o", " "]
[28.06127, "o", "-"]
[28.169332, "o", "W"]
[28.273687, "o", "a"]
[28.375208, "o", "l"]
[28.477762, "o", "l"]
[28.579887, "o", " "]
[28.681142, "o", "-"]
[28.787446, "o", "-"]
[28.891626, "o", "p"]
[28.993209, "o", "e"]
[29.09519, "o", "d"]
[29.196669, "o", "a"]
[29.298688, "o", "n"]
[29.400452, "o", "t"]
[29.502619, "o", "i"]
[29.604817, "o", "c"]
[29.706116, "o", " "]
[29.809933, "o", "-"]
[29.913263, "o", "s"]
[30.014245, "o", "t"]
[30.117323, "o", "d"]
[30.221679, "o", "="]
[30.325885, "o", "c"]
[30.43255, "o", "+"]
[30.543664, "o", "+"]
[30.650779, "o", "2"]
[30.752522, "o", "3"]
[30.854118, "o", " "]
[30.956376, "o", "t"]
[31.057321, "o", "e"]
[31.160002, "o", "s"]
[31.261508, "o", "t"]
[31.363017, "o", "."]
[31.464573, "o", "c"]
[31.566039, "o", "p"]
[31.666163, "o", "p"]
[31.791997, "o", "\r\n\u001b[?2004l\r"]
[33.161024, "o", "\u001b]0;tomasi@maurizio-tombook:~\u0007\u001b[?2004h"]
[33.161092, "o", "\u001b[01;32m[tomasi@maurizio-tombook\u001b[01;37m ~\u001b[01;32m]$\u001b[00m "]
[34.847385, "o", "."]
[34.949122, "o", "/"]
[35.05228, "o", "t"]
[35.154072, "o", "e"]
[35.256391, "o", "s"]
[35.357935, "o", "t"]
[35.484212, "o", "\r\n\u001b[?2004l\r"]
[35.502416, "o", "24\r\n"]
[35.503694, "o", "\u001b]0;tomasi@maurizio-tombook:~\u0007"]
[35.503753, "o", "\u001b[?2004h\u001b[01;32m[tomasi@maurizio-tombook\u001b[01;37m ~\u001b[01;32m]$\u001b[00m "]
[38.539232, "o", "v"]
[38.642646, "o", "i"]
[38.74328, "o", "m"]
[38.846156, "o", " "]
[38.947922, "o", "i"]
[39.049507, "o", "n"]
[39.152466, "o", "c"]
[39.254577, "o", "l"]
[39.355812, "o", "u"]
[39.458036, "o", "d"]
[39.559824, "o", "e"]
[39.661752, "o", "."]
[39.763042, "o", "h"]
[39.888433, "o", "\r\n\u001b[?2004l\r"]
[40.162621, "o", "\u001b[?1049h\u001b[22;0;0t\u001b[>4;2m\u001b[?1h\u001b=\u001b[?2004h\u001b[?1004h\u001b[1;22r\u001b[?12h\u001b[?12l\u001b[22;2t\u001b[22;1t"]
[40.162968, "o", "\u001b[27m\u001b[23m\u001b[29m\u001b[m\u001b[H\u001b[2J\u001b[?25l\u001b[22;1H\"include.h\" [New]"]
[40.242093, "o", "\u001b[2;1H▽\u001b[6n\u001b[2;1H  \u001b[3;1H\u001bPzz\u001b\\\u001b[0%m\u001b[6n\u001b[3;1H           \u001b[1;1H\u001b[>c\u001b]10;?\u0007\u001b]11;?\u0007"]
[40.286986, "o", "\u001b[1;1H\u001b[93m  1 \u001b[m\r\n\u001b[94m~                                                                                     \u001b[3;1H~                                                                                     \u001b[4;1H~                                                                                     \u001b[5;1H~                                                                                     \u001b[6;1H~                                                                                     \u001b[7;1H~                                                                                     \u001b[8;1H~                                                                                     \u001b[9;1H~                                                                                     \u001b[10;1H~                                                                                     \u001b[11;1H~                                                                                     \u001b[12;1H~                                                                                     \u001b[13;1H~                                                                                     \u001b[14;1H~                                                                                     \u001b[15;1H~                                                                                     \u001b[16;1H~                                                                                     \u001b[17;1H~                                                                                     \u001b[18;1H~                                                                                     \u001b[19;1H~                                                                                     \u001b[20;1H~                                                                                     \u001b[m\u001b[21;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[38;5;85m\u001b[48;5;234m include.h                                       cpp \u001b[m\u001b[38;5;255m\u001b[48;5;238m [unix] "]
[40.287349, "o", "\u001b[m\u001b[38;5;17m\u001b[48;5;190m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:0/1☰℅\u001b[21;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b]2;include.h (~) - VIM\u0007"]
[40.289822, "o", "\u001b[1;5H\u001b[?25h\u001b[?4m"]
[40.302398, "o", "\u001b[27m\u001b[23m\u001b[29m\u001b[m\u001b[H\u001b[2J\u001b[?25l\u001b[1;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  1 \u001b[m\r\n\u001b[94m~                                                                                     \u001b[3;1H~                                                                                     \u001b[4;1H~                                                                                     \u001b[5;1H~                                                                                     \u001b[6;1H~                                                                                     \u001b[7;1H~                                                                                     \u001b[8;1H~                                                                                     \u001b[9;1H~                                                                                     \u001b[10;1H~                                                                                     \u001b[11;1H~                                                                                     \u001b[12;1H~                                                                                     \u001b[13;1H~                                                                                     \u001b[14;1H~                                                                                     \u001b[15;1H~                                                                                     \u001b[16;1H~                                                                                     \u001b[17;1H~                                                                                     \u001b[18;1H~                                                                                     \u001b[19;1H~                                                                                     \u001b[20;1H~                                                                                     \u001b[m\u001b[21;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[38;5;85m\u001b[48;5;234m include.h                                       cpp \u001b[m\u001b[38;5;255m\u001b[48;5;238m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;190m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:0/1☰℅\u001b[21;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[1;7H\u001b[?25h"]
[40.302696, "o", "\u001b[?12$p"]
[40.304901, "o", "\u001b[?25l\u001b[?25h"]
[40.305427, "o", "\u001b[?25l\u001b[?25h"]
[40.311821, "o", "\u001b[?25l\u001b[?25h"]
[40.443705, "o", "\u001b[?25l\u001b[?25h"]
[40.449526, "o", "\u001b[?25l\u001b[?25h"]
[40.451771, "o", "\u001b[?25l\u001b[?25h"]
[40.466984, "o", "\u001b[?25l\u001b[?25h"]
[40.619605, "o", "\u001b[?25l\u001b[?25h"]
[40.622192, "o", "\u001b[?25l\u001b[?25h"]
[40.770568, "o", "\u001b[?25l\u001b[?25h"]
[40.772776, "o", "\u001b[?25l\u001b[?25h"]
[40.810268, "o", "\u001b[?25l\u001b[?25h"]
[40.967703, "o", "\u001b[?25l\u001b[m\u001b[22;1H\u001b[1m-- INSERT --\u001b[m\u001b[21;1H\u001b[38;5;17m\u001b[48;5;45m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45mINSERT\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\b\u001b[38;5;17m\u001b[48;5;45m \u001b[m\u001b[97m\u001b[48;5;17m include.h                                       cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:0\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;45m/1☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[m\u001b[21;83H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m℅\u001b[21;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[21;86H\u001b[38;5;17m\u001b[48;5;45m \u001b[1;7H\u001b[?25h"]
[40.998164, "o", "\u001b[?25l\u001b[mi\u001b[21;9H\u001b[38;5;255m\u001b[48;5;53m include.h[+]                                   \u001b[m\u001b[22C\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1/\u001b[4C2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b]2;include.h + (~) - VIM\u0007\u001b[1;8H\u001b[?25h"]
[41.078656, "o", "\u001b[?25l\u001b[mn\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;9H\u001b[?25h"]
[41.179507, "o", "\u001b[?25l\u001b[m\b\b\u001b[38;5;121mint\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;10H\u001b[?25h"]
[41.280757, "o", "\u001b[?25l\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;11H\u001b[?25h"]
[41.29512, "o", "\u001b[?25l\u001b[?25h"]
[41.382029, "o", "\u001b[?25l\u001b[mf\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;12H\u001b[?25h"]
[41.445683, "o", "\u001b[?25l\u001b[?25h"]
[41.484633, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m(\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;13H\u001b[?25h"]
[41.58549, "o", "\u001b[?25l\u001b[mi\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;14H\u001b[?25h"]
[41.686872, "o", "\u001b[?25l\u001b[mn\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;15H\u001b[?25h"]
[41.788077, "o", "\u001b[?25l\u001b[m\b\b\u001b[38;5;121mint\u001b[m\u001b[21;56H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:11\b/1☰☰\b℅\u001b[21;83H:10\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;16H\u001b[?25h"]
[41.889125, "o", "\u001b[?25l\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;17H\u001b[?25h"]
[41.990532, "o", "\u001b[?25l\u001b[ma\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;18H\u001b[?25h"]
[42.091561, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m,\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;19H\u001b[?25h"]
[42.192578, "o", "\u001b[?25l\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;20H\u001b[?25h"]
[42.293822, "o", "\u001b[?25l\u001b[mi\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;21H\u001b[?25h"]
[42.395037, "o", "\u001b[?25l\u001b[mn\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;22H\u001b[?25h"]
[42.495988, "o", "\u001b[?25l\u001b[m\b\b\u001b[38;5;121mint\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;23H\u001b[?25h"]
[42.597444, "o", "\u001b[?25l\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;24H\u001b[?25h"]
[42.702124, "o", "\u001b[?25l\u001b[mb\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;25H\u001b[?25h"]
[42.813667, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m)\u001b[m\u001b[1;12H\u001b[38;5;130m\u001b[46m(\u001b[12C)\u001b[m\u001b[21;84H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m20\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;26H\u001b[?25h"]
[42.905045, "o", "\u001b[?25l\u001b[m\u001b[1;12H\u001b[38;5;130m(\u001b[12C)\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;27H\u001b[?25h"]
[43.008866, "o", "\u001b[?25l\u001b[m\u001b[38;5;130m{\u001b[m\u001b[21;85H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[1;28H\u001b[?25h"]
[43.132594, "o", "\u001b[?25l\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  2 \u001b[m    \u001b[2;11H\u001b[K\u001b[21;56H\u001b[38;5;255m\u001b[48;5;53m \u001b[m\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:21\b/2☰:\b℅\u001b[21;84H:5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[2;11H\u001b[?25h"]
[43.173517, "o", "\u001b[?25l\u001b[?25h"]
[43.3363, "o", "\u001b[?25l\u001b[?25h"]
[43.342604, "o", "\u001b[?25l\u001b[?25h"]
[43.383543, "o", "\u001b[?25l\u001b[?25h"]
[43.383704, "o", "\u001b[?25l\u001b[?25h"]
[43.389869, "o", "\u001b[?25l\u001b[?25h"]
[43.39656, "o", "\u001b[?25l\u001b[?25h"]
[43.403657, "o", "\u001b[?25l\u001b[?25h"]
[43.906396, "o", "\u001b[?25l\u001b[m\r\u001b[97m\u001b[101mE>\u001b[m\u001b[21;48H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:2/2☰℅\u001b[21;75H:5 :\u001b[m\b\b\u001b[38;5;17m\u001b[48;5;45m \u001b[m\u001b[38;5;232m\u001b[48;5;160m E:1(L3) \u001b[2;11H\u001b[?25h"]
[44.210722, "o", "\u001b[m\u001b[22;1H\u001b[K\u001b[2;7H"]
[44.222837, "o", "\u001b[?25l"]
[44.262839, "o", "\u001b[21;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[m\b\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[39C\u001b[38;5;85m\u001b[48;5;234m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;238m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;190m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:2\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/2☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m℅\u001b[m\u001b[21;74H\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[21;75H:1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[m\b\u001b[38;5;17m\u001b[48;5;190m \u001b[2;7H\u001b[?25h\u001b[?25l\u001b[22;1H\u001b[m:\u001b[21;1H\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40mCOMMAND\u001b[m\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[38;5;85m\u001b[48;5;234m include.h[+]                         \u001b[m\u001b[13C\u001b[38;5;17m\u001b[48;5;40m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40m ㏑:2\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;40m/2☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[m\u001b[21;74H\u001b[1m\u001b[38;5;17m\u001b[48;5;40m℅\u001b[21;75H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\b\u001b[38;5;17m\u001b[48;5;40m \r\n\u001b[m:\u001b[?25h"]
[44.326169, "o", "w"]
[44.423539, "o", "\u001b[?25l\u001b[?25h"]
[44.457047, "o", "\r"]
[44.457697, "o", "\u001b[?25l"]
[44.458935, "o", "\u001b[>4;m"]
[44.61645, "o", "\u001b[>4;2m\u001b]2;include.h + (~) - VIM\u0007"]
[44.618629, "o", "\u001b[>4;m"]
[44.776309, "o", "\u001b[>4;2m\u001b]2;include.h + (~) - VIM\u0007"]
[44.77657, "o", "\"include.h\""]
[44.780568, "o", " [New] 2L, 23B written"]
[44.821308, "o", "\u001b[21;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40mD\u001b[m\b\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[38;5;17m\u001b[48;5;40m \u001b[m\b\u001b[38;5;85m\u001b[48;5;234m include.h    \u001b[m\u001b[38C\u001b[38;5;17m\u001b[48;5;190m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:2\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/2☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40m℅\u001b[m\u001b[21;74H\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[21;75H:1\u001b[m\u001b[38;5;17m\u001b[48;5;40m \u001b[m\b\u001b[38;5;17m\u001b[48;5;190m \u001b]2;include.h (~) - VIM\u0007"]
[44.823737, "o", "\u001b[2;7H\u001b[?25h\u001b[?4m"]
[44.82597, "o", "\u001b[?25l\u001b[?25h"]
[44.826901, "o", "\u001b[?25l\u001b[m\u001b[79C  \u001b[3;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m    \u001b[m \u001b[97m\u001b[101mExpected '}'\u001b[m\u001b[3;20H\u001b[K\u001b[2;7H\u001b[?25h"]
[44.850944, "o", "\u001b[?25l\u001b[?25h"]
[44.851014, "o", "\u001b[?25l\u001b[?25h"]
[44.858785, "o", "\u001b[?25l\u001b[?25h"]
[44.967624, "o", "\u001b[?25l\u001b[?25h"]
[44.969828, "o", "\u001b[?25l\u001b[?25h"]
[44.97001, "o", "\u001b[?25l\u001b[?25h"]
[45.000238, "o", "\u001b[?25l\u001b[?25h"]
[45.154426, "o", "\u001b[?25l\u001b[?25h"]
[45.156545, "o", "\u001b[?25l\u001b[?25h"]
[45.308962, "o", "\u001b[?25l\u001b[?25h"]
[45.311143, "o", "\u001b[?25l\u001b[?25h"]
[45.361735, "o", "\u001b[?25l\u001b[79C  \u001b[3;1H\u001b[96m\u001b[48;5;242m \u001b[2;7H\u001b[?25h"]
[45.531095, "o", "\u001b[?25l\u001b[m\u001b[22;1H\u001b[K\u001b[22;1H:\u001b[21;1H\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40mCOMMAND\u001b[m\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[38;5;85m\u001b[48;5;234m include.h\u001b[m\u001b[41C\u001b[38;5;17m\u001b[48;5;40m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40m ㏑:2\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;40m/2☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[m\u001b[21;74H\u001b[1m\u001b[38;5;17m\u001b[48;5;40m℅\u001b[21;75H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\b\u001b[38;5;17m\u001b[48;5;40m \r\n\u001b[m:\u001b[?25h"]
[45.620446, "o", "s"]
[45.720645, "o", "p"]
[45.8235, "o", "l"]
[45.925752, "o", "i"]
[46.026697, "o", "t"]
[46.150243, "o", "\r"]
[46.200265, "o", "\u001b[?25l\u001b[11;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[38;5;85m\u001b[48;5;234m include.h                              cpp \u001b[m\u001b[38;5;255m\u001b[48;5;238m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;190m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:2/2☰℅\u001b[11;75H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[38;5;232m\u001b[48;5;160m E:1(L3) \u001b[m\u001b[12;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  1 \u001b[m\u001b[38;5;121mint\u001b[m f\u001b[38;5;130m(\u001b[m\u001b[38;5;121mint\u001b[m a\u001b[38;5;130m,\u001b[m \u001b[38;5;121mint\u001b[m b\u001b[38;5;130m)\u001b[m \u001b[38;5;130m{\u001b[m\u001b[12;28H\u001b[K\u001b[13;1H\u001b[97m\u001b[101mE>\u001b[m\u001b[93m  2 \u001b[m                                                                                 \u001b[14;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m    \u001b[m \u001b[97m\u001b[101mExpected '}'\u001b[m\u001b[14;20H\u001b[K\u001b[21;1H\u001b[38;5;239m\u001b[48;5;236m include.h                                               cpp \u001b[m\u001b[38;5;239m\u001b[48;5;235m [unix] \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40m2\u001b[m\b\u001b[38;5;239m\u001b[48;5;234m 100% ㏑:2/2☰℅\u001b[21;84H:1 \u001b[2;7H\u001b[?25h"]
[48.223622, "o", "\u001b[?25l\u001b[m\u001b[22;1H\u001b[K\u001b[22;1H:\u001b[11;1H\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40mCOMMAND\u001b[m\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[38;5;85m\u001b[48;5;234m include.h\u001b[m\u001b[41C\u001b[38;5;17m\u001b[48;5;40m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40m ㏑:2\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;40m/2☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[m\u001b[11;74H\u001b[1m\u001b[38;5;17m\u001b[48;5;40m℅\u001b[11;75H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\b\u001b[38;5;17m\u001b[48;5;40m \u001b[22;2H\u001b[?25h"]
[48.311221, "o", "\u001b[me"]
[48.413405, "o", " "]
[48.515556, "o", "t"]
[48.616613, "o", "e"]
[48.719482, "o", "s"]
[48.802005, "o", "\u001b[?25l\u001b[?25h"]
[48.821107, "o", "t"]
[48.922761, "o", "."]
[49.023556, "o", "c"]
[49.125925, "o", "p"]
[49.227512, "o", "p"]
[49.351436, "o", "\r"]
[49.352618, "o", "\u001b[?25l\"test.cpp\" "]
[49.35266, "o", "8L, 137B"]
[49.416107, "o", "\u001b[27m\u001b[23m\u001b[29m\u001b[m\u001b[H\u001b[2J\u001b[1;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  1 \u001b[m\u001b[38;5;81m#include \u001b[m\u001b[95m<iostream>\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  2 \u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  3 \u001b[m\u001b[38;5;121mint\u001b[m f\u001b[38;5;130m(\u001b[m\u001b[38;5;121mint\u001b[m a\u001b[38;5;130m,\u001b[m \u001b[38;5;121mint\u001b[m b\u001b[38;5;130m)\u001b[m \u001b[38;5;130m{\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  4 \u001b[m    \u001b[38;5;121mint\u001b[m result\u001b[34m{\u001b[ma \u001b[34m+\u001b[m b\u001b[34m}\u001b[m\u001b[38;5;130m;\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  5 \u001b[m    \u001b[93mreturn\u001b[m \u001b[95m3\u001b[m \u001b[38;5;130m*\u001b[m result\u001b[38;5;130m;\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  6 \u001b[m\u001b[38;5;130m}\u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  7 \u001b[m\r\n\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  8 \u001b[m\u001b[38;5;121mint\u001b[m main\u001b[38;5;130m()\u001b[m \u001b[38;5;130m{\u001b[m std\u001b[38;5;130m::\u001b[mcout \u001b[38;5;130m<<\u001b[m f\u001b[34m(\u001b[m\u001b[95m3\u001b[m\u001b[34m,\u001b[m \u001b[95m5\u001b[m\u001b[34m)\u001b[m \u001b[38;5;130m<<\u001b[m \u001b[95m\"\u001b[m\u001b[38;5;224m\\n\u001b[m\u001b[95m\"\u001b[m\u001b[38;5;130m;\u001b[m \u001b[38;5;130m}\u001b[m\r\n\u001b[94m~                                                                                     \u001b[10;1H~                                                                                     \u001b[m\u001b[11;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[38;5;85m\u001b[48;5;234m test.cpp                                    cpp \u001b[m\u001b[38;5;255m\u001b[48;5;238m utf-8[unix] \u001b[m\u001b[38;5;17m\u001b[48;5;190m 12%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:1/8☰℅\u001b[11;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[12;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m  1 \u001b[m\u001b[38;5;121mint\u001b[m f\u001b[38;5;130m(\u001b[m\u001b[38;5;121mint\u001b[m a\u001b[38;5;130m,\u001b[m \u001b[38;5;121mint\u001b[m b\u001b[38;5;130m)\u001b[m \u001b[38;5;130m{\u001b[m\r\n\u001b[97m\u001b[101mE>\u001b[m\u001b[93m  2 \u001b[m\u001b[79C  \u001b[14;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m    \u001b[m \u001b[97m\u001b[101mExpected '}'\u001b[m\r\n\u001b[94m~                                                                                     \u001b[16;1H~                                                                                     \u001b[17;1H~                                                                                     \u001b[18;1H~                                                                                     "]
[49.416783, "o", "\u001b[19;1H~                                                                                     \u001b[20;1H~                                                                                     \u001b[m\u001b[21;1H\u001b[38;5;239m\u001b[48;5;236m include.h                                               cpp \u001b[m\u001b[38;5;239m\u001b[48;5;235m [unix] \u001b[m\u001b[38;5;239m\u001b[48;5;234m 100% ㏑:2/2☰℅\u001b[21;84H:1 \u001b]2;test.cpp (~) - VIM\u0007"]
[49.419302, "o", "\u001b[1;7H\u001b[?25h"]
[49.421664, "o", "\u001b[?25l\u001b[?25h"]
[49.566269, "o", "\u001b[?25l\u001b[?25h"]
[49.569117, "o", "\u001b[?25l\u001b[?25h"]
[49.569294, "o", "\u001b[?25l\u001b[?25h"]
[49.585524, "o", "\u001b[?25l\u001b[?25h"]
[49.747498, "o", "\u001b[?25l\u001b[?25h"]
[49.755706, "o", "\u001b[?25l\u001b[?25h"]
[49.76492, "o", "\u001b[?25l\u001b[?25h"]
[49.767509, "o", "\u001b[?25l\u001b[?25h"]
[49.889082, "o", "\u001b[?25l\u001b[?25h"]
[49.889163, "o", "\u001b[?25l\u001b[?25h"]
[49.892804, "o", "\u001b[?25l\u001b[?25h"]
[50.279876, "o", "\u001b[?25l\u001b[?25h"]
[50.41118, "o", "\u001b[m\u001b[11;72H\u001b[38;5;17m\u001b[48;5;190m25\u001b[m\u001b[5C\u001b[1m\u001b[38;5;17m\u001b[48;5;190m2/\u001b[2;7H"]
[50.608955, "o", "\u001b[?25l\u001b[?25h"]
[50.761774, "o", "\u001b[?25l\u001b[?25h"]
[50.761829, "o", "\u001b[?25l\u001b[?25h"]
[50.763912, "o", "\u001b[?25l\u001b[?25h"]
[50.788322, "o", "\u001b[m\u001b[11;72H\u001b[38;5;17m\u001b[48;5;190m37\u001b[m\u001b[5C\u001b[1m\u001b[38;5;17m\u001b[48;5;190m3/\u001b[3;7H"]
[50.984665, "o", "\u001b[?25l\u001b[?25h"]
[51.138608, "o", "\u001b[?25l\u001b[?25h"]
[51.138752, "o", "\u001b[?25l\u001b[?25h"]
[51.140786, "o", "\u001b[?25l\u001b[?25h"]
[51.292858, "o", "\u001b[?25l\u001b[?25h"]
[51.298618, "o", "\u001b[?25l\u001b[?25h"]
[52.235605, "o", "\u001b[?25l\u001b[m\u001b[3;7H\u001b[K\u001b[4;21H\u001b[38;5;130m{\u001b[ma \u001b[38;5;130m+\u001b[m b\u001b[38;5;130m}\u001b[m\u001b[91m;\u001b[5;20H*\u001b[7C;\u001b[m\u001b[6;7H}\u001b[11;9H\u001b[38;5;255m\u001b[48;5;53m test.cpp[+]                                \u001b]2;test.cpp + (~) - VIM\u0007"]
[52.237706, "o", "\u001b[3;7H\u001b[?25h"]
[52.407315, "o", "\u001b[?25l\u001b[?25h"]
[52.576431, "o", "\u001b[?25l\u001b[?25h"]
[52.621529, "o", "\u001b[?25l\u001b[m\u001b[22;1H\u001b[1m-- INSERT --\u001b[m\u001b[11;1H\u001b[38;5;17m\u001b[48;5;45m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45mINSERT\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\b\u001b[38;5;17m\u001b[48;5;45m \u001b[m\u001b[44C\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m utf-8[unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 37%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:3\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;45m/8☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[m\u001b[11;83H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m℅\u001b[11;84H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[11;86H\u001b[38;5;17m\u001b[48;5;45m \u001b[3;7H\u001b[?25h"]
[52.628358, "o", "\u001b[?25l\u001b[?25h"]
[52.902705, "o", "\u001b[?25l\u001b[?25h"]
[52.910488, "o", "\u001b[?25l\u001b[?25h"]
[52.913687, "o", "\u001b[?25l\u001b[?25h"]
[52.933976, "o", "\u001b[?25l\u001b[?25h"]
[53.086906, "o", "\u001b[?25l\u001b[?25h"]
[53.429352, "o", "\u001b[?25l\u001b[m\r\n\u001b[97m\u001b[101mE>\u001b[19Ca\u001b[3Cb\r\nE>\u001b[8Creturn\r\nE>\u001b[4C}\r\n\r\nE>\u001b[30Cf\u001b[m\u001b[11;44H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m utf-8[unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 37%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:3/8☰℅\u001b[11;75H:1 :\u001b[m\b\b\u001b[38;5;17m\u001b[48;5;45m \u001b[m\u001b[38;5;232m\u001b[48;5;160m E:5(L4) \u001b[m\u001b[14;1H\u001b[94m~                                                                                     \u001b[3;7H\u001b[?25h"]
[54.009774, "o", "\u001b[?25l\u001b[m#\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;8H\u001b[?25h"]
[54.114249, "o", "\u001b[?25l\u001b[mi\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;9H\u001b[?25h"]
[54.215746, "o", "\u001b[?25l\u001b[mn\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;10H\u001b[?25h"]
[54.318825, "o", "\u001b[?25l\u001b[mc\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;11H\u001b[?25h"]
[54.422615, "o", "\u001b[?25l\u001b[ml\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;12H\u001b[?25h"]
[54.527856, "o", "\u001b[?25l\u001b[mu\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;13H\u001b[?25h"]
[54.625849, "o", "\u001b[?25l\u001b[md\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;14H\u001b[?25h"]
[54.728993, "o", "\u001b[?25l\u001b[me\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;15H\u001b[?25h"]
[54.828108, "o", "\u001b[?25l\u001b[m\u001b[11;43H\u001b[97m\u001b[48;5;17m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;27m utf-8[unix] \u001b[m\u001b[38;5;17m\u001b[48;5;45m 37%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m ㏑:33\b/8☰☰\b℅\u001b[11;74H:10\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;16H\u001b[?25h"]
[54.932052, "o", "\u001b[?25l\u001b[m\u001b[3;7H\u001b[38;5;81m#include \u001b[m\u001b[95m\"\u001b[4;7H    int result{\u001b[1C + \u001b[1C};\u001b[5;7H    \u001b[6C 3 * result;\u001b[8;7Hint main() { std::cout << \u001b[1C(3, 5) << \u001b[m\u001b[1C\\n\u001b[1C\u001b[95m; }\u001b[m\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;17H\u001b[?25h"]
[55.033896, "o", "\u001b[?25l\u001b[m\u001b[95mi\u001b[m\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m2\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;18H\u001b[?25h"]
[55.137743, "o", "\u001b[?25l\u001b[m\u001b[95mn\u001b[m\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m3\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;19H\u001b[?25h"]
[55.238555, "o", "\u001b[?25l\u001b[m\u001b[95mc\u001b[m\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m4\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;20H\u001b[?25h"]
[55.340871, "o", "\u001b[?25l\u001b[m\u001b[95ml\u001b[m\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m5\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;21H\u001b[?25h"]
[55.444113, "o", "\u001b[?25l\u001b[m\u001b[95mu\u001b[m\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m6\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;22H\u001b[?25h"]
[55.546668, "o", "\u001b[?25l\u001b[m\u001b[95md\u001b[m\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m7\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;23H\u001b[?25h"]
[55.64782, "o", "\u001b[?25l\u001b[m\u001b[95me\u001b[m\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m8\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;24H\u001b[?25h"]
[55.757884, "o", "\u001b[?25l\u001b[m\u001b[95m.\u001b[m\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m9\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;25H\u001b[?25h"]
[55.849345, "o", "\u001b[?25l\u001b[m\u001b[95mh\u001b[m\u001b[11;75H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m20\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;26H\u001b[?25h"]
[55.963669, "o", "\u001b[?25l\u001b[m\u001b[95m\"\u001b[m\u001b[4;7H    \u001b[38;5;121mint\u001b[m result\u001b[38;5;130m{\u001b[m\u001b[1C \u001b[38;5;130m+\u001b[m \u001b[1C\u001b[38;5;130m}\u001b[m\u001b[91m;\u001b[m\u001b[5;7H    \u001b[6C \u001b[1C \u001b[91m*\u001b[m result\u001b[91m;\u001b[m\u001b[8;7H\u001b[38;5;121mint\u001b[m main\u001b[38;5;130m()\u001b[m \u001b[38;5;130m{\u001b[m std\u001b[38;5;130m::\u001b[mcout \u001b[38;5;130m<<\u001b[m \u001b[1C\u001b[34m(\u001b[1C,\u001b[m \u001b[1C\u001b[34m)\u001b[m \u001b[38;5;130m<<\u001b[m \u001b[1C\u001b[38;5;224m\\n\u001b[m\u001b[1C\u001b[38;5;130m;\u001b[m \u001b[38;5;130m}\u001b[m\u001b[11;76H\u001b[1m\u001b[38;5;17m\u001b[48;5;45m1\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[3;27H\u001b[?25h"]
[56.163307, "o", "\u001b[?25l\u001b[?25h"]
[56.222613, "o", "\u001b[?25l\u001b[?25h"]
[56.235863, "o", "\u001b[?25l\u001b[?25h"]
[56.260818, "o", "\u001b[?25l\u001b[?25h"]
[56.261746, "o", "\u001b[?25l\u001b[?25h"]
[56.273703, "o", "\u001b[?25l\u001b[?25h"]
[56.590671, "o", "\u001b[?25l\u001b[?25h"]
[56.599868, "o", "\u001b[?25l\u001b[?25h"]
[56.602914, "o", "\u001b[?25l\u001b[?25h"]
[57.118839, "o", "\u001b[?25l\u001b[m\u001b[8;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[30Cf\u001b[11;81H\u001b[38;5;232m\u001b[48;5;160m4\u001b[3;27H\u001b[?25h"]
[61.121132, "o", "\u001b[m\u001b[22;1H\u001b[K\u001b[3;26H"]
[61.131756, "o", "\u001b[?25l"]
[61.175765, "o", "\u001b[11;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[m\b\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[34C\u001b[38;5;85m\u001b[48;5;234m cpp \u001b[m\u001b[38;5;255m\u001b[48;5;238m utf-8[unix] \u001b[m\u001b[38;5;17m\u001b[48;5;190m 37%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:3\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/8☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;45m℅\u001b[m\u001b[11;73H\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[11;74H:20\u001b[m\u001b[38;5;17m\u001b[48;5;45m \u001b[m\b\u001b[38;5;17m\u001b[48;5;190m \u001b[3;26H\u001b[?25h\u001b[?25l\u001b[22;1H\u001b[m:\u001b[11;1H\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40mCOMMAND\u001b[m\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[38;5;85m\u001b[48;5;234m test.cpp[+]                     \u001b[m\u001b[18C\u001b[38;5;17m\u001b[48;5;40m 37%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40m ㏑:3\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;40m/8☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[m\u001b[11;73H\u001b[1m\u001b[38;5;17m\u001b[48;5;40m℅\u001b[11;74H:20\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\b\u001b[38;5;17m\u001b[48;5;40m \u001b[22;2H\u001b[?25h"]
[61.234747, "o", "\u001b[mw"]
[61.332178, "o", "\u001b[?25l\u001b[?25h"]
[61.336654, "o", "q"]
[61.461116, "o", "\r"]
[61.461873, "o", "\u001b[?25l"]
[61.463029, "o", "\u001b[>4;m"]
[61.620507, "o", "\u001b[>4;2m\u001b]2;test.cpp + (~) - VIM\u0007"]
[61.620921, "o", "\"test.cpp\""]
[61.62608, "o", " 8L, 128B written"]
[61.629145, "o", "\u001b[?2004l\u001b[>4;m"]
[62.130717, "o", "\u001b[>4;m\u001b[>4;2m\u001b[?2004h\u001b[>4;2m"]
[62.130964, "o", "\u001b]2;test.cpp + (~) - VIM\u0007"]
[62.169741, "o", "\u001b[1;7H\u001b[38;5;121mint\u001b[m f\u001b[38;5;130m(\u001b[m\u001b[38;5;121mint\u001b[m a\u001b[38;5;130m,\u001b[m \u001b[38;5;121mint\u001b[m b\u001b[38;5;130m)\u001b[m \u001b[38;5;130m{\u001b[m\r\n\u001b[97m\u001b[101mE>\u001b[m\r\n\u001b[94m~                                                                                     \u001b[4;1H~                                                                                     \u001b[5;1H~                                                                                     \u001b[6;1H~                                                                                     \u001b[7;1H~                                                                                     \u001b[8;1H~                                                                                     \u001b[11;1H~                                                                                     \u001b[12;1H~                                                                                     \u001b[13;1H~                                                                                     \u001b[m\u001b[21;1H\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190mNORMAL\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[38;5;85m\u001b[48;5;234m include.h                              cpp \u001b[m\u001b[38;5;255m\u001b[48;5;238m [unix] \u001b[m\u001b[38;5;17m\u001b[48;5;190m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m ㏑:2/2☰℅\u001b[21;75H:1\u001b[m\u001b[38;5;239m\u001b[48;5;234m \u001b[m\b\u001b[38;5;17m\u001b[48;5;190m \u001b[m\u001b[38;5;232m\u001b[48;5;160m E:1(L3) \u001b]2;include.h (~) - VIM\u0007"]
[62.172209, "o", "\u001b[2;7H\u001b[?25h\u001b[?4m"]
[62.174484, "o", "\u001b[?25l\u001b[?25h"]
[62.175474, "o", "\u001b[?25l\u001b[m\u001b[79C  \u001b[3;1H\u001b[96m\u001b[48;5;242m  \u001b[m\u001b[93m    \u001b[m \u001b[97m\u001b[101mExpected '}'\u001b[m\u001b[3;20H\u001b[K\u001b[2;7H\u001b[?25h"]
[62.187561, "o", "\u001b[?25l\u001b[?25h\u001b[?25l\u001b[?25h"]
[62.187904, "o", "\u001b[?25l\u001b[?25h"]
[62.198353, "o", "\u001b[?25l\u001b[?25h"]
[62.201625, "o", "\u001b[?25l\u001b[?25h"]
[62.328227, "o", "\u001b[?25l\u001b[?25h"]
[62.3359, "o", "\u001b[?25l\u001b[?25h"]
[62.338135, "o", "\u001b[?25l\u001b[?25h"]
[62.348345, "o", "\u001b[?25l\u001b[?25h"]
[62.501136, "o", "\u001b[?25l\u001b[?25h"]
[62.503742, "o", "\u001b[?25l\u001b[?25h"]
[62.54421, "o", "\u001b[?25l\u001b[?25h"]
[62.553235, "o", "\u001b[?25l\u001b[?25h"]
[62.556427, "o", "\u001b[?25l\u001b[?25h"]
[62.652, "o", "\u001b[?25l\u001b[?25h"]
[62.654468, "o", "\u001b[?25l\u001b[?25h"]
[63.06052, "o", "\u001b[?25l\u001b[79C  \u001b[3;1H\u001b[96m\u001b[48;5;242m \u001b[2;7H\u001b[?25h"]
[63.53726, "o", "\u001b[?25l\u001b[m\u001b[22;1H\u001b[K\u001b[22;1H:\u001b[21;1H\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40mCOMMAND\u001b[m\u001b[38;5;17m\u001b[48;5;40m \u001b[m\u001b[38;5;85m\u001b[48;5;234m include.h\u001b[m\u001b[41C\u001b[38;5;17m\u001b[48;5;40m 100%\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;40m ㏑:2\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m/\u001b[m\b\u001b[1m\u001b[38;5;17m\u001b[48;5;40m/2☰\u001b[m\u001b[1m\u001b[38;5;17m\u001b[48;5;190m℅\u001b[m\u001b[21;74H\u001b[1m\u001b[38;5;17m\u001b[48;5;40m℅\u001b[21;75H:1\u001b[m\u001b[38;5;17m\u001b[48;5;190m \u001b[m\b\u001b[38;5;17m\u001b[48;5;40m \r\n\u001b[m:\u001b[?25h"]
[63.623142, "o", "q"]
[63.751397, "o", "\r"]
[63.753238, "o", "\u001b[?25l\u001b[?2004l\u001b[>4;m\u001b]2;~ : asciinema\u0007\u001b[23;2t\u001b[23;1t\u001b[22;2t\u001b[22;1t\u001b[23;2t\u001b[23;1t\u001b[22;1H\u001b[K\u001b[22;1H\u001b[?1004l\u001b[?2004l\u001b[?1l\u001b>\u001b[?1049l\u001b[23;0;0t\u001b[?25h\u001b[>4;m"]
[63.757965, "o", "\u001b]0;tomasi@maurizio-tombook:~\u0007"]
[63.758048, "o", "\u001b[?2004h\u001b[01;32m[tomasi@maurizio-tombook\u001b[01;37m ~\u001b[01;32m]$\u001b[00m "]
[65.80892, "o", "g"]
[65.91516, "o", "+"]
[66.022301, "o", "+"]
[66.129228, "o", " "]
[66.234337, "o", "-"]
[66.339131, "o", "o"]
[66.441852, "o", " "]
[66.543834, "o", "t"]
[66.645282, "o", "e"]
[66.746937, "o", "s"]
[66.847537, "o", "t"]
[66.950071, "o", " "]
[67.054829, "o", "-"]
[67.157277, "o", "g"]
[67.25869, "o", "3"]
[67.359829, "o", " "]
[67.464019, "o", "-"]
[67.569719, "o", "W"]
[67.673314, "o", "a"]
[67.77543, "o", "l"]
[67.875983, "o", "l"]
[67.97928, "o", " "]
[68.083272, "o", "-"]
[68.187774, "o", "-"]
[68.293011, "o", "p"]
[68.394513, "o", "e"]
[68.496773, "o", "d"]
[68.598862, "o", "a"]
[68.700342, "o", "n"]
[68.802824, "o", "t"]
[68.903831, "o", "i"]
[69.005504, "o", "c"]
[69.107438, "o", " "]
[69.211795, "o", "-"]
[69.316937, "o", "s"]
[69.419319, "o", "t"]
[69.521641, "o", "d"]
[69.626465, "o", "="]
[69.730676, "o", "c"]
[69.835547, "o", "+"]
[69.942323, "o", "+"]
[70.050507, "o", "2"]
[70.152121, "o", "3"]
[70.253305, "o", " "]
[70.354961, "o", "t"]
[70.456491, "o", "e"]
[70.558781, "o", "s"]
[70.660715, "o", "t"]
[70.763294, "o", "."]
[70.863924, "o", "c"]
[70.966514, "o", "p"]
[71.067695, "o", "p"]
[71.199938, "o", "\r\n\u001b[?2004l\r"]
[72.574992, "o", "\u001b]0;tomasi@maurizio-tombook:~\u0007\u001b[?2004h\u001b[01;32m[tomasi@maurizio-tombook\u001b[01;37m ~\u001b[01;32m]$\u001b[00m "]
[74.254714, "o", "."]
[74.35697, "o", "/"]
[74.461793, "o", "t"]
[74.563845, "o", "e"]
[74.664662, "o", "s"]
[74.767431, "o", "t"]
[74.891607, "o", "\r\n\u001b[?2004l\r"]
[74.909763, "o", "24\r\n"]
[74.911077, "o", "\u001b]0;tomasi@maurizio-tombook:~\u0007"]
[74.911136, "o", "\u001b[?2004h\u001b[01;32m[tomasi@maurizio-tombook\u001b[01;37m ~\u001b[01;32m]$\u001b[00m "]
[77.946891, "o", "c"]
[78.04909, "o", "p"]
[78.150746, "o", "p"]
[78.253382, "o", " "]
[78.355521, "o", "t"]
[78.457664, "o", "e"]
[78.560269, "o", "s"]
[78.662351, "o", "t"]
[78.764243, "o", "."]
[78.866093, "o", "c"]
[78.968171, "o", "p"]
[79.068413, "o", "p"]
[81.210597, "o", "\r\n\u001b[?2004l\r"]
[81.253141, "o", "# 0 \"test.cpp\"\r\n"]
[81.255868, "o", "# 0 \"<built-in>\"\r\n"]
[81.256207, "o", "# 0 \"<command-line>\"\r\n"]
[81.256312, "o", "# 1 \"/usr/include/stdc-predef.h\" 1 3 4\r\n# 0 \"<command-line>\" 2\r\n# 1 \"test.cpp\"\r\n"]
[81.256364, "o", "# 1 \"/usr/include/c++/14.2.1/iostream\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/iostream\" 3\r\n       \r\n# 37 \"/usr/include/c++/14.2.1/iostream\" 3\r\n"]
[81.256414, "o", "\r\n# 1 \"/usr/include/c++/14.2.1/bits/requires_hosted.h\" 1 3\r\n"]
[81.256458, "o", "# 31 \"/usr/include/c++/14.2.1/bits/requires_hosted.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\n"]
[81.25663, "o", "# 308 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\n\r\n# 308 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\nnamespace std\r\n{\r\n  typedef long unsigned int size_t;\r\n  typedef long int ptrdiff_t;\r\n\r\n\r\n  typedef decltype(nullptr) nullptr_t;\r\n\r\n\r\n#pragma GCC visibility push(default)\r\n\r\n\r\n  extern \"C++\" __attribute__ ((__noreturn__, __always_inline__))\r\n  inline void __terminate() noexcept\r\n  {\r\n    void terminate() noexcept __attribute__ ((__noreturn__,__cold__));\r\n    terminate();\r\n  }\r\n#pragma GCC visibility pop\r\n}\r\n# 341 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\nnamespace std\r\n{\r\n  inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\r\n}\r\nnamespace __gnu_cxx\r\n{"]
[81.256714, "o", "\r\n  inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\r\n}\r\n# 534 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\nnamespace std\r\n{\r\n#pragma GCC visibility push(default)\r\n\r\n\r\n\r\n\r\n"]
[81.256797, "o", "  __attribute__((__always_inline__))\r\n  constexpr inline bool\r\n  __is_constant_evaluated() noexcept\r\n  {\r\n\r\n\r\n\r\n\r\n\r\n    return __builtin_is_constant_evaluated();\r\n\r\n\r\n\r\n  }\r\n#pragma GCC visibility pop\r\n}\r\n# 573 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\nnamespace std\r\n{\r\n#pragma GCC visibility push(default)\r\n\r\n  extern \"C++\" __attribute__ ((__noreturn__))\r\n  void\r\n  __glibcxx_assert_fail\r\n    (const char* __file, int __line, const char* __function,\r\n     const char* __condition)\r\n  noexcept;\r\n"]
[81.256879, "o", "#pragma GCC visibility pop\r\n}\r\n# 601 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\nnamespace std\r\n{\r\n  __attribute__((__always_inline__,__visibility__(\"default\")))\r\n  inline void\r\n  __glibcxx_assert_fail()\r\n  { }\r\n"]
[81.256965, "o", "}\r\n# 680 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/os_defines.h\" 1 3\r\n"]
[81.257043, "o", "# 39 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/os_defines.h\" 3\r\n# 1 \"/usr/include/features.h\" 1 3 4\r\n"]
[81.257271, "o", "# 402 \"/usr/include/features.h\" 3 4\r\n# 1 \"/usr/include/features-time64.h\" 1 3 4\r\n"]
[81.257369, "o", "# 20 \"/usr/include/features-time64.h\" 3 4\r\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\r\n# 21 \"/usr/include/features-time64.h\" 2 3 4\r\n"]
[81.257474, "o", "# 1 \"/usr/include/bits/timesize.h\" 1 3 4\r\n# 19 \"/usr/include/bits/timesize.h\" 3 4\r\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\r\n"]
[81.25758, "o", "# 20 \"/usr/include/bits/timesize.h\" 2 3 4\r\n# 22 \"/usr/include/features-time64.h\" 2 3 4\r\n# 403 \"/usr/include/features.h\" 2 3 4\r\n"]
[81.257874, "o", "# 511 \"/usr/include/features.h\" 3 4\r\n# 1 \"/usr/include/sys/cdefs.h\" 1 3 4\r\n"]
[81.258371, "o", "# 730 \"/usr/include/sys/cdefs.h\" 3 4\r\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\r\n# 731 \"/usr/include/sys/cdefs.h\" 2 3 4\r\n"]
[81.25848, "o", "# 1 \"/usr/include/bits/long-double.h\" 1 3 4\r\n# 732 \"/usr/include/sys/cdefs.h\" 2 3 4\r\n"]
[81.258596, "o", "# 512 \"/usr/include/features.h\" 2 3 4\r\n"]
[81.258698, "o", "# 535 \"/usr/include/features.h\" 3 4\r\n# 1 \"/usr/include/gnu/stubs.h\" 1 3 4\r\n"]
[81.258786, "o", "# 10 \"/usr/include/gnu/stubs.h\" 3 4\r\n# 1 \"/usr/include/gnu/stubs-64.h\" 1 3 4\r\n# 11 \"/usr/include/gnu/stubs.h\" 2 3 4\r\n# 536 \"/usr/include/features.h\" 2 3 4\r\n"]
[81.25884, "o", "# 40 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/os_defines.h\" 2 3\r\n# 681 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 2 3\r\n"]
[81.258892, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/cpu_defines.h\" 1 3\r\n# 684 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 2 3\r\n"]
[81.258967, "o", "# 825 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\nnamespace __gnu_cxx\r\n{\r\n  typedef __decltype(0.0bf16) __bfloat16_t;\r\n"]
[81.25914, "o", "}\r\n# 887 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/pstl/pstl_config.h\" 1 3\r\n"]
[81.259267, "o", "# 888 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++config.h\" 2 3\r\n"]
[81.259464, "o", "# 32 \"/usr/include/c++/14.2.1/bits/requires_hosted.h\" 2 3\r\n# 39 \"/usr/include/c++/14.2.1/iostream\" 2 3\r\n"]
[81.259491, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/ostream\" 1 3\r\n"]
[81.25952, "o", "# 36 \"/usr/include/c++/14.2.1/ostream\" 3\r\n       \r\n# 37 \"/usr/include/c++/14.2.1/ostream\" 3\r\n"]
[81.259551, "o", "\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/ios\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/ios\" 3\r\n       \r\n# 37 \"/usr/include/c++/14.2.1/ios\" 3\r\n"]
[81.259594, "o", "\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/iosfwd\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/iosfwd\" 3\r\n       \r\n# 37 \"/usr/include/c++/14.2.1/iosfwd\" 3\r\n"]
[81.259624, "o", "\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/stringfwd.h\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/stringfwd.h\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/stringfwd.h\" 3\r\n"]
[81.259657, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/memoryfwd.h\" 1 3\r\n# 46 \"/usr/include/c++/14.2.1/bits/memoryfwd.h\" 3\r\n       \r\n# 47 \"/usr/include/c++/14.2.1/bits/memoryfwd.h\" 3\r\n\r\n\r\n\r\n"]
[81.259693, "o", "namespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 64 \"/usr/include/c++/14.2.1/bits/memoryfwd.h\" 3\r\n  template<typename>\r\n    class allocator;\r\n\r\n  template<>\r\n    class allocator<void>;\r\n\r\n\r\n\r\n  template<typename, typename>\r\n    struct uses_allocator;\r\n\r\n"]
[81.259893, "o", "  template<typename>\r\n    struct allocator_traits;\r\n\r\n\r\n\r\n\r\n\r\n}\r\n# 41 \"/usr/include/c++/14.2.1/bits/stringfwd.h\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<class _CharT>\r\n    struct char_traits;\r\n\r\n  template<> struct char_traits<char>;\r\n\r\n  template<> struct char_traits<wchar_t>;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<> struct char_traits<char16_t>;\r\n  template<> struct char_traits<char32_t>;\r\n\r\n\r\nnamespace __cxx11 {\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT>,\r\n           typename _Alloc = allocator<_CharT> >\r\n    class basic_string;\r\n\r\n}\r\n\r\n\r\n  typedef basic_string<char> string;\r\n\r\n\r\n  typedef basic_string<wchar_t> wstring;\r\n# 89 \"/usr/include/c++/14.2.1/bits/stringfwd.h\" 3\r\n  typedef basic_string<char16_t> u16string;\r\n\r\n\r\n  typedef basic_string<char32_t> u32string;\r\n\r\n\r\n\r\n\r\n\r\n}\r\n# 42 \"/usr/include/c++/14.2.1/iosfwd\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/postypes.h\" 1 3\r\n# 38 \"/usr/include/c++/14.2.1/bits/postypes.h\" 3\r\n       \r\n# 39 \"/usr/include/c++/14.2.1/bits/postypes.h\" 3\r\n\r\n# 1 \"/usr/include/c++/14.2.1/cwchar\" 1 3\r\n"]
[81.259954, "o", "# 39 \"/usr/include/c++/14.2.1/cwchar\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/cwchar\" 3\r\n"]
[81.260006, "o", "\r\n\r\n\r\n\r\n# 1 \"/usr/include/wchar.h\" 1 3 4\r\n"]
[81.260103, "o", "# 27 \"/usr/include/wchar.h\" 3 4\r\n# 1 \"/usr/include/bits/libc-header-start.h\" 1 3 4\r\n"]
[81.260153, "o", "# 28 \"/usr/include/wchar.h\" 2 3 4\r\n"]
[81.260243, "o", "\r\n\r\n# 1 \"/usr/include/bits/floatn.h\" 1 3 4\r\n"]
[81.26042, "o", "# 119 \"/usr/include/bits/floatn.h\" 3 4\r\n# 1 \"/usr/include/bits/floatn-common.h\" 1 3 4\r\n# 24 \"/usr/include/bits/floatn-common.h\" 3 4\r\n# 1 \"/usr/include/bits/long-double.h\" 1 3 4\r\n"]
[81.260476, "o", "# 25 \"/usr/include/bits/floatn-common.h\" 2 3 4\r\n"]
[81.260648, "o", "# 120 \"/usr/include/bits/floatn.h\" 2 3 4\r\n# 31 \"/usr/include/wchar.h\" 2 3 4\r\n"]
[81.260718, "o", "\r\n\r\n\r\n\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 1 3 4\r\n"]
[81.260802, "o", "# 214 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 3 4\r\n"]
[81.260899, "o", "typedef long unsigned int size_t;\r\n# 36 \"/usr/include/wchar.h\" 2 3 4\r\n"]
[81.260968, "o", "\r\n\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stdarg.h\" 1 3 4\r\n# 40 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stdarg.h\" 3 4\r\n"]
[81.261021, "o", "typedef __builtin_va_list __gnuc_va_list;\r\n# 39 \"/usr/include/wchar.h\" 2 3 4\r\n\r\n\r\n\r\n\r\n"]
[81.261142, "o", "typedef __gnuc_va_list va_list;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/bits/wchar.h\" 1 3 4\r\n"]
[81.261193, "o", "# 52 \"/usr/include/wchar.h\" 2 3 4\r\n"]
[81.261255, "o", "# 1 \"/usr/include/bits/types/wint_t.h\" 1 3 4\r\n# 20 \"/usr/include/bits/types/wint_t.h\" 3 4\r\ntypedef unsigned int wint_t;\r\n# 53 \"/usr/include/wchar.h\" 2 3 4\r\n"]
[81.261352, "o", "# 1 \"/usr/include/bits/types/mbstate_t.h\" 1 3 4\r\n"]
[81.261449, "o", "\r\n\r\n\r\n# 1 \"/usr/include/bits/types/__mbstate_t.h\" 1 3 4\r\n# 13 \"/usr/include/bits/types/__mbstate_t.h\" 3 4\r\ntypedef struct\r\n{\r\n  int __count;\r\n"]
[81.26151, "o", "  union\r\n  {\r\n    unsigned int __wch;\r\n    char __wchb[4];\r\n  } __value;\r\n} __mbstate_t;\r\n# 5 \"/usr/include/bits/types/mbstate_t.h\" 2 3 4\r\n\r\ntypedef __mbstate_t mbstate_t;\r\n# 54 \"/usr/include/wchar.h\" 2 3 4\r\n"]
[81.261601, "o", "# 1 \"/usr/include/bits/types/__FILE.h\" 1 3 4\r\n\r\n\r\n\r\nstruct _IO_FILE;\r\n"]
[81.261636, "o", "typedef struct _IO_FILE __FILE;\r\n# 55 \"/usr/include/wchar.h\" 2 3 4\r\n"]
[81.261749, "o", "\r\n\r\n# 1 \"/usr/include/bits/types/FILE.h\" 1 3 4\r\n\r\n\r\n\r\nstruct _IO_FILE;\r\n\r\n\r\ntypedef struct _IO_FILE FILE;\r\n# 58 \"/usr/include/wchar.h\" 2 3 4\r\n"]
[81.261878, "o", "\r\n\r\n# 1 \"/usr/include/bits/types/locale_t.h\" 1 3 4\r\n"]
[81.262007, "o", "# 22 \"/usr/include/bits/types/locale_t.h\" 3 4\r\n# 1 \"/usr/include/bits/types/__locale_t.h\" 1 3 4\r\n# 27 \"/usr/include/bits/types/__locale_t.h\" 3 4\r\nstruct __locale_struct\r\n{\r\n\r\n"]
[81.262065, "o", "  struct __locale_data *__locales[13];\r\n\r\n\r\n  const unsigned short int *__ctype_b;\r\n  const int *__ctype_tolower;\r\n  const int *__ctype_toupper;\r\n\r\n\r\n  const char *__names[13];\r\n};\r\n\r\ntypedef struct __locale_struct *__locale_t;\r\n# 23 \"/usr/include/bits/types/locale_t.h\" 2 3 4\r\n\r\ntypedef __locale_t locale_t;\r\n# 61 \"/usr/include/wchar.h\" 2 3 4\r\n"]
[81.262141, "o", "# 90 \"/usr/include/wchar.h\" 3 4\r\nextern \"C\" {\r\n\r\n\r\n\r\nstruct tm;\r\n\r\n\r\n\r\nextern wchar_t *wcscpy (wchar_t *__restrict __dest,\r\n   const wchar_t *__restrict __src)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern wchar_t *wcsncpy (wchar_t *__restrict __dest,\r\n"]
[81.262206, "o", "    const wchar_t *__restrict __src, size_t __n)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n\r\nextern size_t wcslcpy (wchar_t *__restrict __dest,\r\n         const wchar_t *__restrict __src, size_t __n)\r\n  noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 3)));\r\n\r\n\r\n\r\n"]
[81.262263, "o", "extern size_t wcslcat (wchar_t *__restrict __dest,\r\n         const wchar_t *__restrict __src, size_t __n)\r\n  noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__read_write__, 1, 3)));\r\n\r\n\r\n\r\nextern wchar_t *wcscat (wchar_t *__restrict __dest,\r\n   const wchar_t *__restrict __src)\r\n"]
[81.26233, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\nextern wchar_t *wcsncat (wchar_t *__restrict __dest,\r\n    const wchar_t *__restrict __src, size_t __n)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)\r\n     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\nextern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)\r\n"]
[81.262357, "o", "     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n\r\nextern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) noexcept (true);\r\n\r\n\r\n"]
[81.262456, "o", "extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,\r\n   size_t __n) noexcept (true);\r\n\r\n\r\n\r\nextern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,\r\n    locale_t __loc) noexcept (true);\r\n\r\nextern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,\r\n     size_t __n, locale_t __loc) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) noexcept (true);\r\n\r\n\r\n\r\nextern size_t wcsxfrm (wchar_t *__restrict __s1,\r\n         const wchar_t *__restrict __s2, size_t __n) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.262499, "o", "\r\n\r\nextern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,\r\n        locale_t __loc) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,\r\n    size_t __n, locale_t __loc) noexcept (true);\r\n\r\n\r\n"]
[81.262536, "o", "extern wchar_t *wcsdup (const wchar_t *__s) noexcept (true)\r\n  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));\r\n\r\n\r\n\r\n\r\n"]
[81.262573, "o", "extern \"C++\" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)\r\n     noexcept (true) __asm (\"wcschr\") __attribute__ ((__pure__));\r\nextern \"C++\" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)\r\n     noexcept (true) __asm (\"wcschr\") __attribute__ ((__pure__));\r\n"]
[81.262615, "o", "\r\n\r\n\r\n\r\n\r\n\r\nextern \"C++\" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)\r\n     noexcept (true) __asm (\"wcsrchr\") __attribute__ ((__pure__));\r\nextern \"C++\" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)\r\n"]
[81.262655, "o", "     noexcept (true) __asm (\"wcsrchr\") __attribute__ ((__pure__));\r\n# 206 \"/usr/include/wchar.h\" 3 4\r\nextern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)\r\n     noexcept (true) __attribute__ ((__pure__));\r\n\r\n\r\n\r\n\r\n"]
[81.262695, "o", "extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)\r\n     noexcept (true) __attribute__ ((__pure__));\r\n\r\n\r\nextern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)\r\n     noexcept (true) __attribute__ ((__pure__));\r\n\r\n\r\n"]
[81.262733, "o", "extern \"C++\" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)\r\n     noexcept (true) __asm (\"wcspbrk\") __attribute__ ((__pure__));\r\nextern \"C++\" const wchar_t *wcspbrk (const wchar_t *__wcs,\r\n         const wchar_t *__accept)\r\n     noexcept (true) __asm (\"wcspbrk\") __attribute__ ((__pure__));\r\n"]
[81.262769, "o", "\r\n\r\n\r\n\r\n\r\n\r\nextern \"C++\" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)\r\n     noexcept (true) __asm (\"wcsstr\") __attribute__ ((__pure__));\r\nextern \"C++\" const wchar_t *wcsstr (const wchar_t *__haystack,\r\n"]
[81.262807, "o", "        const wchar_t *__needle)\r\n     noexcept (true) __asm (\"wcsstr\") __attribute__ ((__pure__));\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern wchar_t *wcstok (wchar_t *__restrict __s,\r\n"]
[81.262842, "o", "   const wchar_t *__restrict __delim,\r\n   wchar_t **__restrict __ptr) noexcept (true);\r\n\r\n\r\nextern size_t wcslen (const wchar_t *__s) noexcept (true) __attribute__ ((__pure__));\r\n\r\n\r\n\r\n\r\n"]
[81.262883, "o", "extern \"C++\" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)\r\n     noexcept (true) __asm (\"wcswcs\") __attribute__ ((__pure__));\r\nextern \"C++\" const wchar_t *wcswcs (const wchar_t *__haystack,\r\n        const wchar_t *__needle)\r\n"]
[81.262927, "o", "     noexcept (true) __asm (\"wcswcs\") __attribute__ ((__pure__));\r\n# 265 \"/usr/include/wchar.h\" 3 4\r\nextern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)\r\n     noexcept (true) __attribute__ ((__pure__));\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.262969, "o", "extern \"C++\" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)\r\n     noexcept (true) __asm (\"wmemchr\") __attribute__ ((__pure__));\r\nextern \"C++\" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,\r\n         size_t __n)\r\n     noexcept (true) __asm (\"wmemchr\") __attribute__ ((__pure__));\r\n\r\n\r\n\r\n"]
[81.263008, "o", "\r\n\r\n\r\nextern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)\r\n     noexcept (true) __attribute__ ((__pure__));\r\n\r\n\r\nextern wchar_t *wmemcpy (wchar_t *__restrict __s1,\r\n    const wchar_t *__restrict __s2, size_t __n) noexcept (true);\r\n\r\n\r\n"]
[81.263043, "o", "\r\nextern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)\r\n     noexcept (true);\r\n\r\n\r\nextern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) noexcept (true);\r\n\r\n\r\n\r\n"]
[81.263079, "o", "\r\nextern wchar_t *wmempcpy (wchar_t *__restrict __s1,\r\n     const wchar_t *__restrict __s2, size_t __n)\r\n     noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.263122, "o", "extern wint_t btowc (int __c) noexcept (true);\r\n\r\n\r\n\r\nextern int wctob (wint_t __c) noexcept (true);\r\n\r\n\r\n\r\nextern int mbsinit (const mbstate_t *__ps) noexcept (true) __attribute__ ((__pure__));\r\n\r\n\r\n\r\n"]
[81.263168, "o", "extern size_t mbrtowc (wchar_t *__restrict __pwc,\r\n         const char *__restrict __s, size_t __n,\r\n         mbstate_t *__restrict __p) noexcept (true);\r\n\r\n\r\nextern size_t wcrtomb (char *__restrict __s, wchar_t __wc,\r\n         mbstate_t *__restrict __ps) noexcept (true);\r\n\r\n\r\n"]
[81.263214, "o", "extern size_t __mbrlen (const char *__restrict __s, size_t __n,\r\n   mbstate_t *__restrict __ps) noexcept (true);\r\nextern size_t mbrlen (const char *__restrict __s, size_t __n,\r\n"]
[81.263256, "o", "        mbstate_t *__restrict __ps) noexcept (true);\r\n# 362 \"/usr/include/wchar.h\" 3 4\r\nextern size_t mbsrtowcs (wchar_t *__restrict __dst,\r\n    const char **__restrict __src, size_t __len,\r\n    mbstate_t *__restrict __ps) noexcept (true);\r\n\r\n\r\n\r\n"]
[81.263295, "o", "extern size_t wcsrtombs (char *__restrict __dst,\r\n    const wchar_t **__restrict __src, size_t __len,\r\n    mbstate_t *__restrict __ps) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\nextern size_t mbsnrtowcs (wchar_t *__restrict __dst,\r\n     const char **__restrict __src, size_t __nmc,\r\n"]
[81.263332, "o", "     size_t __len, mbstate_t *__restrict __ps) noexcept (true);\r\n\r\n\r\n\r\nextern size_t wcsnrtombs (char *__restrict __dst,\r\n     const wchar_t **__restrict __src,\r\n     size_t __nwc, size_t __len,\r\n     mbstate_t *__restrict __ps) noexcept (true);\r\n\r\n"]
[81.263368, "o", "\r\n\r\n\r\n\r\n\r\nextern int wcwidth (wchar_t __c) noexcept (true);\r\n\r\n\r\n\r\nextern int wcswidth (const wchar_t *__s, size_t __n) noexcept (true);\r\n"]
[81.263404, "o", "\r\n\r\n\r\n\r\n\r\nextern double wcstod (const wchar_t *__restrict __nptr,\r\n        wchar_t **__restrict __endptr) noexcept (true);\r\n\r\n\r\n\r\n"]
[81.263447, "o", "extern float wcstof (const wchar_t *__restrict __nptr,\r\n       wchar_t **__restrict __endptr) noexcept (true);\r\nextern long double wcstold (const wchar_t *__restrict __nptr,\r\n"]
[81.263492, "o", "       wchar_t **__restrict __endptr) noexcept (true);\r\n# 422 \"/usr/include/wchar.h\" 3 4\r\nextern _Float32 wcstof32 (const wchar_t *__restrict __nptr,\r\n     wchar_t **__restrict __endptr) noexcept (true);\r\n\r\n\r\n\r\nextern _Float64 wcstof64 (const wchar_t *__restrict __nptr,\r\n"]
[81.263538, "o", "     wchar_t **__restrict __endptr) noexcept (true);\r\n\r\n\r\n\r\nextern _Float128 wcstof128 (const wchar_t *__restrict __nptr,\r\n       wchar_t **__restrict __endptr) noexcept (true);\r\n\r\n\r\n\r\nextern _Float32x wcstof32x (const wchar_t *__restrict __nptr,\r\n       wchar_t **__restrict __endptr) noexcept (true);\r\n\r\n\r\n\r\n"]
[81.263576, "o", "extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,\r\n       wchar_t **__restrict __endptr) noexcept (true);\r\n# 455 \"/usr/include/wchar.h\" 3 4\r\nextern long int wcstol (const wchar_t *__restrict __nptr,\r\n   wchar_t **__restrict __endptr, int __base) noexcept (true);\r\n\r\n\r\n"]
[81.263612, "o", "\r\nextern unsigned long int wcstoul (const wchar_t *__restrict __nptr,\r\n      wchar_t **__restrict __endptr, int __base)\r\n     noexcept (true);\r\n\r\n\r\n\r\n\r\n__extension__\r\n"]
[81.263647, "o", "extern long long int wcstoll (const wchar_t *__restrict __nptr,\r\n         wchar_t **__restrict __endptr, int __base)\r\n     noexcept (true);\r\n\r\n\r\n\r\n__extension__\r\nextern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,\r\n"]
[81.263683, "o", "     wchar_t **__restrict __endptr,\r\n     int __base) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n__extension__\r\nextern long long int wcstoq (const wchar_t *__restrict __nptr,\r\n"]
[81.263722, "o", "        wchar_t **__restrict __endptr, int __base)\r\n     noexcept (true);\r\n\r\n\r\n\r\n__extension__\r\nextern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,\r\n           wchar_t **__restrict __endptr,\r\n"]
[81.263766, "o", "           int __base) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.263805, "o", "extern long int wcstol (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_wcstol\")\r\n\r\n                                   ;\r\n"]
[81.263843, "o", "extern unsigned long int wcstoul (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_wcstoul\")\r\n\r\n\r\n                                     ;\r\n__extension__\r\n"]
[81.263879, "o", "extern long long int wcstoll (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_wcstoll\")\r\n\r\n\r\n                                        ;\r\n__extension__\r\n"]
[81.263913, "o", "extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_wcstoull\")\r\n\r\n\r\n                                           ;\r\n\r\n__extension__\r\n"]
[81.263949, "o", "extern long long int wcstoq (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_wcstoll\")\r\n\r\n                                         ;\r\n__extension__\r\n"]
[81.263987, "o", "extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_wcstoull\")\r\n\r\n\r\n"]
[81.26403, "o", "                                           ;\r\n# 561 \"/usr/include/wchar.h\" 3 4\r\nextern long int wcstol_l (const wchar_t *__restrict __nptr,\r\n     wchar_t **__restrict __endptr, int __base,\r\n     locale_t __loc) noexcept (true);\r\n\r\n"]
[81.26407, "o", "extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,\r\n        wchar_t **__restrict __endptr,\r\n        int __base, locale_t __loc) noexcept (true);\r\n\r\n__extension__\r\nextern long long int wcstoll_l (const wchar_t *__restrict __nptr,\r\n    wchar_t **__restrict __endptr,\r\n    int __base, locale_t __loc) noexcept (true);\r\n\r\n__extension__\r\n"]
[81.264108, "o", "extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,\r\n       wchar_t **__restrict __endptr,\r\n       int __base, locale_t __loc)\r\n     noexcept (true);\r\n\r\n\r\n\r\n\r\n"]
[81.264143, "o", "\r\nextern long int wcstol_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ (\"\" \"__isoc23_wcstol_l\")\r\n\r\n\r\n"]
[81.264178, "o", "                      ;\r\nextern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ (\"\" \"__isoc23_wcstoul_l\")\r\n\r\n\r\n\r\n"]
[81.265435, "o", "                         ;\r\n__extension__\r\nextern long long int wcstoll_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ (\"\" \"__isoc23_wcstoll_l\")\r\n\r\n\r\n\r\n                            ;\r\n__extension__\r\nextern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ (\"\" \"__isoc23_wcstoull_l\")\r\n\r\n\r\n\r\n                               ;\r\n# 630 \"/usr/include/wchar.h\" 3 4\r\nextern double wcstod_l (const wchar_t *__restrict __nptr,\r\n   wchar_t **__restrict __endptr, locale_t __loc)\r\n     noexcept (true);\r\n\r\nextern float wcstof_l (const wchar_t *__restrict __nptr,\r\n         wchar_t **__restrict __endptr, locale_t __loc)\r\n     noexcept (true);\r\n\r\nextern long double wcstold_l (const wchar_t *__restrict __nptr,\r\n         wchar_t **__restrict __endptr,\r\n         locale_t __loc) noexcept (true);\r\n# 649 \"/usr/include/wchar.h\" 3 4\r\nextern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,\r\n       wchar_t **__restrict __endptr,\r\n       locale_t __loc) noexcept (true);\r\n\r\n\r\n\r\nextern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,\r\n       wchar_t **__restrict __endptr,\r\n       locale_t __loc) noexcept (true);\r\n\r\n\r\n\r\nextern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,\r\n         wchar_t **__restrict __endptr,\r\n         locale_t __loc) noexcept (true);\r\n\r\n\r\n\r\nextern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,\r\n         wchar_t **__restrict __endptr,\r\n         locale_t __loc) noexcept (true);\r\n\r\n\r\n\r\n"]
[81.265538, "o", "extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,\r\n         wchar_t **__restrict __endptr,\r\n         locale_t __loc) noexcept (true);\r\n# 689 \"/usr/include/wchar.h\" 3 4\r\nextern wchar_t *wcpcpy (wchar_t *__restrict __dest,\r\n   const wchar_t *__restrict __src) noexcept (true);\r\n\r\n\r\n\r\nextern wchar_t *wcpncpy (wchar_t *__restrict __dest,\r\n    const wchar_t *__restrict __src, size_t __n)\r\n     noexcept (true);\r\n# 718 \"/usr/include/wchar.h\" 3 4\r\nextern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) noexcept (true)\r\n  __attribute__ ((__malloc__)) ;\r\n\r\n\r\n\r\n\r\n\r\nextern int fwide (__FILE *__fp, int __mode) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int fwprintf (__FILE *__restrict __stream,\r\n       const wchar_t *__restrict __format, ...)\r\n                                                           ;\r\n\r\n\r\n\r\n\r\nextern int wprintf (const wchar_t *__restrict __format, ...)\r\n                                                           ;\r\n\r\nextern int swprintf (wchar_t *__restrict __s, size_t __n,\r\n       const wchar_t *__restrict __format, ...)\r\n     noexcept (true) ;\r\n\r\n\r\n\r\n\r\n\r\nextern int vfwprintf (__FILE *__restrict __s,\r\n        const wchar_t *__restrict __format,\r\n        __gnuc_va_list __arg)\r\n                                                           ;\r\n\r\n\r\n\r\n\r\nextern int vwprintf (const wchar_t *__restrict __format,\r\n       __gnuc_va_list __arg)\r\n                                                           ;\r\n\r\n\r\nextern int vswprintf (wchar_t *__restrict __s, size_t __n,\r\n        const wchar_t *__restrict __format,\r\n        __gnuc_va_list __arg)\r\n     noexcept (true) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int fwscanf (__FILE *__restrict __stream,\r\n      const wchar_t *__restrict __format, ...)\r\n                                                          ;\r\n\r\n\r\n\r\n\r\nextern int wscanf (const wchar_t *__restrict __format, ...)\r\n                                                          ;\r\n\r\nextern int swscanf (const wchar_t *__restrict __s,\r\n      const wchar_t *__restrict __format, ...)\r\n     noexcept (true) ;\r\n# 795 \"/usr/include/wchar.h\" 3 4\r\nextern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ (\"\" \"__isoc23_fwscanf\")\r\n\r\n\r\n                                                          ;\r\nextern int wscanf (const wchar_t *__restrict __format, ...) __asm__ (\"\" \"__isoc23_wscanf\")\r\n\r\n                                                          ;\r\nextern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) noexcept (true) __asm__ (\"\" \"__isoc23_swscanf\")\r\n\r\n\r\n                                                          ;\r\n# 851 \"/usr/include/wchar.h\" 3 4\r\nextern int vfwscanf (__FILE *__restrict __s,\r\n       const wchar_t *__restrict __format,\r\n       __gnuc_va_list __arg)\r\n                                                          ;\r\n\r\n\r\n\r\n\r\nextern int vwscanf (const wchar_t *__restrict __format,\r\n      __gnuc_va_list __arg)\r\n                                                          ;\r\n\r\nextern int vswscanf (const wchar_t *__restrict __s,\r\n       const wchar_t *__restrict __format,\r\n       __gnuc_va_list __arg)\r\n     noexcept (true) ;\r\n# 875 \"/usr/include/wchar.h\" 3 4\r\nextern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ (\"\" \"__isoc23_vfwscanf\")\r\n\r\n\r\n                                                          ;\r\nextern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ (\"\" \"__isoc23_vwscanf\")\r\n\r\n                                                          ;\r\nextern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ (\"\" \"__isoc23_vswscanf\")\r\n\r\n\r\n                                                          ;\r\n# 935 \"/usr/include/wchar.h\" 3 4\r\nextern wint_t fgetwc (__FILE *__stream);\r\nextern wint_t getwc (__FILE *__stream);\r\n\r\n\r\n\r\n\r\n\r\nextern wint_t getwchar (void);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern wint_t fputwc (wchar_t __wc, __FILE *__stream);\r\nextern wint_t putwc (wchar_t __wc, __FILE *__stream);\r\n\r\n\r\n\r\n\r\n\r\nextern wint_t putwchar (wchar_t __wc);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,\r\n   __FILE *__restrict __stream);\r\n\r\n\r\n\r\n\r\n\r\nextern int fputws (const wchar_t *__restrict __ws,\r\n     __FILE *__restrict __stream);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern wint_t ungetwc (wint_t __wc, __FILE *__stream);\r\n# 990 \"/usr/include/wchar.h\" 3 4\r\nextern wint_t getwc_unlocked (__FILE *__stream);\r\nextern wint_t getwchar_unlocked (void);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern wint_t fgetwc_unlocked (__FILE *__stream);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);\r\n# 1016 \"/usr/include/wchar.h\" 3 4\r\nextern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);\r\nextern wint_t putwchar_unlocked (wchar_t __wc);\r\n# 1026 \"/usr/include/wchar.h\" 3 4\r\nextern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,\r\n     __FILE *__restrict __stream);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int fputws_unlocked (const wchar_t *__restrict __ws,\r\n       __FILE *__restrict __stream);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,\r\n   const wchar_t *__restrict __format,\r\n   const struct tm *__restrict __tp) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,\r\n     const wchar_t *__restrict __format,\r\n     const struct tm *__restrict __tp,\r\n     locale_t __loc) noexcept (true);\r\n# 1073 \"/usr/include/wchar.h\" 3 4\r\n}\r\n# 45 \"/usr/include/c++/14.2.1/cwchar\" 2 3\r\n# 62 \"/usr/include/c++/14.2.1/cwchar\" 3\r\nnamespace std\r\n{\r\n  using ::mbstate_t;\r\n}\r\n# 135 \"/usr/include/c++/14.2.1/cwchar\" 3\r\nextern \"C++\"\r\n{\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  using ::wint_t;\r\n\r\n  using ::btowc;\r\n  using ::fgetwc;\r\n  using ::fgetws;\r\n  using ::fputwc;\r\n  using ::fputws;\r\n  using ::fwide;\r\n  using ::fwprintf;\r\n  using ::fwscanf;\r\n  using ::getwc;\r\n  using ::getwchar;\r\n  using ::mbrlen;\r\n  using ::mbrtowc;\r\n  using ::mbsinit;\r\n  using ::mbsrtowcs;\r\n  using ::putwc;\r\n  using ::putwchar;\r\n\r\n  using ::swprintf;\r\n\r\n  using ::swscanf;\r\n  using ::ungetwc;\r\n  using ::vfwprintf;\r\n\r\n  using ::vfwscanf;\r\n\r\n\r\n  using ::vswprintf;\r\n\r\n\r\n  using ::vswscanf;\r\n\r\n  using ::vwprintf;\r\n\r\n  using ::vwscanf;\r\n\r\n  using ::wcrtomb;\r\n  using ::wcscat;\r\n  using ::wcscmp;\r\n  using ::wcscoll;\r\n  using ::wcscpy;\r\n  using ::wcscspn;\r\n  using ::wcsftime;\r\n  using ::wcslen;\r\n  using ::wcsncat;\r\n  using ::wcsncmp;\r\n  using ::wcsncpy;\r\n  using ::wcsrtombs;\r\n  using ::wcsspn;\r\n  using ::wcstod;\r\n\r\n  using ::wcstof;\r\n\r\n  using ::wcstok;\r\n  using ::wcstol;\r\n  using ::wcstoul;\r\n  using ::wcsxfrm;\r\n  using ::wctob;\r\n  using ::wmemcmp;\r\n  using ::wmemcpy;\r\n  using ::wmemmove;\r\n  using ::wmemset;\r\n  using ::wprintf;\r\n  using ::wscanf;\r\n  using ::wcschr;\r\n  using ::wcspbrk;\r\n  using ::wcsrchr;\r\n  using ::wcsstr;\r\n  using ::wmemchr;\r\n# 234 \"/usr/include/c++/14.2.1/cwchar\" 3\r\n\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nnamespace __gnu_cxx\r\n{\r\n\r\n\r\n\r\n\r\n\r\n  using ::wcstold;\r\n# 260 \"/usr/include/c++/14.2.1/cwchar\" 3\r\n  using ::wcstoll;\r\n  using ::wcstoull;\r\n\r\n}\r\n\r\nnamespace std\r\n{\r\n  using ::__gnu_cxx::wcstold;\r\n  using ::__gnu_cxx::wcstoll;\r\n  using ::__gnu_cxx::wcstoull;\r\n}\r\n# 280 \"/usr/include/c++/14.2.1/cwchar\" 3\r\nnamespace std\r\n{\r\n\r\n  using std::wcstof;\r\n\r\n\r\n  using std::vfwscanf;\r\n\r\n\r\n  using std::vswscanf;\r\n\r\n\r\n  using std::vwscanf;\r\n\r\n\r\n\r\n  using std::wcstold;\r\n  using std::wcstoll;\r\n  using std::wcstoull;\r\n\r\n}\r\n# 41 \"/usr/include/c++/14.2.1/bits/postypes.h\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 62 \"/usr/include/c++/14.2.1/bits/postypes.h\" 3\r\n  typedef long int streamoff;\r\n\r\n\r\n\r\n\r\n\r\n  typedef ptrdiff_t streamsize;\r\n# 81 \"/usr/include/c++/14.2.1/bits/postypes.h\" 3\r\n  template<typename _StateT>\r\n    class fpos\r\n    {\r\n    private:\r\n      streamoff _M_off;\r\n      _StateT _M_state;\r\n\r\n    public:\r\n\r\n\r\n\r\n\r\n      fpos()\r\n      : _M_off(0), _M_state() { }\r\n# 103 \"/usr/include/c++/14.2.1/bits/postypes.h\" 3\r\n      fpos(streamoff __off)\r\n"]
[81.265631, "o", "      : _M_off(__off), _M_state() { }\r\n\r\n\r\n      fpos(const fpos&) = default;\r\n      fpos& operator=(const fpos&) = default;\r\n      ~fpos() = default;\r\n\r\n\r\n\r\n      operator streamoff() const { return _M_off; }\r\n\r\n\r\n      void\r\n      state(_StateT __st)\r\n      { _M_state = __st; }\r\n\r\n\r\n      _StateT\r\n      state() const\r\n      { return _M_state; }\r\n\r\n\r\n\r\n\r\n\r\n      fpos&\r\n      operator+=(streamoff __off)\r\n      {\r\n _M_off += __off;\r\n return *this;\r\n"]
[81.265711, "o", "      }\r\n\r\n\r\n\r\n\r\n\r\n      fpos&\r\n      operator-=(streamoff __off)\r\n      {\r\n _M_off -= __off;\r\n return *this;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      fpos\r\n      operator+(streamoff __off) const\r\n      {\r\n fpos __pos(*this);\r\n __pos += __off;\r\n return __pos;\r\n      }\r\n\r\n\r\n"]
[81.265787, "o", "\r\n\r\n\r\n\r\n\r\n      fpos\r\n      operator-(streamoff __off) const\r\n      {\r\n fpos __pos(*this);\r\n __pos -= __off;\r\n return __pos;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      streamoff\r\n      operator-(const fpos& __other) const\r\n      { return _M_off - __other._M_off; }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.265865, "o", "  template<typename _StateT>\r\n    inline bool\r\n    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)\r\n    { return streamoff(__lhs) == streamoff(__rhs); }\r\n\r\n  template<typename _StateT>\r\n    inline bool\r\n    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)\r\n    { return streamoff(__lhs) != streamoff(__rhs); }\r\n\r\n\r\n\r\n\r\n\r\n  typedef fpos<mbstate_t> streampos;\r\n\r\n"]
[81.265945, "o", "  typedef fpos<mbstate_t> wstreampos;\r\n# 215 \"/usr/include/c++/14.2.1/bits/postypes.h\" 3\r\n  typedef fpos<mbstate_t> u16streampos;\r\n\r\n  typedef fpos<mbstate_t> u32streampos;\r\n\r\n\r\n\r\n}\r\n# 43 \"/usr/include/c++/14.2.1/iosfwd\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 76 \"/usr/include/c++/14.2.1/iosfwd\" 3\r\n  class ios_base;\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n    class basic_ios;\r\n\r\n"]
[81.265986, "o", "  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n    class basic_streambuf;\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n    class basic_istream;\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n    class basic_ostream;\r\n\r\n"]
[81.266025, "o", "  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n    class basic_iostream;\r\n\r\n\r\nnamespace __cxx11 {\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT>,\r\n     typename _Alloc = allocator<_CharT> >\r\n    class basic_stringbuf;\r\n\r\n"]
[81.266063, "o", "  template<typename _CharT, typename _Traits = char_traits<_CharT>,\r\n    typename _Alloc = allocator<_CharT> >\r\n    class basic_istringstream;\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT>,\r\n    typename _Alloc = allocator<_CharT> >\r\n    class basic_ostringstream;\r\n\r\n"]
[81.266109, "o", "  template<typename _CharT, typename _Traits = char_traits<_CharT>,\r\n    typename _Alloc = allocator<_CharT> >\r\n    class basic_stringstream;\r\n\r\n}\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n    class basic_filebuf;\r\n\r\n"]
[81.266149, "o", "  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n    class basic_ifstream;\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n    class basic_ofstream;\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n    class basic_fstream;\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n"]
[81.26619, "o", "    class istreambuf_iterator;\r\n\r\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\r\n    class ostreambuf_iterator;\r\n\r\n\r\n\r\n  typedef basic_ios<char> ios;\r\n\r\n\r\n  typedef basic_streambuf<char> streambuf;\r\n\r\n\r\n"]
[81.26623, "o", "  typedef basic_istream<char> istream;\r\n\r\n\r\n  typedef basic_ostream<char> ostream;\r\n\r\n\r\n  typedef basic_iostream<char> iostream;\r\n\r\n\r\n  typedef basic_stringbuf<char> stringbuf;\r\n\r\n\r\n"]
[81.266268, "o", "  typedef basic_istringstream<char> istringstream;\r\n\r\n\r\n  typedef basic_ostringstream<char> ostringstream;\r\n\r\n\r\n  typedef basic_stringstream<char> stringstream;\r\n\r\n\r\n  typedef basic_filebuf<char> filebuf;\r\n\r\n\r\n  typedef basic_ifstream<char> ifstream;\r\n\r\n"]
[81.266307, "o", "\r\n  typedef basic_ofstream<char> ofstream;\r\n\r\n\r\n  typedef basic_fstream<char> fstream;\r\n\r\n\r\n\r\n  typedef basic_ios<wchar_t> wios;\r\n\r\n\r\n  typedef basic_streambuf<wchar_t> wstreambuf;\r\n\r\n"]
[81.266344, "o", "\r\n  typedef basic_istream<wchar_t> wistream;\r\n\r\n\r\n  typedef basic_ostream<wchar_t> wostream;\r\n\r\n\r\n  typedef basic_iostream<wchar_t> wiostream;\r\n\r\n\r\n  typedef basic_stringbuf<wchar_t> wstringbuf;\r\n\r\n"]
[81.266386, "o", "\r\n  typedef basic_istringstream<wchar_t> wistringstream;\r\n\r\n\r\n  typedef basic_ostringstream<wchar_t> wostringstream;\r\n\r\n\r\n  typedef basic_stringstream<wchar_t> wstringstream;\r\n\r\n\r\n"]
[81.266432, "o", "  typedef basic_filebuf<wchar_t> wfilebuf;\r\n\r\n\r\n  typedef basic_ifstream<wchar_t> wifstream;\r\n\r\n\r\n  typedef basic_ofstream<wchar_t> wofstream;\r\n\r\n\r\n"]
[81.266474, "o", "  typedef basic_fstream<wchar_t> wfstream;\r\n# 255 \"/usr/include/c++/14.2.1/iosfwd\" 3\r\n\r\n}\r\n# 41 \"/usr/include/c++/14.2.1/ios\" 2 3\r\n"]
[81.26687, "o", "# 1 \"/usr/include/c++/14.2.1/exception\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/exception\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/exception\" 3\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/exception.h\" 1 3\r\n# 34 \"/usr/include/c++/14.2.1/bits/exception.h\" 3\r\n       \r\n# 35 \"/usr/include/c++/14.2.1/bits/exception.h\" 3\r\n\r\n\r\n\r\nextern \"C++\" {\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n# 59 \"/usr/include/c++/14.2.1/bits/exception.h\" 3\r\n  class exception\r\n  {\r\n  public:\r\n    exception() noexcept { }\r\n    virtual ~exception() noexcept;\r\n\r\n    exception(const exception&) = default;\r\n    exception& operator=(const exception&) = default;\r\n    exception(exception&&) = default;\r\n    exception& operator=(exception&&) = default;\r\n\r\n\r\n\r\n\r\n    virtual const char*\r\n    what() const noexcept;\r\n  };\r\n\r\n\r\n\r\n}\r\n\r\n}\r\n# 37 \"/usr/include/c++/14.2.1/exception\" 2 3\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.268172, "o", "# 40 \"/usr/include/c++/14.2.1/exception\" 2 3\r\n\r\nextern \"C++\" {\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n# 54 \"/usr/include/c++/14.2.1/exception\" 3\r\n"]
[81.268215, "o", "  class bad_exception : public exception\r\n  {\r\n  public:\r\n    bad_exception() noexcept { }\r\n\r\n\r\n\r\n    virtual ~bad_exception() noexcept;\r\n\r\n\r\n    virtual const char*\r\n    what() const noexcept;\r\n  };\r\n\r\n\r\n"]
[81.268254, "o", "  typedef void (*terminate_handler) ();\r\n\r\n\r\n  terminate_handler set_terminate(terminate_handler) noexcept;\r\n\r\n\r\n\r\n  terminate_handler get_terminate() noexcept;\r\n\r\n\r\n\r\n"]
[81.268292, "o", "\r\n  void terminate() noexcept __attribute__ ((__noreturn__,__cold__));\r\n\r\n\r\n\r\n  typedef void (*__attribute__ ((__deprecated__)) unexpected_handler) ();\r\n\r\n\r\n"]
[81.268335, "o", "\r\n\r\n\r\n  __attribute__ ((__deprecated__))\r\n  unexpected_handler set_unexpected(unexpected_handler) noexcept;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.268373, "o", "  __attribute__ ((__deprecated__))\r\n  unexpected_handler get_unexpected() noexcept;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  __attribute__ ((__deprecated__))\r\n  void unexpected() __attribute__ ((__noreturn__,__cold__));\r\n# 124 \"/usr/include/c++/14.2.1/exception\" 3\r\n"]
[81.268411, "o", "  __attribute__ ((__deprecated__ (\"use '\" \"std::uncaught_exceptions()\" \"' instead\")))\r\n  bool uncaught_exception() noexcept __attribute__ ((__pure__));\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.268449, "o", "  int uncaught_exceptions() noexcept __attribute__ ((__pure__));\r\n\r\n\r\n\r\n}\r\n\r\nnamespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n"]
[81.268485, "o", "# 158 \"/usr/include/c++/14.2.1/exception\" 3\r\n  void __verbose_terminate_handler();\r\n\r\n\r\n}\r\n\r\n"]
[81.268752, "o", "}\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 1 3\r\n# 35 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/exception_defines.h\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/cxxabi_init_exception.h\" 1 3\r\n# 34 \"/usr/include/c++/14.2.1/bits/cxxabi_init_exception.h\" 3\r\n       \r\n# 35 \"/usr/include/c++/14.2.1/bits/cxxabi_init_exception.h\" 3\r\n\r\n#pragma GCC visibility push(default)\r\n\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 1 3 4\r\n# 145 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 3 4\r\n"]
[81.268825, "o", "typedef long int ptrdiff_t;\r\n# 425 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 3 4\r\ntypedef struct {\r\n  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));\r\n"]
[81.268865, "o", "  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));\r\n# 436 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 3 4\r\n} max_align_t;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.268904, "o", "  typedef decltype(nullptr) nullptr_t;\r\n# 39 \"/usr/include/c++/14.2.1/bits/cxxabi_init_exception.h\" 2 3\r\n# 50 \"/usr/include/c++/14.2.1/bits/cxxabi_init_exception.h\" 3\r\nnamespace std\r\n{\r\n  class type_info;\r\n}\r\n\r\n"]
[81.268942, "o", "namespace __cxxabiv1\r\n{\r\n  struct __cxa_refcounted_exception;\r\n\r\n  extern \"C\"\r\n    {\r\n\r\n      void*\r\n      __cxa_allocate_exception(size_t) noexcept;\r\n\r\n      void\r\n"]
[81.268985, "o", "      __cxa_free_exception(void*) noexcept;\r\n\r\n\r\n      __cxa_refcounted_exception*\r\n      __cxa_init_primary_exception(void *__object, std::type_info *__tinfo,\r\n                void ( *__dest) (void *))\r\n noexcept;\r\n"]
[81.269024, "o", "\r\n    }\r\n}\r\n\r\n\r\n\r\n#pragma GCC visibility pop\r\n# 37 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 2 3\r\n"]
[81.269064, "o", "# 1 \"/usr/include/c++/14.2.1/typeinfo\" 1 3\r\n# 32 \"/usr/include/c++/14.2.1/typeinfo\" 3\r\n       \r\n# 33 \"/usr/include/c++/14.2.1/typeinfo\" 3\r\n"]
[81.269276, "o", "\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/hash_bytes.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/hash_bytes.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/hash_bytes.h\" 3\r\n\r\n\r\n\r\nnamespace std\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  size_t\r\n  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);\r\n\r\n\r\n\r\n\r\n\r\n  size_t\r\n  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);\r\n\r\n\r\n}\r\n# 37 \"/usr/include/c++/14.2.1/typeinfo\" 2 3\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.270286, "o", "# 41 \"/usr/include/c++/14.2.1/typeinfo\" 2 3\r\n\r\n#pragma GCC visibility push(default)\r\n\r\nextern \"C++\" {\r\n\r\nnamespace __cxxabiv1\r\n{\r\n  class __class_type_info;\r\n"]
[81.270326, "o", "}\r\n# 83 \"/usr/include/c++/14.2.1/typeinfo\" 3\r\nnamespace std\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n  class type_info\r\n  {\r\n  public:\r\n\r\n"]
[81.270365, "o", "\r\n\r\n\r\n    virtual ~type_info();\r\n\r\n\r\n\r\n    const char* name() const noexcept\r\n    { return __name[0] == '*' ? __name + 1 : __name; }\r\n\r\n\r\n\r\n"]
[81.270402, "o", "    bool before(const type_info& __arg) const noexcept;\r\n\r\n   \r\n    bool operator==(const type_info& __arg) const noexcept;\r\n\r\n\r\n"]
[81.270445, "o", "    bool operator!=(const type_info& __arg) const noexcept\r\n    { return !operator==(__arg); }\r\n\r\n\r\n\r\n    size_t hash_code() const noexcept\r\n    {\r\n\r\n      return _Hash_bytes(name(), __builtin_strlen(name()),\r\n"]
[81.270483, "o", "    static_cast<size_t>(0xc70f6907UL));\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    virtual bool __is_pointer_p() const;\r\n\r\n\r\n    virtual bool __is_function_p() const;\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.270523, "o", "\r\n\r\n    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,\r\n       unsigned __outer) const;\r\n\r\n\r\n    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,\r\n        void **__obj_ptr) const;\r\n"]
[81.27056, "o", "\r\n  protected:\r\n    const char *__name;\r\n\r\n    explicit type_info(const char *__n): __name(__n) { }\r\n\r\n  private:\r\n\r\n\r\n    type_info& operator=(const type_info&) = delete;\r\n"]
[81.270596, "o", "    type_info(const type_info&) = delete;\r\n# 166 \"/usr/include/c++/14.2.1/typeinfo\" 3\r\n  };\r\n\r\n\r\n  inline bool\r\n  type_info::before(const type_info& __arg) const noexcept\r\n"]
[81.270632, "o", "  {\r\n\r\n\r\n\r\n\r\n    if (__name[0] != '*' || __arg.__name[0] != '*')\r\n      return __builtin_strcmp (__name, __arg.__name) < 0;\r\n# 186 \"/usr/include/c++/14.2.1/typeinfo\" 3\r\n"]
[81.270667, "o", "    return __name < __arg.__name;\r\n  }\r\n\r\n\r\n\r\n  inline bool\r\n  type_info::operator==(const type_info& __arg) const noexcept\r\n  {\r\n"]
[81.270707, "o", "    if (std::__is_constant_evaluated())\r\n      return this == &__arg;\r\n\r\n    if (__name == __arg.__name)\r\n      return true;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.270752, "o", "    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;\r\n\r\n\r\n\r\n  }\r\n# 219 \"/usr/include/c++/14.2.1/typeinfo\" 3\r\n  class bad_cast : public exception\r\n  {\r\n  public:\r\n"]
[81.270793, "o", "    bad_cast() noexcept { }\r\n\r\n\r\n\r\n    virtual ~bad_cast() noexcept;\r\n\r\n\r\n    virtual const char* what() const noexcept;\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  class bad_typeid : public exception\r\n"]
[81.27083, "o", "  {\r\n  public:\r\n    bad_typeid () noexcept { }\r\n\r\n\r\n\r\n    virtual ~bad_typeid() noexcept;\r\n\r\n\r\n    virtual const char* what() const noexcept;\r\n  };\r\n}\r\n\r\n"]
[81.270877, "o", "}\r\n\r\n#pragma GCC visibility pop\r\n# 38 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 2 3\r\n"]
[81.270914, "o", "# 1 \"/usr/include/c++/14.2.1/new\" 1 3\r\n# 38 \"/usr/include/c++/14.2.1/new\" 3\r\n       \r\n"]
[81.270951, "o", "# 39 \"/usr/include/c++/14.2.1/new\" 3\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.270991, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.272045, "o", "# 47 \"/usr/include/c++/14.2.1/new\" 2 3\r\n\r\n#pragma GCC visibility push(default)\r\n\r\nextern \"C++\" {\r\n\r\nnamespace std\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.272125, "o", "  class bad_alloc : public exception\r\n  {\r\n  public:\r\n    bad_alloc() throw() { }\r\n\r\n\r\n    bad_alloc(const bad_alloc&) = default;\r\n    bad_alloc& operator=(const bad_alloc&) = default;\r\n\r\n\r\n\r\n\r\n    virtual ~bad_alloc() throw();\r\n\r\n\r\n    virtual const char* what() const throw();\r\n  };\r\n\r\n\r\n  class bad_array_new_length : public bad_alloc\r\n  {\r\n  public:\r\n    bad_array_new_length() throw() { }\r\n\r\n\r\n\r\n    virtual ~bad_array_new_length() throw();\r\n\r\n"]
[81.272205, "o", "\r\n    virtual const char* what() const throw();\r\n  };\r\n\r\n\r\n\r\n  enum class align_val_t: size_t {};\r\n\r\n\r\n  struct nothrow_t\r\n  {\r\n\r\n    explicit nothrow_t() = default;\r\n\r\n  };\r\n\r\n  extern const nothrow_t nothrow;\r\n\r\n\r\n\r\n  typedef void (*new_handler)();\r\n\r\n\r\n\r\n  new_handler set_new_handler(new_handler) throw();\r\n\r\n\r\n\r\n"]
[81.27229, "o", "  new_handler get_new_handler() noexcept;\r\n\r\n}\r\n# 131 \"/usr/include/c++/14.2.1/new\" 3\r\n[[__nodiscard__]] void* operator new(std::size_t)\r\n  __attribute__((__externally_visible__));\r\n[[__nodiscard__]] void* operator new[](std::size_t)\r\n  __attribute__((__externally_visible__));\r\nvoid operator delete(void*) noexcept\r\n  __attribute__((__externally_visible__));\r\nvoid operator delete[](void*) noexcept\r\n  __attribute__((__externally_visible__));\r\n\r\nvoid operator delete(void*, std::size_t) noexcept\r\n  __attribute__((__externally_visible__));\r\n"]
[81.27237, "o", "void operator delete[](void*, std::size_t) noexcept\r\n  __attribute__((__externally_visible__));\r\n\r\n[[__nodiscard__]] void* operator new(std::size_t, const std::nothrow_t&) noexcept\r\n  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\r\n[[__nodiscard__]] void* operator new[](std::size_t, const std::nothrow_t&) noexcept\r\n  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\r\nvoid operator delete(void*, const std::nothrow_t&) noexcept\r\n  __attribute__((__externally_visible__));\r\nvoid operator delete[](void*, const std::nothrow_t&) noexcept\r\n  __attribute__((__externally_visible__));\r\n\r\n[[__nodiscard__]] void* operator new(std::size_t, std::align_val_t)\r\n"]
[81.272447, "o", "  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\r\n[[__nodiscard__]] void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)\r\n  noexcept __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\r\nvoid operator delete(void*, std::align_val_t)\r\n  noexcept __attribute__((__externally_visible__));\r\nvoid operator delete(void*, std::align_val_t, const std::nothrow_t&)\r\n  noexcept __attribute__((__externally_visible__));\r\n[[__nodiscard__]] void* operator new[](std::size_t, std::align_val_t)\r\n  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\r\n[[__nodiscard__]] void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)\r\n"]
[81.272527, "o", "  noexcept __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\r\nvoid operator delete[](void*, std::align_val_t)\r\n  noexcept __attribute__((__externally_visible__));\r\nvoid operator delete[](void*, std::align_val_t, const std::nothrow_t&)\r\n  noexcept __attribute__((__externally_visible__));\r\n\r\nvoid operator delete(void*, std::size_t, std::align_val_t)\r\n  noexcept __attribute__((__externally_visible__));\r\nvoid operator delete[](void*, std::size_t, std::align_val_t)\r\n  noexcept __attribute__((__externally_visible__));\r\n\r\n\r\n\r\n\r\n"]
[81.272603, "o", "[[__nodiscard__]] inline void* operator new(std::size_t, void* __p) noexcept\r\n{ return __p; }\r\n[[__nodiscard__]] inline void* operator new[](std::size_t, void* __p) noexcept\r\n{ return __p; }\r\n\r\n\r\ninline void operator delete (void*, void*) noexcept { }\r\ninline void operator delete[](void*, void*) noexcept { }\r\n\r\n}\r\n\r\n\r\nnamespace std\r\n{\r\n\r\n\r\n  template<typename _Tp>\r\n    [[nodiscard]] constexpr _Tp*\r\n"]
[81.272644, "o", "    launder(_Tp* __p) noexcept\r\n    { return __builtin_launder(__p); }\r\n\r\n\r\n\r\n\r\n  template<typename _Ret, typename... _Args , bool _NE>\r\n    void launder(_Ret (*)(_Args...) noexcept (_NE)) = delete;\r\n"]
[81.272685, "o", "  template<typename _Ret, typename... _Args , bool _NE>\r\n    void launder(_Ret (*)(_Args......) noexcept (_NE)) = delete;\r\n\r\n  void launder(void*) = delete;\r\n  void launder(const void*) = delete;\r\n  void launder(volatile void*) = delete;\r\n"]
[81.272724, "o", "  void launder(const volatile void*) = delete;\r\n\r\n\r\n\r\n  inline constexpr size_t hardware_destructive_interference_size = 64;\r\n  inline constexpr size_t hardware_constructive_interference_size = 64;\r\n\r\n"]
[81.273, "o", "}\r\n# 236 \"/usr/include/c++/14.2.1/new\" 3\r\n#pragma GCC visibility pop\r\n# 39 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 2 3\r\n"]
[81.273076, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/move.h\" 1 3\r\n"]
[81.273164, "o", "# 37 \"/usr/include/c++/14.2.1/bits/move.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/type_traits\" 1 3\r\n# 32 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n       \r\n# 33 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n"]
[81.273253, "o", "# 63 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.274321, "o", "# 64 \"/usr/include/c++/14.2.1/type_traits\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n"]
[81.274366, "o", "  template<typename _Tp>\r\n    class reference_wrapper;\r\n# 86 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp, _Tp __v>\r\n    struct integral_constant\r\n    {\r\n      static constexpr _Tp value = __v;\r\n      using value_type = _Tp;\r\n      using type = integral_constant<_Tp, __v>;\r\n      constexpr operator value_type() const noexcept { return value; }\r\n\r\n\r\n"]
[81.274406, "o", "      constexpr value_type operator()() const noexcept { return value; }\r\n\r\n    };\r\n# 106 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<bool __v>\r\n    using __bool_constant = integral_constant<bool, __v>;\r\n\r\n\r\n\r\n"]
[81.274444, "o", "  using true_type = __bool_constant<true>;\r\n\r\n\r\n  using false_type = __bool_constant<false>;\r\n\r\n\r\n\r\n\r\n  template<bool __v>\r\n    using bool_constant = __bool_constant<__v>;\r\n\r\n\r\n\r\n"]
[81.274487, "o", "\r\n\r\n\r\n  template<bool, typename _Tp = void>\r\n    struct enable_if\r\n    { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct enable_if<true, _Tp>\r\n    { using type = _Tp; };\r\n\r\n"]
[81.274529, "o", "\r\n  template<bool _Cond, typename _Tp = void>\r\n    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;\r\n\r\n  template<bool>\r\n    struct __conditional\r\n    {\r\n      template<typename _Tp, typename>\r\n using type = _Tp;\r\n    };\r\n\r\n"]
[81.274571, "o", "  template<>\r\n    struct __conditional<false>\r\n    {\r\n      template<typename, typename _Up>\r\n using type = _Up;\r\n    };\r\n\r\n\r\n  template<bool _Cond, typename _If, typename _Else>\r\n    using __conditional_t\r\n"]
[81.27461, "o", "      = typename __conditional<_Cond>::template type<_If, _Else>;\r\n\r\n\r\n  template <typename _Type>\r\n    struct __type_identity\r\n    { using type = _Type; };\r\n\r\n  template<typename _Tp>\r\n    using __type_identity_t = typename __type_identity<_Tp>::type;\r\n\r\n  namespace __detail\r\n  {\r\n\r\n"]
[81.274648, "o", "    template<typename _Tp, typename...>\r\n      using __first_t = _Tp;\r\n\r\n\r\n    template<typename... _Bn>\r\n      auto __or_fn(int) -> __first_t<false_type,\r\n         __enable_if_t<!bool(_Bn::value)>...>;\r\n\r\n"]
[81.274686, "o", "    template<typename... _Bn>\r\n      auto __or_fn(...) -> true_type;\r\n\r\n    template<typename... _Bn>\r\n      auto __and_fn(int) -> __first_t<true_type,\r\n          __enable_if_t<bool(_Bn::value)>...>;\r\n\r\n    template<typename... _Bn>\r\n"]
[81.274723, "o", "      auto __and_fn(...) -> false_type;\r\n  }\r\n\r\n\r\n\r\n\r\n  template<typename... _Bn>\r\n    struct __or_\r\n    : decltype(__detail::__or_fn<_Bn...>(0))\r\n    { };\r\n\r\n"]
[81.274764, "o", "  template<typename... _Bn>\r\n    struct __and_\r\n    : decltype(__detail::__and_fn<_Bn...>(0))\r\n    { };\r\n\r\n  template<typename _Pp>\r\n    struct __not_\r\n    : __bool_constant<!bool(_Pp::value)>\r\n"]
[81.27481, "o", "    { };\r\n\r\n\r\n\r\n\r\n\r\n  template<typename... _Bn>\r\n    inline constexpr bool __or_v = __or_<_Bn...>::value;\r\n  template<typename... _Bn>\r\n    inline constexpr bool __and_v = __and_<_Bn...>::value;\r\n\r\n  namespace __detail\r\n"]
[81.274853, "o", "  {\r\n    template<typename , typename _B1, typename... _Bn>\r\n      struct __disjunction_impl\r\n      { using type = _B1; };\r\n\r\n    template<typename _B1, typename _B2, typename... _Bn>\r\n      struct __disjunction_impl<__enable_if_t<!bool(_B1::value)>, _B1, _B2, _Bn...>\r\n      { using type = typename __disjunction_impl<void, _B2, _Bn...>::type; };\r\n\r\n"]
[81.274891, "o", "    template<typename , typename _B1, typename... _Bn>\r\n      struct __conjunction_impl\r\n      { using type = _B1; };\r\n\r\n    template<typename _B1, typename _B2, typename... _Bn>\r\n      struct __conjunction_impl<__enable_if_t<bool(_B1::value)>, _B1, _B2, _Bn...>\r\n"]
[81.274928, "o", "      { using type = typename __conjunction_impl<void, _B2, _Bn...>::type; };\r\n  }\r\n\r\n\r\n  template<typename... _Bn>\r\n    struct conjunction\r\n    : __detail::__conjunction_impl<void, _Bn...>::type\r\n    { };\r\n\r\n  template<>\r\n    struct conjunction<>\r\n"]
[81.274964, "o", "    : true_type\r\n    { };\r\n\r\n  template<typename... _Bn>\r\n    struct disjunction\r\n    : __detail::__disjunction_impl<void, _Bn...>::type\r\n    { };\r\n\r\n  template<>\r\n    struct disjunction<>\r\n"]
[81.275002, "o", "    : false_type\r\n    { };\r\n\r\n  template<typename _Pp>\r\n    struct negation\r\n    : __not_<_Pp>::type\r\n    { };\r\n\r\n\r\n\r\n\r\n  template<typename... _Bn>\r\n"]
[81.275042, "o", "    inline constexpr bool conjunction_v = conjunction<_Bn...>::value;\r\n\r\n  template<typename... _Bn>\r\n    inline constexpr bool disjunction_v = disjunction<_Bn...>::value;\r\n\r\n  template<typename _Pp>\r\n    inline constexpr bool negation_v = negation<_Pp>::value;\r\n"]
[81.275089, "o", "\r\n\r\n\r\n\r\n\r\n  template<typename>\r\n    struct is_reference;\r\n  template<typename>\r\n    struct is_function;\r\n  template<typename>\r\n    struct is_void;\r\n  template<typename>\r\n    struct remove_cv;\r\n"]
[81.275131, "o", "  template<typename>\r\n    struct is_const;\r\n\r\n\r\n  template<typename>\r\n    struct __is_array_unknown_bounds;\r\n\r\n\r\n\r\n\r\n  template <typename _Tp, size_t = sizeof(_Tp)>\r\n    constexpr true_type __is_complete_or_unbounded(__type_identity<_Tp>)\r\n    { return {}; }\r\n\r\n"]
[81.27517, "o", "  template <typename _TypeIdentity,\r\n      typename _NestedType = typename _TypeIdentity::type>\r\n    constexpr typename __or_<\r\n      is_reference<_NestedType>,\r\n      is_function<_NestedType>,\r\n      is_void<_NestedType>,\r\n      __is_array_unknown_bounds<_NestedType>\r\n    >::type __is_complete_or_unbounded(_TypeIdentity)\r\n    { return {}; }\r\n\r\n"]
[81.275207, "o", "\r\n  template<typename _Tp>\r\n    using __remove_cv_t = typename remove_cv<_Tp>::type;\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_void\r\n    : public false_type { };\r\n"]
[81.275244, "o", "\r\n  template<>\r\n    struct is_void<void>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct is_void<const void>\r\n    : public true_type { };\r\n\r\n  template<>\r\n"]
[81.275281, "o", "    struct is_void<volatile void>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct is_void<const volatile void>\r\n    : public true_type { };\r\n\r\n\r\n  template<typename>\r\n    struct __is_integral_helper\r\n"]
[81.275323, "o", "    : public false_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<bool>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<char>\r\n    : public true_type { };\r\n\r\n  template<>\r\n"]
[81.275368, "o", "    struct __is_integral_helper<signed char>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<unsigned char>\r\n    : public true_type { };\r\n\r\n\r\n\r\n\r\n  template<>\r\n    struct __is_integral_helper<wchar_t>\r\n"]
[81.275409, "o", "    : public true_type { };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<>\r\n    struct __is_integral_helper<char16_t>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<char32_t>\r\n"]
[81.275448, "o", "    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<short>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<unsigned short>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<int>\r\n"]
[81.275487, "o", "    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<unsigned int>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<long>\r\n    : public true_type { };\r\n\r\n  template<>\r\n"]
[81.275523, "o", "    struct __is_integral_helper<unsigned long>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<long long>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_integral_helper<unsigned long long>\r\n"]
[81.27556, "o", "    : public true_type { };\r\n\r\n\r\n\r\n\r\n  __extension__\r\n  template<>\r\n    struct __is_integral_helper<__int128>\r\n    : public true_type { };\r\n\r\n  __extension__\r\n"]
[81.275601, "o", "  template<>\r\n    struct __is_integral_helper<unsigned __int128>\r\n    : public true_type { };\r\n"]
[81.275646, "o", "# 460 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp>\r\n    struct is_integral\r\n    : public __is_integral_helper<__remove_cv_t<_Tp>>::type\r\n    { };\r\n\r\n\r\n  template<typename>\r\n    struct __is_floating_point_helper\r\n    : public false_type { };\r\n\r\n"]
[81.275686, "o", "  template<>\r\n    struct __is_floating_point_helper<float>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_floating_point_helper<double>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct __is_floating_point_helper<long double>\r\n"]
[81.275726, "o", "    : public true_type { };\r\n# 513 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<>\r\n    struct __is_floating_point_helper<__float128>\r\n    : public true_type { };\r\n\r\n\r\n\r\n\r\n"]
[81.275763, "o", "  template<typename _Tp>\r\n    struct is_floating_point\r\n    : public __is_floating_point_helper<__remove_cv_t<_Tp>>::type\r\n    { };\r\n\r\n\r\n\r\n"]
[81.275799, "o", "  template<typename _Tp>\r\n    struct is_array\r\n    : public __bool_constant<__is_array(_Tp)>\r\n    { };\r\n# 545 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename>\r\n    struct __is_pointer_helper\r\n"]
[81.275836, "o", "    : public false_type { };\r\n\r\n  template<typename _Tp>\r\n    struct __is_pointer_helper<_Tp*>\r\n    : public true_type { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_pointer\r\n"]
[81.275876, "o", "    : public __is_pointer_helper<__remove_cv_t<_Tp>>::type\r\n    { };\r\n\r\n\r\n  template<typename>\r\n    struct is_lvalue_reference\r\n    : public false_type { };\r\n\r\n  template<typename _Tp>\r\n    struct is_lvalue_reference<_Tp&>\r\n    : public true_type { };\r\n\r\n"]
[81.275921, "o", "\r\n  template<typename>\r\n    struct is_rvalue_reference\r\n    : public false_type { };\r\n\r\n  template<typename _Tp>\r\n    struct is_rvalue_reference<_Tp&&>\r\n    : public true_type { };\r\n"]
[81.275962, "o", "\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_member_object_pointer\r\n    : public __bool_constant<__is_member_object_pointer(_Tp)>\r\n    { };\r\n"]
[81.276001, "o", "# 601 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp>\r\n    struct is_member_function_pointer\r\n    : public __bool_constant<__is_member_function_pointer(_Tp)>\r\n    { };\r\n# 622 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp>\r\n"]
[81.276038, "o", "    struct is_enum\r\n    : public __bool_constant<__is_enum(_Tp)>\r\n    { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_union\r\n    : public __bool_constant<__is_union(_Tp)>\r\n    { };\r\n\r\n\r\n"]
[81.276074, "o", "  template<typename _Tp>\r\n    struct is_class\r\n    : public __bool_constant<__is_class(_Tp)>\r\n    { };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.276112, "o", "    struct is_function\r\n    : public __bool_constant<__is_function(_Tp)>\r\n    { };\r\n# 661 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp>\r\n    struct is_null_pointer\r\n"]
[81.276152, "o", "    : public false_type { };\r\n\r\n  template<>\r\n    struct is_null_pointer<std::nullptr_t>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct is_null_pointer<const std::nullptr_t>\r\n    : public true_type { };\r\n\r\n  template<>\r\n"]
[81.276196, "o", "    struct is_null_pointer<volatile std::nullptr_t>\r\n    : public true_type { };\r\n\r\n  template<>\r\n    struct is_null_pointer<const volatile std::nullptr_t>\r\n    : public true_type { };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.276239, "o", "    struct __is_nullptr_t\r\n    : public is_null_pointer<_Tp>\r\n    { } __attribute__ ((__deprecated__ (\"use '\" \"std::is_null_pointer\" \"' instead\")));\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.276277, "o", "    struct is_reference\r\n    : public __bool_constant<__is_reference(_Tp)>\r\n    { };\r\n# 715 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp>\r\n    struct is_arithmetic\r\n    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type\r\n"]
[81.276314, "o", "    { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_fundamental\r\n    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,\r\n     is_null_pointer<_Tp>>::type\r\n    { };\r\n"]
[81.27635, "o", "\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_object\r\n    : public __bool_constant<__is_object(_Tp)>\r\n    { };\r\n# 741 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename>\r\n"]
[81.276387, "o", "    struct is_member_pointer;\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_scalar\r\n    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,\r\n                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type\r\n    { };\r\n\r\n\r\n"]
[81.276428, "o", "  template<typename _Tp>\r\n    struct is_compound\r\n    : public __bool_constant<!is_fundamental<_Tp>::value> { };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.276471, "o", "    struct is_member_pointer\r\n    : public __bool_constant<__is_member_pointer(_Tp)>\r\n    { };\r\n# 779 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename, typename>\r\n    struct is_same;\r\n\r\n\r\n"]
[81.276512, "o", "  template<typename _Tp, typename... _Types>\r\n    using __is_one_of = __or_<is_same<_Tp, _Types>...>;\r\n\r\n\r\n  __extension__\r\n  template<typename _Tp>\r\n    using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,\r\n   signed char, signed short, signed int, signed long,\r\n   signed long long\r\n\r\n"]
[81.27655, "o", "   , signed __int128\r\n# 804 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n   >;\r\n\r\n\r\n  __extension__\r\n  template<typename _Tp>\r\n    using __is_unsigned_integer = __is_one_of<__remove_cv_t<_Tp>,\r\n   unsigned char, unsigned short, unsigned int, unsigned long,\r\n"]
[81.276588, "o", "   unsigned long long\r\n\r\n   , unsigned __int128\r\n# 824 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n   >;\r\n\r\n\r\n  template<typename _Tp>\r\n    using __is_standard_integer\r\n"]
[81.276626, "o", "      = __or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>;\r\n\r\n\r\n  template<typename...> using __void_t = void;\r\n\r\n\r\n\r\n\r\n\r\n  template<typename>\r\n    struct is_const\r\n"]
[81.276664, "o", "    : public false_type { };\r\n\r\n  template<typename _Tp>\r\n    struct is_const<_Tp const>\r\n    : public true_type { };\r\n\r\n\r\n  template<typename>\r\n    struct is_volatile\r\n    : public false_type { };\r\n\r\n"]
[81.276705, "o", "  template<typename _Tp>\r\n    struct is_volatile<_Tp volatile>\r\n    : public true_type { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_trivial\r\n    : public __bool_constant<__is_trivial(_Tp)>\r\n    {\r\n"]
[81.276754, "o", "      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_trivially_copyable\r\n    : public __bool_constant<__is_trivially_copyable(_Tp)>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n"]
[81.276796, "o", "    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_standard_layout\r\n    : public __bool_constant<__is_standard_layout(_Tp)>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.276836, "o", "  template<typename _Tp>\r\n    struct\r\n   \r\n    is_pod\r\n    : public __bool_constant<__is_pod(_Tp)>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n"]
[81.276875, "o", "\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct\r\n    [[__deprecated__]]\r\n    is_literal_type\r\n    : public __bool_constant<__is_literal_type(_Tp)>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n"]
[81.276911, "o", " \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_empty\r\n    : public __bool_constant<__is_empty(_Tp)>\r\n    { };\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.276947, "o", "    struct is_polymorphic\r\n    : public __bool_constant<__is_polymorphic(_Tp)>\r\n    { };\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_final\r\n    : public __bool_constant<__is_final(_Tp)>\r\n    { };\r\n"]
[81.276985, "o", "\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_abstract\r\n    : public __bool_constant<__is_abstract(_Tp)>\r\n    { };\r\n\r\n\r\n  template<typename _Tp,\r\n"]
[81.277026, "o", "    bool = is_arithmetic<_Tp>::value>\r\n    struct __is_signed_helper\r\n    : public false_type { };\r\n\r\n  template<typename _Tp>\r\n    struct __is_signed_helper<_Tp, true>\r\n    : public __bool_constant<_Tp(-1) < _Tp(0)>\r\n    { };\r\n\r\n\r\n\r\n"]
[81.277066, "o", "  template<typename _Tp>\r\n    struct is_signed\r\n    : public __is_signed_helper<_Tp>::type\r\n    { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_unsigned\r\n    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>::type\r\n    { };\r\n\r\n"]
[81.277102, "o", "\r\n  template<typename _Tp, typename _Up = _Tp&&>\r\n    _Up\r\n    __declval(int);\r\n\r\n  template<typename _Tp>\r\n    _Tp\r\n    __declval(long);\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.277139, "o", "    auto declval() noexcept -> decltype(__declval<_Tp>(0));\r\n\r\n  template<typename>\r\n    struct remove_all_extents;\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_array_known_bounds\r\n    : public false_type\r\n"]
[81.277177, "o", "    { };\r\n\r\n  template<typename _Tp, size_t _Size>\r\n    struct __is_array_known_bounds<_Tp[_Size]>\r\n    : public true_type\r\n    { };\r\n\r\n  template<typename _Tp>\r\n    struct __is_array_unknown_bounds\r\n    : public false_type\r\n"]
[81.277214, "o", "    { };\r\n\r\n  template<typename _Tp>\r\n    struct __is_array_unknown_bounds<_Tp[]>\r\n    : public true_type\r\n    { };\r\n# 1006 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  struct __do_is_destructible_impl\r\n  {\r\n"]
[81.277254, "o", "    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>\r\n      static true_type __test(int);\r\n\r\n    template<typename>\r\n      static false_type __test(...);\r\n  };\r\n\r\n  template<typename _Tp>\r\n    struct __is_destructible_impl\r\n"]
[81.277299, "o", "    : public __do_is_destructible_impl\r\n    {\r\n      using type = decltype(__test<_Tp>(0));\r\n    };\r\n\r\n  template<typename _Tp,\r\n           bool = __or_<is_void<_Tp>,\r\n                        __is_array_unknown_bounds<_Tp>,\r\n                        is_function<_Tp>>::value,\r\n"]
[81.27734, "o", "           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>\r\n    struct __is_destructible_safe;\r\n\r\n  template<typename _Tp>\r\n    struct __is_destructible_safe<_Tp, false, false>\r\n    : public __is_destructible_impl<typename\r\n               remove_all_extents<_Tp>::type>::type\r\n    { };\r\n\r\n  template<typename _Tp>\r\n"]
[81.277378, "o", "    struct __is_destructible_safe<_Tp, true, false>\r\n    : public false_type { };\r\n\r\n  template<typename _Tp>\r\n    struct __is_destructible_safe<_Tp, false, true>\r\n    : public true_type { };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_destructible\r\n"]
[81.277415, "o", "    : public __is_destructible_safe<_Tp>::type\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.277452, "o", "  struct __do_is_nt_destructible_impl\r\n  {\r\n    template<typename _Tp>\r\n      static __bool_constant<noexcept(declval<_Tp&>().~_Tp())>\r\n      __test(int);\r\n\r\n    template<typename>\r\n      static false_type __test(...);\r\n  };\r\n"]
[81.277492, "o", "\r\n  template<typename _Tp>\r\n    struct __is_nt_destructible_impl\r\n    : public __do_is_nt_destructible_impl\r\n    {\r\n      using type = decltype(__test<_Tp>(0));\r\n    };\r\n\r\n  template<typename _Tp,\r\n"]
[81.279329, "o", "           bool = __or_<is_void<_Tp>,\r\n                        __is_array_unknown_bounds<_Tp>,\r\n                        is_function<_Tp>>::value,\r\n           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>\r\n    struct __is_nt_destructible_safe;\r\n\r\n  template<typename _Tp>\r\n    struct __is_nt_destructible_safe<_Tp, false, false>\r\n    : public __is_nt_destructible_impl<typename\r\n               remove_all_extents<_Tp>::type>::type\r\n    { };\r\n\r\n  template<typename _Tp>\r\n    struct __is_nt_destructible_safe<_Tp, true, false>\r\n    : public false_type { };\r\n\r\n  template<typename _Tp>\r\n    struct __is_nt_destructible_safe<_Tp, false, true>\r\n    : public true_type { };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_nothrow_destructible\r\n    : public __is_nt_destructible_safe<_Tp>::type\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp, typename... _Args>\r\n    using __is_constructible_impl\r\n      = __bool_constant<__is_constructible(_Tp, _Args...)>;\r\n\r\n\r\n\r\n  template<typename _Tp, typename... _Args>\r\n    struct is_constructible\r\n      : public __is_constructible_impl<_Tp, _Args...>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_default_constructible\r\n    : public __is_constructible_impl<_Tp>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp, typename = void>\r\n    struct __add_lvalue_reference_helper\r\n    { using type = _Tp; };\r\n\r\n  template<typename _Tp>\r\n    struct __add_lvalue_reference_helper<_Tp, __void_t<_Tp&>>\r\n    { using type = _Tp&; };\r\n\r\n  template<typename _Tp>\r\n    using __add_lval_ref_t = typename __add_lvalue_reference_helper<_Tp>::type;\r\n\r\n\r\n"]
[81.279566, "o", "\r\n  template<typename _Tp>\r\n    struct is_copy_constructible\r\n    : public __is_constructible_impl<_Tp, __add_lval_ref_t<const _Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp, typename = void>\r\n    struct __add_rvalue_reference_helper\r\n    { using type = _Tp; };\r\n\r\n  template<typename _Tp>\r\n    struct __add_rvalue_reference_helper<_Tp, __void_t<_Tp&&>>\r\n    { using type = _Tp&&; };\r\n\r\n  template<typename _Tp>\r\n    using __add_rval_ref_t = typename __add_rvalue_reference_helper<_Tp>::type;\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_move_constructible\r\n    : public __is_constructible_impl<_Tp, __add_rval_ref_t<_Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp, typename... _Args>\r\n    using __is_nothrow_constructible_impl\r\n      = __bool_constant<__is_nothrow_constructible(_Tp, _Args...)>;\r\n\r\n\r\n\r\n  template<typename _Tp, typename... _Args>\r\n    struct is_nothrow_constructible\r\n    : public __is_nothrow_constructible_impl<_Tp, _Args...>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_nothrow_default_constructible\r\n    : public __is_nothrow_constructible_impl<_Tp>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_nothrow_copy_constructible\r\n    : public __is_nothrow_constructible_impl<_Tp, __add_lval_ref_t<const _Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_nothrow_move_constructible\r\n    : public __is_nothrow_constructible_impl<_Tp, __add_rval_ref_t<_Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    using __is_assignable_impl = __bool_constant<__is_assignable(_Tp, _Up)>;\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    struct is_assignable\r\n    : public __is_assignable_impl<_Tp, _Up>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_copy_assignable\r\n    : public __is_assignable_impl<__add_lval_ref_t<_Tp>,\r\n      __add_lval_ref_t<const _Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_move_assignable\r\n    : public __is_assignable_impl<__add_lval_ref_t<_Tp>, __add_rval_ref_t<_Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    using __is_nothrow_assignable_impl\r\n      = __bool_constant<__is_nothrow_assignable(_Tp, _Up)>;\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    struct is_nothrow_assignable\r\n    : public __is_nothrow_assignable_impl<_Tp, _Up>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_nothrow_copy_assignable\r\n    : public __is_nothrow_assignable_impl<__add_lval_ref_t<_Tp>,\r\n       __add_lval_ref_t<const _Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_nothrow_move_assignable\r\n    : public __is_nothrow_assignable_impl<__add_lval_ref_t<_Tp>,\r\n       __add_rval_ref_t<_Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp, typename... _Args>\r\n    using __is_trivially_constructible_impl\r\n      = __bool_constant<__is_trivially_constructible(_Tp, _Args...)>;\r\n\r\n\r\n\r\n  template<typename _Tp, typename... _Args>\r\n    struct is_trivially_constructible\r\n    : public __is_trivially_constructible_impl<_Tp, _Args...>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_trivially_default_constructible\r\n    : public __is_trivially_constructible_impl<_Tp>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n# 1319 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  struct __do_is_implicitly_default_constructible_impl\r\n  {\r\n    template <typename _Tp>\r\n    static void __helper(const _Tp&);\r\n\r\n    template <typename _Tp>\r\n    static true_type __test(const _Tp&,\r\n                            decltype(__helper<const _Tp&>({}))* = 0);\r\n\r\n    static false_type __test(...);\r\n  };\r\n\r\n  template<typename _Tp>\r\n    struct __is_implicitly_default_constructible_impl\r\n    : public __do_is_implicitly_default_constructible_impl\r\n    {\r\n      using type = decltype(__test(declval<_Tp>()));\r\n    };\r\n\r\n  template<typename _Tp>\r\n    struct __is_implicitly_default_constructible_safe\r\n    : public __is_implicitly_default_constructible_impl<_Tp>::type\r\n    { };\r\n\r\n  template <typename _Tp>\r\n    struct __is_implicitly_default_constructible\r\n    : public __and_<__is_constructible_impl<_Tp>,\r\n      __is_implicitly_default_constructible_safe<_Tp>>::type\r\n    { };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_trivially_copy_constructible\r\n    : public __is_trivially_constructible_impl<_Tp, __add_lval_ref_t<const _Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_trivially_move_constructible\r\n    : public __is_trivially_constructible_impl<_Tp, __add_rval_ref_t<_Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    using __is_trivially_assignable_impl\r\n      = __bool_constant<__is_trivially_assignable(_Tp, _Up)>;\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    struct is_trivially_assignable\r\n    : public __is_trivially_assignable_impl<_Tp, _Up>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_trivially_copy_assignable\r\n    : public __is_trivially_assignable_impl<__add_lval_ref_t<_Tp>,\r\n         __add_lval_ref_t<const _Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_trivially_move_assignable\r\n    : public __is_trivially_assignable_impl<__add_lval_ref_t<_Tp>,\r\n         __add_rval_ref_t<_Tp>>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_trivially_destructible\r\n    : public __and_<__is_destructible_safe<_Tp>,\r\n      __bool_constant<__has_trivial_destructor(_Tp)>>::type\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct has_virtual_destructor\r\n    : public __bool_constant<__has_virtual_destructor(_Tp)>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct alignment_of\r\n    : public integral_constant<std::size_t, alignof(_Tp)>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename>\r\n    struct rank\r\n    : public integral_constant<std::size_t, 0> { };\r\n\r\n  template<typename _Tp, std::size_t _Size>\r\n    struct rank<_Tp[_Size]>\r\n    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };\r\n\r\n  template<typename _Tp>\r\n    struct rank<_Tp[]>\r\n    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };\r\n\r\n\r\n  template<typename, unsigned _Uint = 0>\r\n    struct extent\r\n    : public integral_constant<size_t, 0> { };\r\n\r\n  template<typename _Tp, size_t _Size>\r\n    struct extent<_Tp[_Size], 0>\r\n    : public integral_constant<size_t, _Size> { };\r\n\r\n  template<typename _Tp, unsigned _Uint, size_t _Size>\r\n    struct extent<_Tp[_Size], _Uint>\r\n    : public extent<_Tp, _Uint - 1>::type { };\r\n\r\n  template<typename _Tp>\r\n    struct extent<_Tp[], 0>\r\n    : public integral_constant<size_t, 0> { };\r\n\r\n  template<typename _Tp, unsigned _Uint>\r\n    struct extent<_Tp[], _Uint>\r\n    : public extent<_Tp, _Uint - 1>::type { };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    struct is_same\r\n    : public __bool_constant<__is_same(_Tp, _Up)>\r\n    { };\r\n# 1491 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Base, typename _Derived>\r\n    struct is_base_of\r\n    : public __bool_constant<__is_base_of(_Base, _Derived)>\r\n    { };\r\n\r\n\r\n  template<typename _From, typename _To>\r\n    struct is_convertible\r\n    : public __bool_constant<__is_convertible(_From, _To)>\r\n    { };\r\n# 1540 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _ToElementType, typename _FromElementType>\r\n    using __is_array_convertible\r\n      = is_convertible<_FromElementType(*)[], _ToElementType(*)[]>;\r\n# 1603 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp>\r\n    struct remove_const\r\n    { using type = _Tp; };\r\n\r\n  template<typename _Tp>\r\n    struct remove_const<_Tp const>\r\n    { using type = _Tp; };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct remove_volatile\r\n    { using type = _Tp; };\r\n\r\n  template<typename _Tp>\r\n    struct remove_volatile<_Tp volatile>\r\n    { using type = _Tp; };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct remove_cv\r\n    { using type = __remove_cv(_Tp); };\r\n# 1644 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp>\r\n    struct add_const\r\n    { using type = _Tp const; };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct add_volatile\r\n    { using type = _Tp volatile; };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct add_cv\r\n    { using type = _Tp const volatile; };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    using remove_const_t = typename remove_const<_Tp>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using remove_volatile_t = typename remove_volatile<_Tp>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using remove_cv_t = typename remove_cv<_Tp>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using add_const_t = typename add_const<_Tp>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using add_volatile_t = typename add_volatile<_Tp>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using add_cv_t = typename add_cv<_Tp>::type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct remove_reference\r\n    { using type = __remove_reference(_Tp); };\r\n# 1706 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp>\r\n    struct add_lvalue_reference\r\n    { using type = __add_lval_ref_t<_Tp>; };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct add_rvalue_reference\r\n    { using type = __add_rval_ref_t<_Tp>; };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    using remove_reference_t = typename remove_reference<_Tp>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Unqualified, bool _IsConst, bool _IsVol>\r\n    struct __cv_selector;\r\n\r\n  template<typename _Unqualified>\r\n    struct __cv_selector<_Unqualified, false, false>\r\n    { using __type = _Unqualified; };\r\n\r\n  template<typename _Unqualified>\r\n    struct __cv_selector<_Unqualified, false, true>\r\n    { using __type = volatile _Unqualified; };\r\n\r\n  template<typename _Unqualified>\r\n    struct __cv_selector<_Unqualified, true, false>\r\n    { using __type = const _Unqualified; };\r\n\r\n  template<typename _Unqualified>\r\n    struct __cv_selector<_Unqualified, true, true>\r\n    { using __type = const volatile _Unqualified; };\r\n\r\n  template<typename _Qualified, typename _Unqualified,\r\n    bool _IsConst = is_const<_Qualified>::value,\r\n    bool _IsVol = is_volatile<_Qualified>::value>\r\n    class __match_cv_qualifiers\r\n    {\r\n      using __match = __cv_selector<_Unqualified, _IsConst, _IsVol>;\r\n\r\n    public:\r\n      using __type = typename __match::__type;\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __make_unsigned\r\n    { using __type = _Tp; };\r\n\r\n  template<>\r\n    struct __make_unsigned<char>\r\n    { using __type = unsigned char; };\r\n\r\n  template<>\r\n    struct __make_unsigned<signed char>\r\n    { using __type = unsigned char; };\r\n\r\n  template<>\r\n    struct __make_unsigned<short>\r\n    { using __type = unsigned short; };\r\n\r\n  template<>\r\n    struct __make_unsigned<int>\r\n    { using __type = unsigned int; };\r\n\r\n  template<>\r\n    struct __make_unsigned<long>\r\n    { using __type = unsigned long; };\r\n\r\n  template<>\r\n    struct __make_unsigned<long long>\r\n    { using __type = unsigned long long; };\r\n\r\n\r\n  __extension__\r\n  template<>\r\n    struct __make_unsigned<__int128>\r\n    { using __type = unsigned __int128; };\r\n# 1819 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp,\r\n    bool _IsInt = is_integral<_Tp>::value,\r\n    bool _IsEnum = __is_enum(_Tp)>\r\n    class __make_unsigned_selector;\r\n\r\n  template<typename _Tp>\r\n    class __make_unsigned_selector<_Tp, true, false>\r\n    {\r\n      using __unsigned_type\r\n = typename __make_unsigned<__remove_cv_t<_Tp>>::__type;\r\n\r\n    public:\r\n      using __type\r\n = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;\r\n    };\r\n\r\n  class __make_unsigned_selector_base\r\n  {\r\n  protected:\r\n    template<typename...> struct _List { };\r\n\r\n    template<typename _Tp, typename... _Up>\r\n      struct _List<_Tp, _Up...> : _List<_Up...>\r\n      { static constexpr size_t __size = sizeof(_Tp); };\r\n\r\n    template<size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>\r\n      struct __select;\r\n\r\n    template<size_t _Sz, typename _Uint, typename... _UInts>\r\n      struct __select<_Sz, _List<_Uint, _UInts...>, true>\r\n      { using __type = _Uint; };\r\n\r\n    template<size_t _Sz, typename _Uint, typename... _UInts>\r\n      struct __select<_Sz, _List<_Uint, _UInts...>, false>\r\n      : __select<_Sz, _List<_UInts...>>\r\n      { };\r\n  };\r\n\r\n\r\n  template<typename _Tp>\r\n    class __make_unsigned_selector<_Tp, false, true>\r\n    : __make_unsigned_selector_base\r\n    {\r\n\r\n      using _UInts = _List<unsigned char, unsigned short, unsigned int,\r\n      unsigned long, unsigned long long>;\r\n\r\n      using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;\r\n\r\n    public:\r\n      using __type\r\n = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  template<>\r\n    struct __make_unsigned<wchar_t>\r\n    {\r\n      using __type\r\n = typename __make_unsigned_selector<wchar_t, false, true>::__type;\r\n    };\r\n# 1893 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<>\r\n    struct __make_unsigned<char16_t>\r\n    {\r\n      using __type\r\n = typename __make_unsigned_selector<char16_t, false, true>::__type;\r\n    };\r\n\r\n  template<>\r\n    struct __make_unsigned<char32_t>\r\n    {\r\n      using __type\r\n = typename __make_unsigned_selector<char32_t, false, true>::__type;\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct make_unsigned\r\n    { using type = typename __make_unsigned_selector<_Tp>::__type; };\r\n\r\n\r\n  template<> struct make_unsigned<bool>;\r\n  template<> struct make_unsigned<bool const>;\r\n  template<> struct make_unsigned<bool volatile>;\r\n  template<> struct make_unsigned<bool const volatile>;\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __make_signed\r\n    { using __type = _Tp; };\r\n\r\n  template<>\r\n    struct __make_signed<char>\r\n    { using __type = signed char; };\r\n\r\n  template<>\r\n    struct __make_signed<unsigned char>\r\n    { using __type = signed char; };\r\n\r\n  template<>\r\n    struct __make_signed<unsigned short>\r\n    { using __type = signed short; };\r\n\r\n  template<>\r\n    struct __make_signed<unsigned int>\r\n    { using __type = signed int; };\r\n\r\n  template<>\r\n    struct __make_signed<unsigned long>\r\n    { using __type = signed long; };\r\n\r\n  template<>\r\n    struct __make_signed<unsigned long long>\r\n    { using __type = signed long long; };\r\n\r\n\r\n  __extension__\r\n  template<>\r\n"]
[81.279687, "o", "    struct __make_signed<unsigned __int128>\r\n    { using __type = __int128; };\r\n# 1979 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp,\r\n    bool _IsInt = is_integral<_Tp>::value,\r\n    bool _IsEnum = __is_enum(_Tp)>\r\n    class __make_signed_selector;\r\n\r\n  template<typename _Tp>\r\n    class __make_signed_selector<_Tp, true, false>\r\n    {\r\n      using __signed_type\r\n = typename __make_signed<__remove_cv_t<_Tp>>::__type;\r\n\r\n    public:\r\n      using __type\r\n = typename __match_cv_qualifiers<_Tp, __signed_type>::__type;\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    class __make_signed_selector<_Tp, false, true>\r\n    {\r\n      using __unsigned_type = typename __make_unsigned_selector<_Tp>::__type;\r\n\r\n    public:\r\n      using __type = typename __make_signed_selector<__unsigned_type>::__type;\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  template<>\r\n    struct __make_signed<wchar_t>\r\n    {\r\n      using __type\r\n = typename __make_signed_selector<wchar_t, false, true>::__type;\r\n    };\r\n# 2025 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<>\r\n    struct __make_signed<char16_t>\r\n    {\r\n      using __type\r\n = typename __make_signed_selector<char16_t, false, true>::__type;\r\n    };\r\n\r\n  template<>\r\n    struct __make_signed<char32_t>\r\n    {\r\n      using __type\r\n = typename __make_signed_selector<char32_t, false, true>::__type;\r\n    };\r\n\r\n"]
[81.279768, "o", "\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct make_signed\r\n    { using type = typename __make_signed_selector<_Tp>::__type; };\r\n\r\n\r\n  template<> struct make_signed<bool>;\r\n  template<> struct make_signed<bool const>;\r\n  template<> struct make_signed<bool volatile>;\r\n  template<> struct make_signed<bool const volatile>;\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    using make_signed_t = typename make_signed<_Tp>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using make_unsigned_t = typename make_unsigned<_Tp>::type;\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.279847, "o", "  template<typename _Tp>\r\n    struct remove_extent\r\n    { using type = _Tp; };\r\n\r\n  template<typename _Tp, std::size_t _Size>\r\n    struct remove_extent<_Tp[_Size]>\r\n    { using type = _Tp; };\r\n\r\n  template<typename _Tp>\r\n    struct remove_extent<_Tp[]>\r\n    { using type = _Tp; };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct remove_all_extents\r\n    { using type = _Tp; };\r\n\r\n  template<typename _Tp, std::size_t _Size>\r\n    struct remove_all_extents<_Tp[_Size]>\r\n"]
[81.279889, "o", "    { using type = typename remove_all_extents<_Tp>::type; };\r\n\r\n  template<typename _Tp>\r\n    struct remove_all_extents<_Tp[]>\r\n    { using type = typename remove_all_extents<_Tp>::type; };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    using remove_extent_t = typename remove_extent<_Tp>::type;\r\n\r\n\r\n"]
[81.279928, "o", "  template<typename _Tp>\r\n    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct remove_pointer\r\n"]
[81.279967, "o", "    { using type = __remove_pointer(_Tp); };\r\n# 2124 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Tp, typename = void>\r\n    struct __add_pointer_helper\r\n    { using type = _Tp; };\r\n\r\n"]
[81.280013, "o", "  template<typename _Tp>\r\n    struct __add_pointer_helper<_Tp, __void_t<_Tp*>>\r\n    { using type = _Tp*; };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct add_pointer\r\n    : public __add_pointer_helper<_Tp>\r\n    { };\r\n\r\n  template<typename _Tp>\r\n"]
[81.280053, "o", "    struct add_pointer<_Tp&>\r\n    { using type = _Tp*; };\r\n\r\n  template<typename _Tp>\r\n    struct add_pointer<_Tp&&>\r\n    { using type = _Tp*; };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.280096, "o", "    using remove_pointer_t = typename remove_pointer<_Tp>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using add_pointer_t = typename add_pointer<_Tp>::type;\r\n\r\n\r\n  template<std::size_t _Len>\r\n    struct __aligned_storage_msa\r\n    {\r\n      union __type\r\n      {\r\n"]
[81.280135, "o", " unsigned char __data[_Len];\r\n struct __attribute__((__aligned__)) { } __align;\r\n      };\r\n    };\r\n# 2179 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<std::size_t _Len, std::size_t _Align =\r\n    __alignof__(typename __aligned_storage_msa<_Len>::__type)>\r\n    struct\r\n"]
[81.280171, "o", "   \r\n    aligned_storage\r\n    {\r\n      union type\r\n      {\r\n unsigned char __data[_Len];\r\n struct __attribute__((__aligned__((_Align)))) { } __align;\r\n      };\r\n    };\r\n\r\n"]
[81.280209, "o", "  template <typename... _Types>\r\n    struct __strictest_alignment\r\n    {\r\n      static const size_t _S_alignment = 0;\r\n      static const size_t _S_size = 0;\r\n    };\r\n\r\n  template <typename _Tp, typename... _Types>\r\n    struct __strictest_alignment<_Tp, _Types...>\r\n"]
[81.280247, "o", "    {\r\n      static const size_t _S_alignment =\r\n        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment\r\n ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;\r\n      static const size_t _S_size =\r\n        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size\r\n"]
[81.280287, "o", " ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;\r\n    };\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n"]
[81.280334, "o", "# 2225 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template <size_t _Len, typename... _Types>\r\n    struct\r\n"]
[81.280376, "o", "   \r\n    aligned_union\r\n    {\r\n    private:\r\n      static_assert(sizeof...(_Types) != 0, \"At least one type is required\");\r\n\r\n      using __strictest = __strictest_alignment<_Types...>;\r\n      static const size_t _S_len = _Len > __strictest::_S_size\r\n ? _Len : __strictest::_S_size;\r\n    public:\r\n\r\n"]
[81.280414, "o", "      static const size_t alignment_value = __strictest::_S_alignment;\r\n\r\n      using type = typename aligned_storage<_S_len, alignment_value>::type;\r\n    };\r\n\r\n  template <size_t _Len, typename... _Types>\r\n    const size_t aligned_union<_Len, _Types...>::alignment_value;\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n"]
[81.280451, "o", "\r\n\r\n\r\n  template<typename _Up>\r\n    struct __decay_selector\r\n    : __conditional_t<is_const<const _Up>::value,\r\n        remove_cv<_Up>,\r\n        add_pointer<_Up>>\r\n    { };\r\n\r\n"]
[81.280489, "o", "  template<typename _Up, size_t _Nm>\r\n    struct __decay_selector<_Up[_Nm]>\r\n    { using type = _Up*; };\r\n\r\n  template<typename _Up>\r\n    struct __decay_selector<_Up[]>\r\n    { using type = _Up*; };\r\n\r\n\r\n\r\n"]
[81.280528, "o", "\r\n  template<typename _Tp>\r\n    struct decay\r\n    { using type = typename __decay_selector<_Tp>::type; };\r\n\r\n  template<typename _Tp>\r\n    struct decay<_Tp&>\r\n    { using type = typename __decay_selector<_Tp>::type; };\r\n"]
[81.280568, "o", "\r\n  template<typename _Tp>\r\n    struct decay<_Tp&&>\r\n    { using type = typename __decay_selector<_Tp>::type; };\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __strip_reference_wrapper\r\n    {\r\n"]
[81.280612, "o", "      using __type = _Tp;\r\n    };\r\n\r\n  template<typename _Tp>\r\n    struct __strip_reference_wrapper<reference_wrapper<_Tp> >\r\n    {\r\n      using __type = _Tp&;\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.280654, "o", "    using __decay_t = typename decay<_Tp>::type;\r\n\r\n  template<typename _Tp>\r\n    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;\r\n\r\n\r\n\r\n\r\n\r\n  template<typename... _Cond>\r\n    using _Require = __enable_if_t<__and_<_Cond...>::value>;\r\n\r\n\r\n"]
[81.280691, "o", "  template<typename _Tp>\r\n    using __remove_cvref_t\r\n     = typename remove_cv<typename remove_reference<_Tp>::type>::type;\r\n\r\n\r\n\r\n\r\n  template<bool _Cond, typename _Iftrue, typename _Iffalse>\r\n    struct conditional\r\n    { using type = _Iftrue; };\r\n"]
[81.280728, "o", "\r\n\r\n  template<typename _Iftrue, typename _Iffalse>\r\n    struct conditional<false, _Iftrue, _Iffalse>\r\n    { using type = _Iffalse; };\r\n\r\n\r\n  template<typename... _Tp>\r\n    struct common_type;\r\n# 2340 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n"]
[81.280765, "o", "  template<typename _Tp>\r\n    struct __success_type\r\n    { using type = _Tp; };\r\n\r\n  struct __failure_type\r\n  { };\r\n\r\n  struct __do_common_type_impl\r\n  {\r\n    template<typename _Tp, typename _Up>\r\n"]
[81.280802, "o", "      using __cond_t\r\n = decltype(true ? std::declval<_Tp>() : std::declval<_Up>());\r\n\r\n\r\n\r\n    template<typename _Tp, typename _Up>\r\n      static __success_type<__decay_t<__cond_t<_Tp, _Up>>>\r\n"]
[81.280843, "o", "      _S_test(int);\r\n# 2367 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n    template<typename, typename>\r\n      static __failure_type\r\n      _S_test_2(...);\r\n\r\n    template<typename _Tp, typename _Up>\r\n      static decltype(_S_test_2<_Tp, _Up>(0))\r\n"]
[81.280899, "o", "      _S_test(...);\r\n  };\r\n\r\n\r\n  template<>\r\n    struct common_type<>\r\n    { };\r\n\r\n"]
[81.280939, "o", "\r\n  template<typename _Tp0>\r\n    struct common_type<_Tp0>\r\n    : public common_type<_Tp0, _Tp0>\r\n    { };\r\n\r\n\r\n"]
[81.280976, "o", "  template<typename _Tp1, typename _Tp2,\r\n    typename _Dp1 = __decay_t<_Tp1>, typename _Dp2 = __decay_t<_Tp2>>\r\n    struct __common_type_impl\r\n    {\r\n\r\n\r\n      using type = common_type<_Dp1, _Dp2>;\r\n    };\r\n\r\n"]
[81.281014, "o", "  template<typename _Tp1, typename _Tp2>\r\n    struct __common_type_impl<_Tp1, _Tp2, _Tp1, _Tp2>\r\n    : private __do_common_type_impl\r\n    {\r\n\r\n\r\n      using type = decltype(_S_test<_Tp1, _Tp2>(0));\r\n    };\r\n\r\n\r\n"]
[81.281051, "o", "  template<typename _Tp1, typename _Tp2>\r\n    struct common_type<_Tp1, _Tp2>\r\n    : public __common_type_impl<_Tp1, _Tp2>::type\r\n    { };\r\n\r\n  template<typename...>\r\n    struct __common_type_pack\r\n    { };\r\n\r\n  template<typename, typename, typename = void>\r\n"]
[81.281089, "o", "    struct __common_type_fold;\r\n\r\n\r\n  template<typename _Tp1, typename _Tp2, typename... _Rp>\r\n    struct common_type<_Tp1, _Tp2, _Rp...>\r\n    : public __common_type_fold<common_type<_Tp1, _Tp2>,\r\n    __common_type_pack<_Rp...>>\r\n    { };\r\n\r\n"]
[81.28113, "o", "\r\n\r\n\r\n  template<typename _CTp, typename... _Rp>\r\n    struct __common_type_fold<_CTp, __common_type_pack<_Rp...>,\r\n         __void_t<typename _CTp::type>>\r\n    : public common_type<typename _CTp::type, _Rp...>\r\n    { };\r\n\r\n\r\n"]
[81.281177, "o", "  template<typename _CTp, typename _Rp>\r\n    struct __common_type_fold<_CTp, _Rp, void>\r\n    { };\r\n\r\n  template<typename _Tp, bool = __is_enum(_Tp)>\r\n    struct __underlying_type_impl\r\n    {\r\n      using type = __underlying_type(_Tp);\r\n    };\r\n\r\n  template<typename _Tp>\r\n"]
[81.281217, "o", "    struct __underlying_type_impl<_Tp, false>\r\n    { };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct underlying_type\r\n    : public __underlying_type_impl<_Tp>\r\n    { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __declval_protector\r\n"]
[81.281256, "o", "    {\r\n      static const bool __stop = false;\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    auto declval() noexcept -> decltype(__declval<_Tp>(0))\r\n    {\r\n"]
[81.281293, "o", "      static_assert(__declval_protector<_Tp>::__stop,\r\n      \"declval() must not be used!\");\r\n      return __declval<_Tp>(0);\r\n    }\r\n\r\n\r\n  template<typename _Signature>\r\n    struct result_of;\r\n\r\n\r\n\r\n\r\n"]
[81.281331, "o", "  struct __invoke_memfun_ref { };\r\n  struct __invoke_memfun_deref { };\r\n  struct __invoke_memobj_ref { };\r\n  struct __invoke_memobj_deref { };\r\n  struct __invoke_other { };\r\n\r\n\r\n  template<typename _Tp, typename _Tag>\r\n    struct __result_of_success : __success_type<_Tp>\r\n"]
[81.281368, "o", "    { using __invoke_type = _Tag; };\r\n\r\n\r\n  struct __result_of_memfun_ref_impl\r\n  {\r\n    template<typename _Fp, typename _Tp1, typename... _Args>\r\n      static __result_of_success<decltype(\r\n"]
[81.281409, "o", "      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)\r\n      ), __invoke_memfun_ref> _S_test(int);\r\n\r\n    template<typename...>\r\n      static __failure_type _S_test(...);\r\n  };\r\n\r\n  template<typename _MemPtr, typename _Arg, typename... _Args>\r\n    struct __result_of_memfun_ref\r\n"]
[81.281453, "o", "    : private __result_of_memfun_ref_impl\r\n    {\r\n      using type = decltype(_S_test<_MemPtr, _Arg, _Args...>(0));\r\n    };\r\n\r\n\r\n  struct __result_of_memfun_deref_impl\r\n  {\r\n    template<typename _Fp, typename _Tp1, typename... _Args>\r\n      static __result_of_success<decltype(\r\n"]
[81.281495, "o", "      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)\r\n      ), __invoke_memfun_deref> _S_test(int);\r\n\r\n    template<typename...>\r\n      static __failure_type _S_test(...);\r\n  };\r\n\r\n  template<typename _MemPtr, typename _Arg, typename... _Args>\r\n    struct __result_of_memfun_deref\r\n"]
[81.281534, "o", "    : private __result_of_memfun_deref_impl\r\n    {\r\n      using type = decltype(_S_test<_MemPtr, _Arg, _Args...>(0));\r\n    };\r\n\r\n\r\n  struct __result_of_memobj_ref_impl\r\n  {\r\n    template<typename _Fp, typename _Tp1>\r\n      static __result_of_success<decltype(\r\n"]
[81.281571, "o", "      std::declval<_Tp1>().*std::declval<_Fp>()\r\n      ), __invoke_memobj_ref> _S_test(int);\r\n\r\n    template<typename, typename>\r\n      static __failure_type _S_test(...);\r\n  };\r\n\r\n  template<typename _MemPtr, typename _Arg>\r\n    struct __result_of_memobj_ref\r\n    : private __result_of_memobj_ref_impl\r\n"]
[81.281611, "o", "    {\r\n      using type = decltype(_S_test<_MemPtr, _Arg>(0));\r\n    };\r\n\r\n\r\n  struct __result_of_memobj_deref_impl\r\n  {\r\n    template<typename _Fp, typename _Tp1>\r\n      static __result_of_success<decltype(\r\n"]
[81.28165, "o", "      (*std::declval<_Tp1>()).*std::declval<_Fp>()\r\n      ), __invoke_memobj_deref> _S_test(int);\r\n\r\n    template<typename, typename>\r\n      static __failure_type _S_test(...);\r\n  };\r\n\r\n  template<typename _MemPtr, typename _Arg>\r\n    struct __result_of_memobj_deref\r\n"]
[81.28169, "o", "    : private __result_of_memobj_deref_impl\r\n    {\r\n      using type = decltype(_S_test<_MemPtr, _Arg>(0));\r\n    };\r\n\r\n  template<typename _MemPtr, typename _Arg>\r\n    struct __result_of_memobj;\r\n\r\n  template<typename _Res, typename _Class, typename _Arg>\r\n"]
[81.281734, "o", "    struct __result_of_memobj<_Res _Class::*, _Arg>\r\n    {\r\n      using _Argval = __remove_cvref_t<_Arg>;\r\n      using _MemPtr = _Res _Class::*;\r\n      using type = typename __conditional_t<__or_<is_same<_Argval, _Class>,\r\n        is_base_of<_Class, _Argval>>::value,\r\n        __result_of_memobj_ref<_MemPtr, _Arg>,\r\n"]
[81.281777, "o", "        __result_of_memobj_deref<_MemPtr, _Arg>\r\n      >::type;\r\n    };\r\n\r\n  template<typename _MemPtr, typename _Arg, typename... _Args>\r\n    struct __result_of_memfun;\r\n\r\n  template<typename _Res, typename _Class, typename _Arg, typename... _Args>\r\n    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>\r\n    {\r\n"]
[81.281816, "o", "      using _Argval = typename remove_reference<_Arg>::type;\r\n      using _MemPtr = _Res _Class::*;\r\n      using type = typename __conditional_t<is_base_of<_Class, _Argval>::value,\r\n        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,\r\n        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>\r\n      >::type;\r\n    };\r\n\r\n\r\n\r\n"]
[81.281852, "o", "\r\n\r\n\r\n  template<typename _Tp, typename _Up = __remove_cvref_t<_Tp>>\r\n    struct __inv_unwrap\r\n    {\r\n      using type = _Tp;\r\n    };\r\n\r\n  template<typename _Tp, typename _Up>\r\n"]
[81.28189, "o", "    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>\r\n    {\r\n      using type = _Up&;\r\n    };\r\n\r\n  template<bool, bool, typename _Functor, typename... _ArgTypes>\r\n    struct __result_of_impl\r\n    {\r\n      using type = __failure_type;\r\n"]
[81.281927, "o", "    };\r\n\r\n  template<typename _MemPtr, typename _Arg>\r\n    struct __result_of_impl<true, false, _MemPtr, _Arg>\r\n    : public __result_of_memobj<__decay_t<_MemPtr>,\r\n    typename __inv_unwrap<_Arg>::type>\r\n    { };\r\n\r\n"]
[81.281968, "o", "  template<typename _MemPtr, typename _Arg, typename... _Args>\r\n    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>\r\n    : public __result_of_memfun<__decay_t<_MemPtr>,\r\n    typename __inv_unwrap<_Arg>::type, _Args...>\r\n    { };\r\n\r\n\r\n  struct __result_of_other_impl\r\n  {\r\n"]
[81.282012, "o", "    template<typename _Fn, typename... _Args>\r\n      static __result_of_success<decltype(\r\n      std::declval<_Fn>()(std::declval<_Args>()...)\r\n      ), __invoke_other> _S_test(int);\r\n\r\n    template<typename...>\r\n      static __failure_type _S_test(...);\r\n  };\r\n\r\n"]
[81.282055, "o", "  template<typename _Functor, typename... _ArgTypes>\r\n    struct __result_of_impl<false, false, _Functor, _ArgTypes...>\r\n    : private __result_of_other_impl\r\n    {\r\n      using type = decltype(_S_test<_Functor, _ArgTypes...>(0));\r\n    };\r\n\r\n\r\n  template<typename _Functor, typename... _ArgTypes>\r\n    struct __invoke_result\r\n"]
[81.282095, "o", "    : public __result_of_impl<\r\n        is_member_object_pointer<\r\n          typename remove_reference<_Functor>::type\r\n        >::value,\r\n        is_member_function_pointer<\r\n          typename remove_reference<_Functor>::type\r\n        >::value,\r\n _Functor, _ArgTypes...\r\n      >::type\r\n    { };\r\n\r\n"]
[81.282132, "o", "\r\n  template<typename _Fn, typename... _Args>\r\n    using __invoke_result_t = typename __invoke_result<_Fn, _Args...>::type;\r\n\r\n\r\n  template<typename _Functor, typename... _ArgTypes>\r\n    struct result_of<_Functor(_ArgTypes...)>\r\n    : public __invoke_result<_Functor, _ArgTypes...>\r\n"]
[81.28217, "o", "    { } __attribute__ ((__deprecated__ (\"use '\" \"std::invoke_result\" \"' instead\")));\r\n\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n"]
[81.282206, "o", "\r\n  template<size_t _Len, size_t _Align =\r\n     __alignof__(typename __aligned_storage_msa<_Len>::__type)>\r\n    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;\r\n\r\n"]
[81.282246, "o", "  template <size_t _Len, typename... _Types>\r\n    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n  template<typename _Tp>\r\n    using decay_t = typename decay<_Tp>::type;\r\n\r\n\r\n"]
[81.28229, "o", "  template<bool _Cond, typename _Tp = void>\r\n    using enable_if_t = typename enable_if<_Cond, _Tp>::type;\r\n\r\n\r\n  template<bool _Cond, typename _Iftrue, typename _Iffalse>\r\n    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;\r\n\r\n\r\n"]
[81.282331, "o", "  template<typename... _Tp>\r\n    using common_type_t = typename common_type<_Tp...>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using underlying_type_t = typename underlying_type<_Tp>::type;\r\n\r\n\r\n  template<typename _Tp>\r\n    using result_of_t = typename result_of<_Tp>::type;\r\n\r\n\r\n"]
[81.282369, "o", "\r\n\r\n  template<typename...> using void_t = void;\r\n# 2744 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n"]
[81.282408, "o", "  template<typename _Default, typename _AlwaysVoid,\r\n    template<typename...> class _Op, typename... _Args>\r\n    struct __detector\r\n    {\r\n      using type = _Default;\r\n      using __is_detected = false_type;\r\n    };\r\n\r\n\r\n  template<typename _Default, template<typename...> class _Op,\r\n"]
[81.282445, "o", "     typename... _Args>\r\n    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>\r\n    {\r\n      using type = _Op<_Args...>;\r\n      using __is_detected = true_type;\r\n    };\r\n\r\n  template<typename _Default, template<typename...> class _Op,\r\n"]
[81.282483, "o", "    typename... _Args>\r\n    using __detected_or = __detector<_Default, void, _Op, _Args...>;\r\n\r\n\r\n\r\n  template<typename _Default, template<typename...> class _Op,\r\n    typename... _Args>\r\n    using __detected_or_t\r\n"]
[81.282525, "o", "      = typename __detected_or<_Default, _Op, _Args...>::type;\r\n# 2786 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template <typename _Tp>\r\n    struct __is_swappable;\r\n\r\n  template <typename _Tp>\r\n    struct __is_nothrow_swappable;\r\n"]
[81.28257, "o", "\r\n  template<typename>\r\n    struct __is_tuple_like_impl : false_type\r\n    { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_tuple_like\r\n    : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type\r\n    { };\r\n\r\n\r\n"]
[81.28261, "o", "  template<typename _Tp>\r\n   \r\n    inline\r\n    _Require<__not_<__is_tuple_like<_Tp>>,\r\n      is_move_constructible<_Tp>,\r\n      is_move_assignable<_Tp>>\r\n    swap(_Tp&, _Tp&)\r\n    noexcept(__and_<is_nothrow_move_constructible<_Tp>,\r\n             is_nothrow_move_assignable<_Tp>>::value);\r\n\r\n"]
[81.282649, "o", "  template<typename _Tp, size_t _Nm>\r\n   \r\n    inline\r\n    __enable_if_t<__is_swappable<_Tp>::value>\r\n    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\r\n    noexcept(__is_nothrow_swappable<_Tp>::value);\r\n\r\n\r\n  namespace __swappable_details {\r\n"]
[81.282687, "o", "    using std::swap;\r\n\r\n    struct __do_is_swappable_impl\r\n    {\r\n      template<typename _Tp, typename\r\n               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>\r\n        static true_type __test(int);\r\n\r\n      template<typename>\r\n"]
[81.282726, "o", "        static false_type __test(...);\r\n    };\r\n\r\n    struct __do_is_nothrow_swappable_impl\r\n    {\r\n      template<typename _Tp>\r\n        static __bool_constant<\r\n          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))\r\n        > __test(int);\r\n\r\n"]
[81.282763, "o", "      template<typename>\r\n        static false_type __test(...);\r\n    };\r\n\r\n  }\r\n\r\n  template<typename _Tp>\r\n    struct __is_swappable_impl\r\n    : public __swappable_details::__do_is_swappable_impl\r\n    {\r\n"]
[81.282802, "o", "      using type = decltype(__test<_Tp>(0));\r\n    };\r\n\r\n  template<typename _Tp>\r\n    struct __is_nothrow_swappable_impl\r\n    : public __swappable_details::__do_is_nothrow_swappable_impl\r\n    {\r\n      using type = decltype(__test<_Tp>(0));\r\n    };\r\n\r\n"]
[81.282846, "o", "  template<typename _Tp>\r\n    struct __is_swappable\r\n    : public __is_swappable_impl<_Tp>::type\r\n    { };\r\n\r\n  template<typename _Tp>\r\n    struct __is_nothrow_swappable\r\n    : public __is_nothrow_swappable_impl<_Tp>::type\r\n    { };\r\n\r\n\r\n"]
[81.282886, "o", "\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_swappable\r\n    : public __is_swappable_impl<_Tp>::type\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n"]
[81.282925, "o", "  template<typename _Tp>\r\n    struct is_nothrow_swappable\r\n    : public __is_nothrow_swappable_impl<_Tp>::type\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n\r\n"]
[81.282963, "o", "  template<typename _Tp>\r\n    inline constexpr bool is_swappable_v =\r\n      is_swappable<_Tp>::value;\r\n\r\n\r\n  template<typename _Tp>\r\n    inline constexpr bool is_nothrow_swappable_v =\r\n      is_nothrow_swappable<_Tp>::value;\r\n\r\n\r\n\r\n"]
[81.282999, "o", "  namespace __swappable_with_details {\r\n    using std::swap;\r\n\r\n    struct __do_is_swappable_with_impl\r\n    {\r\n      template<typename _Tp, typename _Up, typename\r\n"]
[81.283038, "o", "               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),\r\n               typename\r\n               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>\r\n        static true_type __test(int);\r\n\r\n      template<typename, typename>\r\n        static false_type __test(...);\r\n    };\r\n\r\n"]
[81.283078, "o", "    struct __do_is_nothrow_swappable_with_impl\r\n    {\r\n      template<typename _Tp, typename _Up>\r\n        static __bool_constant<\r\n          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))\r\n          &&\r\n          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))\r\n"]
[81.283124, "o", "        > __test(int);\r\n\r\n      template<typename, typename>\r\n        static false_type __test(...);\r\n    };\r\n\r\n  }\r\n\r\n  template<typename _Tp, typename _Up>\r\n    struct __is_swappable_with_impl\r\n    : public __swappable_with_details::__do_is_swappable_with_impl\r\n"]
[81.283166, "o", "    {\r\n      using type = decltype(__test<_Tp, _Up>(0));\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_swappable_with_impl<_Tp&, _Tp&>\r\n    : public __swappable_details::__do_is_swappable_impl\r\n    {\r\n      using type = decltype(__test<_Tp&>(0));\r\n    };\r\n\r\n"]
[81.283205, "o", "  template<typename _Tp, typename _Up>\r\n    struct __is_nothrow_swappable_with_impl\r\n    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl\r\n    {\r\n      using type = decltype(__test<_Tp, _Up>(0));\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.283243, "o", "    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>\r\n    : public __swappable_details::__do_is_nothrow_swappable_impl\r\n    {\r\n      using type = decltype(__test<_Tp&>(0));\r\n    };\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    struct is_swappable_with\r\n"]
[81.28328, "o", "    : public __is_swappable_with_impl<_Tp, _Up>::type\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"first template argument must be a complete class or an unbounded array\");\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Up>{}),\r\n \"second template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n"]
[81.283318, "o", "  template<typename _Tp, typename _Up>\r\n    struct is_nothrow_swappable_with\r\n    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"first template argument must be a complete class or an unbounded array\");\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Up>{}),\r\n"]
[81.28336, "o", " \"second template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    inline constexpr bool is_swappable_with_v =\r\n      is_swappable_with<_Tp, _Up>::value;\r\n\r\n\r\n"]
[81.283405, "o", "  template<typename _Tp, typename _Up>\r\n    inline constexpr bool is_nothrow_swappable_with_v =\r\n      is_nothrow_swappable_with<_Tp, _Up>::value;\r\n# 3008 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n  template<typename _Result, typename _Ret,\r\n    bool = is_void<_Ret>::value, typename = void>\r\n    struct __is_invocable_impl\r\n"]
[81.283445, "o", "    : false_type\r\n    {\r\n      using __nothrow_conv = false_type;\r\n    };\r\n\r\n\r\n  template<typename _Result, typename _Ret>\r\n    struct __is_invocable_impl<_Result, _Ret,\r\n                                true,\r\n          __void_t<typename _Result::type>>\r\n    : true_type\r\n    {\r\n"]
[81.283484, "o", "      using __nothrow_conv = true_type;\r\n    };\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wctor-dtor-privacy\"\r\n\r\n  template<typename _Result, typename _Ret>\r\n"]
[81.283521, "o", "    struct __is_invocable_impl<_Result, _Ret,\r\n                                false,\r\n          __void_t<typename _Result::type>>\r\n    {\r\n    private:\r\n\r\n      using _Res_t = typename _Result::type;\r\n\r\n\r\n\r\n"]
[81.283558, "o", "      static _Res_t _S_get() noexcept;\r\n\r\n\r\n      template<typename _Tp>\r\n static void _S_conv(__type_identity_t<_Tp>) noexcept;\r\n\r\n\r\n      template<typename _Tp,\r\n        bool _Nothrow = noexcept(_S_conv<_Tp>(_S_get())),\r\n"]
[81.283597, "o", "        typename = decltype(_S_conv<_Tp>(_S_get())),\r\n\r\n        bool _Dangle = __reference_converts_from_temporary(_Tp, _Res_t)\r\n\r\n\r\n\r\n       >\r\n"]
[81.283638, "o", " static __bool_constant<_Nothrow && !_Dangle>\r\n _S_test(int);\r\n\r\n      template<typename _Tp, bool = false>\r\n static false_type\r\n _S_test(...);\r\n\r\n    public:\r\n\r\n      using type = decltype(_S_test<_Ret, true>(1));\r\n"]
[81.283683, "o", "\r\n\r\n      using __nothrow_conv = decltype(_S_test<_Ret>(1));\r\n    };\r\n#pragma GCC diagnostic pop\r\n\r\n  template<typename _Fn, typename... _ArgTypes>\r\n    struct __is_invocable\r\n    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type\r\n"]
[81.283725, "o", "    { };\r\n\r\n  template<typename _Fn, typename _Tp, typename... _Args>\r\n    constexpr bool __call_is_nt(__invoke_memfun_ref)\r\n    {\r\n      using _Up = typename __inv_unwrap<_Tp>::type;\r\n      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(\r\n     std::declval<_Args>()...));\r\n    }\r\n\r\n"]
[81.283765, "o", "  template<typename _Fn, typename _Tp, typename... _Args>\r\n    constexpr bool __call_is_nt(__invoke_memfun_deref)\r\n    {\r\n      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(\r\n     std::declval<_Args>()...));\r\n    }\r\n\r\n  template<typename _Fn, typename _Tp>\r\n"]
[81.283802, "o", "    constexpr bool __call_is_nt(__invoke_memobj_ref)\r\n    {\r\n      using _Up = typename __inv_unwrap<_Tp>::type;\r\n      return noexcept(std::declval<_Up>().*std::declval<_Fn>());\r\n    }\r\n\r\n  template<typename _Fn, typename _Tp>\r\n    constexpr bool __call_is_nt(__invoke_memobj_deref)\r\n"]
[81.28384, "o", "    {\r\n      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());\r\n    }\r\n\r\n  template<typename _Fn, typename... _Args>\r\n    constexpr bool __call_is_nt(__invoke_other)\r\n    {\r\n"]
[81.283878, "o", "      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));\r\n    }\r\n\r\n  template<typename _Result, typename _Fn, typename... _Args>\r\n    struct __call_is_nothrow\r\n    : __bool_constant<\r\n std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})\r\n      >\r\n    { };\r\n"]
[81.283917, "o", "\r\n  template<typename _Fn, typename... _Args>\r\n    using __call_is_nothrow_\r\n      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;\r\n\r\n\r\n  template<typename _Fn, typename... _Args>\r\n    struct __is_nothrow_invocable\r\n"]
[81.283961, "o", "    : __and_<__is_invocable<_Fn, _Args...>,\r\n             __call_is_nothrow_<_Fn, _Args...>>::type\r\n    { };\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wctor-dtor-privacy\"\r\n  struct __nonesuchbase {};\r\n"]
[81.284002, "o", "  struct __nonesuch : private __nonesuchbase {\r\n    ~__nonesuch() = delete;\r\n    __nonesuch(__nonesuch const&) = delete;\r\n    void operator=(__nonesuch const&) = delete;\r\n  };\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n\r\n\r\n"]
[81.284041, "o", "  template<typename _Functor, typename... _ArgTypes>\r\n    struct invoke_result\r\n    : public __invoke_result<_Functor, _ArgTypes...>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Functor>{}),\r\n \"_Functor must be a complete class or an unbounded array\");\r\n      static_assert((std::__is_complete_or_unbounded(\r\n __type_identity<_ArgTypes>{}) && ...),\r\n"]
[81.284082, "o", " \"each argument type must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n  template<typename _Fn, typename... _Args>\r\n    using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;\r\n\r\n\r\n  template<typename _Fn, typename... _ArgTypes>\r\n    struct is_invocable\r\n"]
[81.284119, "o", "    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),\r\n \"_Fn must be a complete class or an unbounded array\");\r\n      static_assert((std::__is_complete_or_unbounded(\r\n __type_identity<_ArgTypes>{}) && ...),\r\n \"each argument type must be a complete class or an unbounded array\");\r\n    };\r\n"]
[81.284156, "o", "\r\n\r\n  template<typename _Ret, typename _Fn, typename... _ArgTypes>\r\n    struct is_invocable_r\r\n    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, _Ret>::type\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),\r\n"]
[81.284204, "o", " \"_Fn must be a complete class or an unbounded array\");\r\n      static_assert((std::__is_complete_or_unbounded(\r\n __type_identity<_ArgTypes>{}) && ...),\r\n \"each argument type must be a complete class or an unbounded array\");\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Ret>{}),\r\n \"_Ret must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n"]
[81.284252, "o", "  template<typename _Fn, typename... _ArgTypes>\r\n    struct is_nothrow_invocable\r\n    : __and_<__is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>,\r\n      __call_is_nothrow_<_Fn, _ArgTypes...>>::type\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),\r\n"]
[81.284295, "o", " \"_Fn must be a complete class or an unbounded array\");\r\n      static_assert((std::__is_complete_or_unbounded(\r\n __type_identity<_ArgTypes>{}) && ...),\r\n \"each argument type must be a complete class or an unbounded array\");\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Result, typename _Ret>\r\n    using __is_nt_invocable_impl\r\n"]
[81.284334, "o", "      = typename __is_invocable_impl<_Result, _Ret>::__nothrow_conv;\r\n\r\n\r\n\r\n  template<typename _Ret, typename _Fn, typename... _ArgTypes>\r\n    struct is_nothrow_invocable_r\r\n    : __and_<__is_nt_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, _Ret>,\r\n             __call_is_nothrow_<_Fn, _ArgTypes...>>::type\r\n    {\r\n"]
[81.284372, "o", "      static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),\r\n \"_Fn must be a complete class or an unbounded array\");\r\n      static_assert((std::__is_complete_or_unbounded(\r\n __type_identity<_ArgTypes>{}) && ...),\r\n \"each argument type must be a complete class or an unbounded array\");\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Ret>{}),\r\n \"_Ret must be a complete class or an unbounded array\");\r\n"]
[81.284408, "o", "    };\r\n# 3236 \"/usr/include/c++/14.2.1/type_traits\" 3\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_void_v = is_void<_Tp>::value;\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_null_pointer_v = is_null_pointer<_Tp>::value;\r\ntemplate <typename _Tp>\r\n"]
[81.284446, "o", "  inline constexpr bool is_integral_v = is_integral<_Tp>::value;\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_floating_point_v = is_floating_point<_Tp>::value;\r\n\r\n\r\n"]
[81.284485, "o", "template <typename _Tp>\r\n  inline constexpr bool is_array_v = __is_array(_Tp);\r\n# 3257 \"/usr/include/c++/14.2.1/type_traits\" 3\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_pointer_v = is_pointer<_Tp>::value;\r\ntemplate <typename _Tp>\r\n"]
[81.284529, "o", "  inline constexpr bool is_lvalue_reference_v = false;\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_lvalue_reference_v<_Tp&> = true;\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_rvalue_reference_v = false;\r\ntemplate <typename _Tp>\r\n"]
[81.284571, "o", "  inline constexpr bool is_rvalue_reference_v<_Tp&&> = true;\r\n\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_member_object_pointer_v =\r\n    __is_member_object_pointer(_Tp);\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.284611, "o", "\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_member_function_pointer_v =\r\n    __is_member_function_pointer(_Tp);\r\n\r\n\r\n\r\n\r\n\r\n\r\ntemplate <typename _Tp>\r\n"]
[81.284649, "o", "  inline constexpr bool is_enum_v = __is_enum(_Tp);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_union_v = __is_union(_Tp);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_class_v = __is_class(_Tp);\r\n\r\n\r\n"]
[81.284686, "o", "\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_reference_v = __is_reference(_Tp);\r\n# 3308 \"/usr/include/c++/14.2.1/type_traits\" 3\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_arithmetic_v = is_arithmetic<_Tp>::value;\r\n"]
[81.284722, "o", "template <typename _Tp>\r\n  inline constexpr bool is_fundamental_v = is_fundamental<_Tp>::value;\r\n\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_object_v = __is_object(_Tp);\r\n\r\n"]
[81.284761, "o", "\r\n\r\n\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_scalar_v = is_scalar<_Tp>::value;\r\ntemplate <typename _Tp>\r\n"]
[81.284804, "o", "  inline constexpr bool is_compound_v = !is_fundamental_v<_Tp>;\r\n\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_member_pointer_v = __is_member_pointer(_Tp);\r\n\r\n\r\n\r\n\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_const_v = false;\r\n"]
[81.284844, "o", "template <typename _Tp>\r\n  inline constexpr bool is_const_v<const _Tp> = true;\r\n\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_function_v = __is_function(_Tp);\r\n"]
[81.284883, "o", "# 3351 \"/usr/include/c++/14.2.1/type_traits\" 3\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_volatile_v = false;\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_volatile_v<volatile _Tp> = true;\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_trivial_v = __is_trivial(_Tp);\r\ntemplate <typename _Tp>\r\n"]
[81.284922, "o", "  inline constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Tp);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_standard_layout_v = __is_standard_layout(_Tp);\r\ntemplate <typename _Tp>\r\n \r\n  inline constexpr bool is_pod_v = __is_pod(_Tp);\r\ntemplate <typename _Tp>\r\n"]
[81.28496, "o", "  [[__deprecated__]]\r\n  inline constexpr bool is_literal_type_v = __is_literal_type(_Tp);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_empty_v = __is_empty(_Tp);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_polymorphic_v = __is_polymorphic(_Tp);\r\ntemplate <typename _Tp>\r\n"]
[81.284998, "o", "  inline constexpr bool is_abstract_v = __is_abstract(_Tp);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_final_v = __is_final(_Tp);\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_signed_v = is_signed<_Tp>::value;\r\ntemplate <typename _Tp>\r\n"]
[81.28504, "o", "  inline constexpr bool is_unsigned_v = is_unsigned<_Tp>::value;\r\n\r\ntemplate <typename _Tp, typename... _Args>\r\n  inline constexpr bool is_constructible_v = __is_constructible(_Tp, _Args...);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);\r\ntemplate <typename _Tp>\r\n"]
[81.285084, "o", "  inline constexpr bool is_copy_constructible_v\r\n    = __is_constructible(_Tp, __add_lval_ref_t<const _Tp>);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_move_constructible_v\r\n    = __is_constructible(_Tp, __add_rval_ref_t<_Tp>);\r\n\r\ntemplate <typename _Tp, typename _Up>\r\n  inline constexpr bool is_assignable_v = __is_assignable(_Tp, _Up);\r\n"]
[81.285125, "o", "template <typename _Tp>\r\n  inline constexpr bool is_copy_assignable_v\r\n    = __is_assignable(__add_lval_ref_t<_Tp>, __add_lval_ref_t<const _Tp>);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_move_assignable_v\r\n    = __is_assignable(__add_lval_ref_t<_Tp>, __add_rval_ref_t<_Tp>);\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_destructible_v = is_destructible<_Tp>::value;\r\n"]
[81.285164, "o", "\r\ntemplate <typename _Tp, typename... _Args>\r\n  inline constexpr bool is_trivially_constructible_v\r\n    = __is_trivially_constructible(_Tp, _Args...);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_trivially_default_constructible_v\r\n    = __is_trivially_constructible(_Tp);\r\ntemplate <typename _Tp>\r\n"]
[81.285201, "o", "  inline constexpr bool is_trivially_copy_constructible_v\r\n    = __is_trivially_constructible(_Tp, __add_lval_ref_t<const _Tp>);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_trivially_move_constructible_v\r\n    = __is_trivially_constructible(_Tp, __add_rval_ref_t<_Tp>);\r\n\r\ntemplate <typename _Tp, typename _Up>\r\n  inline constexpr bool is_trivially_assignable_v\r\n"]
[81.285238, "o", "    = __is_trivially_assignable(_Tp, _Up);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_trivially_copy_assignable_v\r\n    = __is_trivially_assignable(__add_lval_ref_t<_Tp>,\r\n    __add_lval_ref_t<const _Tp>);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_trivially_move_assignable_v\r\n"]
[81.285274, "o", "    = __is_trivially_assignable(__add_lval_ref_t<_Tp>,\r\n    __add_rval_ref_t<_Tp>);\r\n# 3446 \"/usr/include/c++/14.2.1/type_traits\" 3\r\ntemplate <typename _Tp>\r\n"]
[81.285313, "o", "  inline constexpr bool is_trivially_destructible_v =\r\n    is_trivially_destructible<_Tp>::value;\r\n\r\n\r\ntemplate <typename _Tp, typename... _Args>\r\n  inline constexpr bool is_nothrow_constructible_v\r\n    = __is_nothrow_constructible(_Tp, _Args...);\r\ntemplate <typename _Tp>\r\n"]
[81.285355, "o", "  inline constexpr bool is_nothrow_default_constructible_v\r\n    = __is_nothrow_constructible(_Tp);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_nothrow_copy_constructible_v\r\n    = __is_nothrow_constructible(_Tp, __add_lval_ref_t<const _Tp>);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_nothrow_move_constructible_v\r\n    = __is_nothrow_constructible(_Tp, __add_rval_ref_t<_Tp>);\r\n\r\n"]
[81.285395, "o", "template <typename _Tp, typename _Up>\r\n  inline constexpr bool is_nothrow_assignable_v\r\n    = __is_nothrow_assignable(_Tp, _Up);\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_nothrow_copy_assignable_v\r\n    = __is_nothrow_assignable(__add_lval_ref_t<_Tp>,\r\n         __add_lval_ref_t<const _Tp>);\r\ntemplate <typename _Tp>\r\n"]
[81.285434, "o", "  inline constexpr bool is_nothrow_move_assignable_v\r\n    = __is_nothrow_assignable(__add_lval_ref_t<_Tp>, __add_rval_ref_t<_Tp>);\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool is_nothrow_destructible_v =\r\n    is_nothrow_destructible<_Tp>::value;\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr bool has_virtual_destructor_v\r\n"]
[81.28547, "o", "    = __has_virtual_destructor(_Tp);\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr size_t alignment_of_v = alignment_of<_Tp>::value;\r\n\r\ntemplate <typename _Tp>\r\n  inline constexpr size_t rank_v = 0;\r\ntemplate <typename _Tp, size_t _Size>\r\n"]
[81.285506, "o", "  inline constexpr size_t rank_v<_Tp[_Size]> = 1 + rank_v<_Tp>;\r\ntemplate <typename _Tp>\r\n  inline constexpr size_t rank_v<_Tp[]> = 1 + rank_v<_Tp>;\r\n\r\ntemplate <typename _Tp, unsigned _Idx = 0>\r\n  inline constexpr size_t extent_v = 0;\r\ntemplate <typename _Tp, size_t _Size>\r\n"]
[81.285547, "o", "  inline constexpr size_t extent_v<_Tp[_Size], 0> = _Size;\r\ntemplate <typename _Tp, unsigned _Idx, size_t _Size>\r\n  inline constexpr size_t extent_v<_Tp[_Size], _Idx> = extent_v<_Tp, _Idx - 1>;\r\ntemplate <typename _Tp>\r\n  inline constexpr size_t extent_v<_Tp[], 0> = 0;\r\n"]
[81.285586, "o", "template <typename _Tp, unsigned _Idx>\r\n  inline constexpr size_t extent_v<_Tp[], _Idx> = extent_v<_Tp, _Idx - 1>;\r\n\r\n\r\ntemplate <typename _Tp, typename _Up>\r\n"]
[81.285628, "o", "  inline constexpr bool is_same_v = __is_same(_Tp, _Up);\r\n\r\n\r\n\r\n\r\n\r\n\r\ntemplate <typename _Base, typename _Derived>\r\n  inline constexpr bool is_base_of_v = __is_base_of(_Base, _Derived);\r\n"]
[81.285668, "o", "\r\ntemplate <typename _From, typename _To>\r\n  inline constexpr bool is_convertible_v = __is_convertible(_From, _To);\r\n\r\n\r\n\r\n\r\ntemplate<typename _Fn, typename... _Args>\r\n  inline constexpr bool is_invocable_v = is_invocable<_Fn, _Args...>::value;\r\n"]
[81.285706, "o", "template<typename _Fn, typename... _Args>\r\n  inline constexpr bool is_nothrow_invocable_v\r\n    = is_nothrow_invocable<_Fn, _Args...>::value;\r\ntemplate<typename _Ret, typename _Fn, typename... _Args>\r\n  inline constexpr bool is_invocable_r_v\r\n    = is_invocable_r<_Ret, _Fn, _Args...>::value;\r\ntemplate<typename _Ret, typename _Fn, typename... _Args>\r\n"]
[81.285742, "o", "  inline constexpr bool is_nothrow_invocable_r_v\r\n    = is_nothrow_invocable_r<_Ret, _Fn, _Args...>::value;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct has_unique_object_representations\r\n"]
[81.285777, "o", "    : bool_constant<__has_unique_object_representations(\r\n      remove_cv_t<remove_all_extents_t<_Tp>>\r\n      )>\r\n    {\r\n      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\r\n \"template argument must be a complete class or an unbounded array\");\r\n    };\r\n\r\n"]
[81.285814, "o", "\r\n\r\n  template<typename _Tp>\r\n    inline constexpr bool has_unique_object_representations_v\r\n      = has_unique_object_representations<_Tp>::value;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.285855, "o", "  template<typename _Tp>\r\n    struct is_aggregate\r\n    : bool_constant<__is_aggregate(remove_cv_t<_Tp>)>\r\n    { };\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.285898, "o", "  template<typename _Tp>\r\n"]
[81.289334, "o", "    inline constexpr bool is_aggregate_v = __is_aggregate(remove_cv_t<_Tp>);\r\n# 4002 \"/usr/include/c++/14.2.1/type_traits\" 3\r\n\r\n}\r\n# 38 \"/usr/include/c++/14.2.1/bits/move.h\" 2 3\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    inline constexpr _Tp*\r\n    __addressof(_Tp& __r) noexcept\r\n    { return __builtin_addressof(__r); }\r\n# 67 \"/usr/include/c++/14.2.1/bits/move.h\" 3\r\n  template<typename _Tp>\r\n    [[__nodiscard__]]\r\n    constexpr _Tp&&\r\n    forward(typename std::remove_reference<_Tp>::type& __t) noexcept\r\n    { return static_cast<_Tp&&>(__t); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    [[__nodiscard__]]\r\n    constexpr _Tp&&\r\n    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept\r\n    {\r\n      static_assert(!std::is_lvalue_reference<_Tp>::value,\r\n   \"std::forward must not be used to convert an rvalue to an lvalue\");\r\n      return static_cast<_Tp&&>(__t);\r\n    }\r\n# 124 \"/usr/include/c++/14.2.1/bits/move.h\" 3\r\n  template<typename _Tp>\r\n    [[__nodiscard__]]\r\n    constexpr typename std::remove_reference<_Tp>::type&&\r\n    move(_Tp&& __t) noexcept\r\n    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __move_if_noexcept_cond\r\n    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,\r\n                    is_copy_constructible<_Tp>>::type { };\r\n# 144 \"/usr/include/c++/14.2.1/bits/move.h\" 3\r\n  template<typename _Tp>\r\n    [[__nodiscard__]]\r\n    constexpr\r\n    __conditional_t<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>\r\n    move_if_noexcept(_Tp& __x) noexcept\r\n    { return std::move(__x); }\r\n# 160 \"/usr/include/c++/14.2.1/bits/move.h\" 3\r\n  template<typename _Tp>\r\n    [[__nodiscard__]]\r\n    inline constexpr _Tp*\r\n    addressof(_Tp& __r) noexcept\r\n    { return std::__addressof(__r); }\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    const _Tp* addressof(const _Tp&&) = delete;\r\n\r\n\r\n  template <typename _Tp, typename _Up = _Tp>\r\n   \r\n    inline _Tp\r\n    __exchange(_Tp& __obj, _Up&& __new_val)\r\n    {\r\n      _Tp __old_val = std::move(__obj);\r\n      __obj = std::forward<_Up>(__new_val);\r\n      return __old_val;\r\n    }\r\n# 204 \"/usr/include/c++/14.2.1/bits/move.h\" 3\r\n  template<typename _Tp>\r\n   \r\n    inline\r\n\r\n    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,\r\n         is_move_constructible<_Tp>,\r\n         is_move_assignable<_Tp>>::value>::type\r\n\r\n\r\n\r\n    swap(_Tp& __a, _Tp& __b)\r\n    noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)\r\n\r\n    {\r\n\r\n\r\n\r\n\r\n      _Tp __tmp = std::move(__a);\r\n      __a = std::move(__b);\r\n      __b = std::move(__tmp);\r\n    }\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, size_t _Nm>\r\n   \r\n    inline\r\n\r\n    typename enable_if<__is_swappable<_Tp>::value>::type\r\n\r\n\r\n\r\n"]
[81.289513, "o", "    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\r\n    noexcept(__is_nothrow_swappable<_Tp>::value)\r\n    {\r\n      for (size_t __n = 0; __n < _Nm; ++__n)\r\n swap(__a[__n], __b[__n]);\r\n    }\r\n\r\n\r\n\r\n}\r\n# 42 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 2 3\r\n# 50 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 3\r\nextern \"C++\" {\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n  class type_info;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  namespace __exception_ptr\r\n  {\r\n    class exception_ptr;\r\n  }\r\n\r\n  using __exception_ptr::exception_ptr;\r\n# 75 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 3\r\n  exception_ptr current_exception() noexcept;\r\n\r\n  template<typename _Ex>\r\n  exception_ptr make_exception_ptr(_Ex) noexcept;\r\n\r\n\r\n  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));\r\n\r\n  namespace __exception_ptr\r\n  {\r\n    using std::rethrow_exception;\r\n# 97 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 3\r\n    class exception_ptr\r\n    {\r\n      void* _M_exception_object;\r\n\r\n      explicit exception_ptr(void* __e) noexcept;\r\n\r\n      void _M_addref() noexcept;\r\n      void _M_release() noexcept;\r\n\r\n      void *_M_get() const noexcept __attribute__ ((__pure__));\r\n\r\n      friend exception_ptr std::current_exception() noexcept;\r\n      friend void std::rethrow_exception(exception_ptr);\r\n      template<typename _Ex>\r\n      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;\r\n\r\n    public:\r\n      exception_ptr() noexcept;\r\n\r\n      exception_ptr(const exception_ptr&) noexcept;\r\n\r\n\r\n      exception_ptr(nullptr_t) noexcept\r\n      : _M_exception_object(nullptr)\r\n      { }\r\n\r\n      exception_ptr(exception_ptr&& __o) noexcept\r\n      : _M_exception_object(__o._M_exception_object)\r\n      { __o._M_exception_object = nullptr; }\r\n# 135 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 3\r\n      exception_ptr&\r\n      operator=(const exception_ptr&) noexcept;\r\n\r\n\r\n      exception_ptr&\r\n      operator=(exception_ptr&& __o) noexcept\r\n      {\r\n        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);\r\n        return *this;\r\n      }\r\n\r\n\r\n      ~exception_ptr() noexcept;\r\n\r\n      void\r\n      swap(exception_ptr&) noexcept;\r\n# 162 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 3\r\n      explicit operator bool() const noexcept\r\n      { return _M_exception_object; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      friend bool\r\n      operator==(const exception_ptr& __x, const exception_ptr& __y)\r\n      noexcept\r\n      { return __x._M_exception_object == __y._M_exception_object; }\r\n\r\n      friend bool\r\n      operator!=(const exception_ptr& __x, const exception_ptr& __y)\r\n      noexcept\r\n      { return __x._M_exception_object != __y._M_exception_object; }\r\n\r\n\r\n      const class std::type_info*\r\n      __cxa_exception_type() const noexcept\r\n __attribute__ ((__pure__));\r\n    };\r\n\r\n   \r\n    inline\r\n    exception_ptr::exception_ptr() noexcept\r\n    : _M_exception_object(0)\r\n    { }\r\n\r\n   \r\n    inline\r\n    exception_ptr::exception_ptr(const exception_ptr& __other)\r\n    noexcept\r\n    : _M_exception_object(__other._M_exception_object)\r\n    {\r\n      if (_M_exception_object)\r\n _M_addref();\r\n    }\r\n\r\n   \r\n    inline\r\n    exception_ptr::~exception_ptr() noexcept\r\n    {\r\n      if (_M_exception_object)\r\n _M_release();\r\n    }\r\n\r\n   \r\n    inline exception_ptr&\r\n    exception_ptr::operator=(const exception_ptr& __other) noexcept\r\n    {\r\n      exception_ptr(__other).swap(*this);\r\n      return *this;\r\n    }\r\n\r\n   \r\n    inline void\r\n    exception_ptr::swap(exception_ptr &__other) noexcept\r\n    {\r\n      void *__tmp = _M_exception_object;\r\n      _M_exception_object = __other._M_exception_object;\r\n      __other._M_exception_object = __tmp;\r\n    }\r\n\r\n\r\n    inline void\r\n    swap(exception_ptr& __lhs, exception_ptr& __rhs)\r\n    { __lhs.swap(__rhs); }\r\n\r\n\r\n    template<typename _Ex>\r\n     \r\n      inline void\r\n      __dest_thunk(void* __x)\r\n      { static_cast<_Ex*>(__x)->~_Ex(); }\r\n\r\n\r\n  }\r\n\r\n  using __exception_ptr::swap;\r\n\r\n\r\n\r\n  template<typename _Ex>\r\n    exception_ptr\r\n    make_exception_ptr(_Ex __ex) noexcept\r\n    {\r\n\r\n      using _Ex2 = typename decay<_Ex>::type;\r\n      void* __e = __cxxabiv1::__cxa"]
[81.289615, "o", "_allocate_exception(sizeof(_Ex));\r\n      (void) __cxxabiv1::__cxa_init_primary_exception(\r\n   __e, const_cast<std::type_info*>(&typeid(_Ex)),\r\n   __exception_ptr::__dest_thunk<_Ex2>);\r\n      try\r\n {\r\n   ::new (__e) _Ex2(__ex);\r\n   return exception_ptr(__e);\r\n }\r\n      catch(...)\r\n {\r\n   __cxxabiv1::__cxa_free_exception(__e);\r\n   return current_exception();\r\n }\r\n# 277 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 3\r\n    }\r\n# 291 \"/usr/include/c++/14.2.1/bits/exception_ptr.h\" 3\r\n}\r\n\r\n}\r\n# 167 \"/usr/include/c++/14.2.1/exception\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/nested_exception.h\" 1 3\r\n# 40 \"/usr/include/c++/14.2.1/bits/nested_exception.h\" 3\r\nextern \"C++\" {\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n# 59 \"/usr/include/c++/14.2.1/bits/nested_exception.h\" 3\r\n  class nested_exception\r\n  {\r\n    exception_ptr _M_ptr;\r\n\r\n  public:\r\n\r\n    nested_exception() noexcept : _M_ptr(current_exception()) { }\r\n\r\n    nested_exception(const nested_exception&) noexcept = default;\r\n\r\n    nested_exception& operator=(const nested_exception&) noexcept = default;\r\n\r\n    virtual ~nested_exception() noexcept;\r\n\r\n\r\n    [[noreturn]]\r\n    void\r\n    rethrow_nested() const\r\n    {\r\n      if (_M_ptr)\r\n rethrow_exception(_M_ptr);\r\n      std::terminate();\r\n    }\r\n\r\n\r\n    exception_ptr\r\n    nested_ptr() const noexcept\r\n    { return _M_ptr; }\r\n  };\r\n\r\n\r\n\r\n  template<typename _Except>\r\n    struct _Nested_exception : public _Except, public nested_exception\r\n    {\r\n      explicit _Nested_exception(const _Except& __ex)\r\n      : _Except(__ex)\r\n      { }\r\n\r\n      explicit _Nested_exception(_Except&& __ex)\r\n      : _Except(static_cast<_Except&&>(__ex))\r\n      { }\r\n    };\r\n# 145 \"/usr/include/c++/14.2.1/bits/nested_exception.h\" 3\r\n  template<typename _Tp>\r\n    [[noreturn]]\r\n    inline void\r\n    throw_with_nested(_Tp&& __t)\r\n    {\r\n      using _Up = typename decay<_Tp>::type;\r\n      using _CopyConstructible\r\n = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;\r\n      static_assert(_CopyConstructible::value,\r\n   \"throw_with_nested argument must be CopyConstructible\");\r\n\r\n\r\n      if constexpr (is_class_v<_Up>)\r\n if constexpr (!is_final_v<_Up>)\r\n   if constexpr (!is_base_of_v<nested_exception, _Up>)\r\n     throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};\r\n      throw std::forward<_Tp>(__t);\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n# 203 \"/usr/include/c++/14.2.1/bits/nested_exception.h\" 3\r\n  template<typename _Ex>\r\n\r\n\r\n\r\n    inline void\r\n    rethrow_if_nested(const _Ex& __ex)\r\n    {\r\n      const _Ex* __ptr = __builtin_addressof(__ex);\r\n# 223 \"/usr/include/c++/14.2.1/bits/nested_exception.h\" 3\r\n      if constexpr (!is_polymorphic_v<_Ex>)\r\n return;\r\n      else if constexpr (is_base_of_v<nested_exception, _Ex>\r\n    && !is_convertible_v<_Ex*, nested_exception*>)\r\n return;\r\n\r\n\r\n\r\n\r\n      else if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))\r\n __ne_ptr->rethrow_nested();\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n}\r\n# 168 \"/usr/include/c++/14.2.1/exception\" 2 3\r\n# 42 \"/usr/include/c++/14.2.1/ios\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n# 46 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/cwchar\" 1 3\r\n# 39 \"/usr/include/c++/14.2.1/cwchar\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/cwchar\" 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 2 3\r\n# 64 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\nnamespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n \r\n# 68 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wstringop-overflow\"\r\n#pragma GCC diagnostic ignored \"-Wstringop-overread\"\r\n#pragma GCC diagnostic ignored \"-Warray-bounds\"\r\n# 83 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n  template<typename _CharT>\r\n    struct _Char_types\r\n    {\r\n      typedef unsigned long int_type;\r\n\r\n      typedef std::streampos pos_type;\r\n      typedef std::streamoff off_type;\r\n      typedef std::mbstate_t state_type;\r\n\r\n    };\r\n# 110 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n  template<typename _CharT>\r\n    struct char_traits\r\n    {\r\n      typedef _CharT char_type;\r\n      typedef typename _Char_types<_CharT>::int_type int_type;\r\n\r\n      typedef typename _Char_types<_CharT>::pos_type pos_type;\r\n      typedef typename _Char_types<_CharT>::off_type off_type;\r\n      typedef typename _Char_types<_CharT>::state_type state_type;\r\n\r\n\r\n\r\n\r\n\r\n      static constexpr void\r\n      assign(char_type& __c1, const char_type& __c2)\r\n      {\r\n\r\n\r\n\r\n\r\n\r\n __c1 = __c2;\r\n      }\r\n\r\n      static constexpr bool\r\n      eq(const char_type& __c1, const char_type& __c2)\r\n      { return __c1 == __c2; }\r\n\r\n      static constexpr bool\r\n      lt(const char_type& __c1, const char_type& __c2)\r\n      { return __c1 < __c2; }\r\n\r\n      static constexpr int\r\n      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);\r\n\r\n      static constexpr std::size_t\r\n      length(const char_type* __s);\r\n\r\n      static constexpr const char_type*\r\n      find(const char_type* __s, std::size_t __n, const char_type& __a);\r\n\r\n      static char_type*\r\n      move(char_type* __s1, const char_type* __s2, std::size_t __n);\r\n\r\n      static char_type*\r\n      copy(char_type* __s1, const char_type* __s2, std::size_t __n);\r\n\r\n      static char_type*\r\n      assign(char_type* __s, std::size_t __n, char_type __a);\r\n\r\n      static constexpr char_type\r\n      to_char_type(const int_type& __c)\r\n      { return static_cast<char_type>(__c); }\r\n\r\n      static constexpr int_type\r\n      to_int_type(const char_type& __c)\r\n      { return static_cast<int_type>(__c); }\r\n\r\n      static constexpr bool\r\n      eq_int_type(const int_type& __c1, const int_type& __c2)\r\n      { return __c1 == __c2; }\r\n\r\n\r\n      static constexpr int_type\r\n      eof()\r\n      { return static_cast<int_type>(-1); }\r\n\r\n      static constexpr int_type\r\n      not_eof(const int_type& __c)\r\n      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }\r\n\r\n    };\r\n\r\n  template<typename _CharT>\r\n    constexpr int\r\n    char_traits<_CharT>::\r\n    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)\r\n    {\r\n      for (std::size_t __i = 0; __i < __n; ++__i)\r\n if (lt(__s1[__i], __s2[__i]))\r\n   return -1;\r\n else if (lt(__s2[__i], __s1[__i]))\r\n   return 1;\r\n      return 0;\r\n    }\r\n\r\n  template<typename _CharT>\r\n    constexpr std::size_t\r\n    char_traits<_CharT>::\r\n    length(const char_type* __p)\r\n    {\r\n      std::size_t __i = 0;\r\n      while (!eq(__p[__i], char_type()))\r\n        ++__i;\r\n      return __i;\r\n    }\r\n\r\n  template<typename _CharT>\r\n    constexpr const typename char_traits<_CharT>::char_type*\r\n    char_traits<_CharT>::\r\n    find(const char_type* __s, std::size_t __n, const char_type& __a)\r\n    {\r\n      for (std::size_t __i = 0; __i < __n; ++__i)\r\n        if (eq(__s[__i], __a))\r\n          return __s + __i;\r\n      return 0;\r\n    }\r\n\r\n  template<typename _CharT>\r\n   \r\n    typename char_traits<_CharT>::char_type*\r\n    char_traits<_CharT>::\r\n    move(char_type* __s1, const char_type* __s2, std::size_t __n)\r\n    {\r\n      if (__n == 0)\r\n return __s1;\r\n# 246 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n      __builtin_memmove(__s1, __s2, __n * sizeof(char_type));\r\n      return __s1;\r\n    }\r\n\r\n  template<typename _CharT>\r\n   \r\n    typename char_traits<_CharT>::char_type*\r\n    char_traits<_CharT>::\r\n    copy(char_type* __s1, const char_type* __s2, std::size_t __n)\r\n    {\r\n      if (__n == 0)\r\n return __s1;\r\n# 266 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));\r\n      return __s1;\r\n    }\r\n\r\n  template<typename _CharT>\r\n   \r\n    typename char_traits<_CharT>::char_type*\r\n    char_traits<_CharT>::\r\n    assign(char_type* __s, std::size_t __n, char_type __a)\r\n    {\r\n# 285 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n      if constexpr (sizeof(_CharT) == 1 && __is_trivial(_CharT))\r\n {\r\n   if (__n)\r\n     {\r\n       unsigned char __c;\r\n       __builtin_memcpy(&__c, __builtin_addressof(__a), 1);\r\n       __builtin_memset(__s, __c, __n);\r\n     }\r\n }\r\n      else\r\n {\r\n   for (std::size_t __i = 0"]
[81.289957, "o", "; __i < __n; ++__i)\r\n     __s[__i] = __a;\r\n }\r\n      return __s;\r\n    }\r\n\r\n\r\n}\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 322 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n  template<typename _CharT>\r\n    struct char_traits : public __gnu_cxx::char_traits<_CharT>\r\n    { };\r\n\r\n\r\n\r\n  template<>\r\n    struct char_traits<char>\r\n    {\r\n      typedef char char_type;\r\n      typedef int int_type;\r\n\r\n      typedef streampos pos_type;\r\n      typedef streamoff off_type;\r\n      typedef mbstate_t state_type;\r\n\r\n\r\n\r\n\r\n\r\n      static constexpr void\r\n      assign(char_type& __c1, const char_type& __c2) noexcept\r\n      {\r\n\r\n\r\n\r\n\r\n\r\n __c1 = __c2;\r\n      }\r\n\r\n      static constexpr bool\r\n      eq(const char_type& __c1, const char_type& __c2) noexcept\r\n      { return __c1 == __c2; }\r\n\r\n      static constexpr bool\r\n      lt(const char_type& __c1, const char_type& __c2) noexcept\r\n      {\r\n\r\n return (static_cast<unsigned char>(__c1)\r\n  < static_cast<unsigned char>(__c2));\r\n      }\r\n\r\n      static constexpr int\r\n      compare(const char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n if (__n == 0)\r\n   return 0;\r\n\r\n if (std::__is_constant_evaluated())\r\n   {\r\n     for (size_t __i = 0; __i < __n; ++__i)\r\n       if (lt(__s1[__i], __s2[__i]))\r\n  return -1;\r\n       else if (lt(__s2[__i], __s1[__i]))\r\n  return 1;\r\n     return 0;\r\n   }\r\n\r\n return __builtin_memcmp(__s1, __s2, __n);\r\n      }\r\n\r\n      static constexpr size_t\r\n      length(const char_type* __s)\r\n      {\r\n\r\n if (std::__is_constant_evaluated())\r\n   return __gnu_cxx::char_traits<char_type>::length(__s);\r\n\r\n return __builtin_strlen(__s);\r\n      }\r\n\r\n      static constexpr const char_type*\r\n      find(const char_type* __s, size_t __n, const char_type& __a)\r\n      {\r\n if (__n == 0)\r\n   return 0;\r\n\r\n if (std::__is_constant_evaluated())\r\n   return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\r\n\r\n return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\r\n      }\r\n\r\n      static char_type*\r\n      move(char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n if (__n == 0)\r\n   return __s1;\r\n\r\n\r\n\r\n\r\n return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));\r\n      }\r\n\r\n      static char_type*\r\n      copy(char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n if (__n == 0)\r\n   return __s1;\r\n\r\n\r\n\r\n\r\n return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));\r\n      }\r\n\r\n      static char_type*\r\n      assign(char_type* __s, size_t __n, char_type __a)\r\n      {\r\n if (__n == 0)\r\n   return __s;\r\n\r\n\r\n\r\n\r\n return static_cast<char_type*>(__builtin_memset(__s, __a, __n));\r\n      }\r\n\r\n      static constexpr char_type\r\n      to_char_type(const int_type& __c) noexcept\r\n      { return static_cast<char_type>(__c); }\r\n\r\n\r\n\r\n      static constexpr int_type\r\n      to_int_type(const char_type& __c) noexcept\r\n      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }\r\n\r\n      static constexpr bool\r\n      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept\r\n      { return __c1 == __c2; }\r\n\r\n\r\n      static constexpr int_type\r\n      eof() noexcept\r\n      { return static_cast<int_type>(-1); }\r\n\r\n      static constexpr int_type\r\n      not_eof(const int_type& __c) noexcept\r\n      { return (__c == eof()) ? 0 : __c; }\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n  template<>\r\n    struct char_traits<wchar_t>\r\n    {\r\n      typedef wchar_t char_type;\r\n      typedef wint_t int_type;\r\n\r\n      typedef streamoff off_type;\r\n      typedef wstreampos pos_type;\r\n      typedef mbstate_t state_type;\r\n\r\n\r\n\r\n\r\n\r\n      static constexpr void\r\n      assign(char_type& __c1, const char_type& __c2) noexcept\r\n      {\r\n\r\n\r\n\r\n\r\n\r\n __c1 = __c2;\r\n      }\r\n\r\n      static constexpr bool\r\n      eq(const char_type& __c1, const char_type& __c2) noexcept\r\n      { return __c1 == __c2; }\r\n\r\n      static constexpr bool\r\n      lt(const char_type& __c1, const char_type& __c2) noexcept\r\n      { return __c1 < __c2; }\r\n\r\n      static constexpr int\r\n      compare(const char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n if (__n == 0)\r\n   return 0;\r\n\r\n if (std::__is_constant_evaluated())\r\n   return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\r\n\r\n return wmemcmp(__s1, __s2, __n);\r\n      }\r\n\r\n      static constexpr size_t\r\n      length(const char_type* __s)\r\n      {\r\n\r\n if (std::__is_constant_evaluated())\r\n   return __gnu_cxx::char_traits<char_type>::length(__s);\r\n\r\n return wcslen(__s);\r\n      }\r\n\r\n      static constexpr const char_type*\r\n      find(const char_type* __s, size_t __n, const char_type& __a)\r\n      {\r\n if (__n == 0)\r\n   return 0;\r\n\r\n if (std::__is_constant_evaluated())\r\n   return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\r\n\r\n return wmemchr(__s, __a, __n);\r\n      }\r\n\r\n      static char_type*\r\n      move(char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n if (__n == 0)\r\n   return __s1;\r\n\r\n\r\n\r\n\r\n return wmemmove(__s1, __s2, __n);\r\n      }\r\n\r\n      static char_type*\r\n      copy(char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n if (__n == 0)\r\n   return __s1;\r\n\r\n\r\n\r\n\r\n return wmemcpy(__s1, __s2, __n);\r\n      }\r\n\r\n      static char_type*\r\n      assign(char_type* __s, size_t __n, char_type __a)\r\n      {\r\n if (__n == 0)\r\n   return __s;\r\n\r\n\r\n\r\n\r\n return wmemset(__s, __a, __n);\r\n      }\r\n\r\n      static constexpr char_type\r\n      to_char_type(const int_type& __c) noexcept\r\n      { return char_type(__c); }\r\n\r\n      static constexpr int_type\r\n      to_int_type(const char_type& __c) noexcept\r\n      { return int_type(__c); }\r\n\r\n      static constexpr bool\r\n      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept\r\n      { return __c1 == __c2; }\r\n\r\n\r\n      static constexpr int_type\r\n      eof() noexcept\r\n      { return static_cast<int_type>((0xffffffffu)); }\r\n\r\n      static constexpr int_type\r\n      not_eof(const int_type& __c) noexcept\r\n      { return eq_int_type(__c, eof()) ? 0 : __c; }\r\n\r\n  };\r\n# 732 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n\r\n}\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  template<>\r\n    struct char_traits<char16_t>\r\n    {\r\n      typedef char16_t char_type;\r\n\r\n      typedef short unsigned int int_type;\r\n\r\n\r\n\r\n\r\n      typedef streamoff off_type;\r\n      typedef u16streampos pos_type;\r\n      typedef mbstate_t state_type;\r\n\r\n\r\n\r\n\r\n\r\n      static constexpr void\r\n      assign(char_type& __c1, const char_type& __c2) noexcept\r\n      {\r\n\r\n\r\n\r\n\r\n\r\n __c1 = __c2;\r\n      }\r\n\r\n      static constexpr bool\r\n      eq(const char_type& __c1, const char_type& __c2) noexcept\r\n      { return __c1 == __c2; }\r\n\r\n      static constexpr bool\r\n      lt(const char_type& __c1, const char_type& __c2) noexcept\r\n      { return __c1 < __c2; }\r\n\r\n      static constexpr int\r\n      compare(const char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n for (size_t __i = 0; __i < __n; ++__i)\r\n   if (lt(__s1[__i], __s2[__i]))\r\n     return -1;\r\n   else if (lt(__s2[__i], __s1[__i]))\r\n     return 1;\r\n return 0;\r\n      }\r\n\r\n      static constexpr size_t\r\n      length(const char_type* __s)\r\n      {\r\n size_t __i = 0;\r\n while (!eq(__s[__i], char_type()))\r\n   ++__i;\r\n return __i;\r\n      }\r\n\r\n      static constexpr const char_type*\r\n      find(const char_type* __s, size_t __n, const char_type& __a)\r\n      {\r\n for (size_t __i = 0; __i < __n; ++__i)\r\n   if (eq(__s[__i], __a))\r\n     return __s + __i;\r\n return 0;\r\n      }\r\n\r\n      static char_type*\r\n      move(char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n if (__n == 0)\r\n   return __s1;\r\n\r\n\r\n\r\n\r\n return (static_cast<char_type*>\r\n  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));\r\n      }\r\n\r\n      static char_type*\r\n      copy(char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n if (__n == 0)\r\n   return __s1;\r\n\r\n\r\n\r\n\r\n return (static_cast<char_type*>\r\n  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));\r\n      }\r\n\r\n      static char_type*\r\n      assign(char_type* __s, size_t __n, char_type __a)\r\n      {\r\n for (size_t __i = 0; __i < __n; ++__i)\r\n   assign(__s[__i], __a);\r\n return __s;\r\n      }\r\n\r\n      static constexpr char_type\r\n      to_char_type(const int_type& __c) noexcept\r\n      { return char_type(__c); }\r\n\r\n      static constexpr bool\r\n      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept\r\n      { return __c1 == __c2; }\r\n\r\n\r\n      static constexpr int_type\r\n      to_int_type(const char_type& __c) noexcept\r\n      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }\r\n\r\n      static constexpr int_type\r\n      eof() noexcept\r\n      { return static_cast<int_type>(-1); }\r\n\r\n      static constexpr int_type\r\n      not_eof(const int_type& __c) noexcept\r\n      { return eq_int_type(__c, eof()) ? 0 : __c; }\r\n\r\n\r\n\r\n\r\n\r\n    };\r\n\r\n  template<>\r\n    struct char_traits<char32_t>\r\n    {\r\n      typedef char32_t char_type;\r\n\r\n"]
[81.290044, "o", "      typedef unsigned int int_type;\r\n\r\n\r\n\r\n\r\n      typedef streamoff off_type;\r\n      typedef u32streampos pos_type;\r\n      typedef mbstate_t state_type;\r\n\r\n\r\n\r\n\r\n\r\n      static constexpr void\r\n      assign(char_type& __c1, const char_type& __c2) noexcept\r\n      {\r\n\r\n\r\n\r\n\r\n\r\n __c1 = __c2;\r\n      }\r\n\r\n      static constexpr bool\r\n      eq(const char_type& __c1, const char_type& __c2) noexcept\r\n      { return __c1 == __c2; }\r\n\r\n      static constexpr bool\r\n      lt(const char_type& __c1, const char_type& __c2) noexcept\r\n      { return __c1 < __c2; }\r\n\r\n      static constexpr int\r\n      compare(const char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n for (size_t __i = 0; __i < __n; ++__i)\r\n   if (lt(__s1[__i], __s2[__i]))\r\n     return -1;\r\n   else if (lt(__s2[__i], __s1[__i]))\r\n     return 1;\r\n return 0;\r\n      }\r\n\r\n      static constexpr size_t\r\n      length(const char_type* __s)\r\n      {\r\n size_t __i = 0;\r\n while (!eq(__s[__i], char_type()))\r\n   ++__i;\r\n return __i;\r\n      }\r\n\r\n      static constexpr const char_type*\r\n      find(const char_type* __s, size_t __n, const char_type& __a)\r\n      {\r\n for (size_t __i = 0; __i < __n; ++__i)\r\n   if (eq(__s[__i], __a))\r\n     return __s + __i;\r\n return 0;\r\n      }\r\n\r\n      static char_type*\r\n      move(char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n if (__n == 0)\r\n   return __s1;\r\n\r\n\r\n\r\n\r\n return (static_cast<char_type*>\r\n  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));\r\n      }\r\n\r\n      static char_type*\r\n      copy(char_type* __s1, const char_type* __s2, size_t __n)\r\n      {\r\n if (__n == 0)\r\n   return __s1;\r\n"]
[81.290122, "o", "\r\n\r\n\r\n\r\n return (static_cast<char_type*>\r\n  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));\r\n      }\r\n\r\n      static char_type*\r\n      assign(char_type* __s, size_t __n, char_type __a)\r\n      {\r\n for (size_t __i = 0; __i < __n; ++__i)\r\n   assign(__s[__i], __a);\r\n return __s;\r\n      }\r\n\r\n      static constexpr char_type\r\n      to_char_type(const int_type& __c) noexcept\r\n      { return char_type(__c); }\r\n\r\n      static constexpr int_type\r\n"]
[81.2902, "o", "      to_int_type(const char_type& __c) noexcept\r\n      { return int_type(__c); }\r\n\r\n      static constexpr bool\r\n      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept\r\n      { return __c1 == __c2; }\r\n\r\n\r\n      static constexpr int_type\r\n      eof() noexcept\r\n      { return static_cast<int_type>(-1); }\r\n\r\n      static constexpr int_type\r\n      not_eof(const int_type& __c) noexcept\r\n      { return eq_int_type(__c, eof()) ? 0 : __c; }\r\n\r\n"]
[81.290277, "o", "    };\r\n# 1010 \"/usr/include/c++/14.2.1/bits/char_traits.h\" 3\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n}\r\n# 43 \"/usr/include/c++/14.2.1/ios\" 2 3\r\n"]
[81.290319, "o", "# 1 \"/usr/include/c++/14.2.1/bits/localefwd.h\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/localefwd.h\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/localefwd.h\" 3\r\n"]
[81.290427, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++locale.h\" 1 3\r\n# 39 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++locale.h\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++locale.h\" 3\r\n\r\n# 1 \"/usr/include/c++/14.2.1/clocale\" 1 3\r\n"]
[81.290509, "o", "# 39 \"/usr/include/c++/14.2.1/clocale\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/clocale\" 3\r\n"]
[81.290595, "o", "\r\n\r\n# 1 \"/usr/include/locale.h\" 1 3 4\r\n"]
[81.290636, "o", "# 28 \"/usr/include/locale.h\" 3 4\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 1 3 4\r\n"]
[81.290945, "o", "# 29 \"/usr/include/locale.h\" 2 3 4\r\n"]
[81.291084, "o", "# 1 \"/usr/include/bits/locale.h\" 1 3 4\r\n"]
[81.291159, "o", "# 30 \"/usr/include/locale.h\" 2 3 4\r\n\r\nextern \"C\" {\r\n# 51 \"/usr/include/locale.h\" 3 4\r\nstruct lconv\r\n{\r\n\r\n\r\n  char *decimal_point;\r\n  char *thousands_sep;\r\n\r\n\r\n\r\n\r\n\r\n  char *grouping;\r\n\r\n\r\n"]
[81.2912, "o", "\r\n\r\n\r\n  char *int_curr_symbol;\r\n  char *currency_symbol;\r\n  char *mon_decimal_point;\r\n  char *mon_thousands_sep;\r\n  char *mon_grouping;\r\n  char *positive_sign;\r\n  char *negative_sign;\r\n"]
[81.29124, "o", "  char int_frac_digits;\r\n  char frac_digits;\r\n\r\n  char p_cs_precedes;\r\n\r\n  char p_sep_by_space;\r\n\r\n  char n_cs_precedes;\r\n\r\n  char n_sep_by_space;\r\n\r\n\r\n\r\n\r\n"]
[81.291277, "o", "\r\n\r\n  char p_sign_posn;\r\n  char n_sign_posn;\r\n\r\n\r\n  char int_p_cs_precedes;\r\n\r\n  char int_p_sep_by_space;\r\n\r\n  char int_n_cs_precedes;\r\n\r\n"]
[81.29132, "o", "  char int_n_sep_by_space;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  char int_p_sign_posn;\r\n  char int_n_sign_posn;\r\n# 118 \"/usr/include/locale.h\" 3 4\r\n};\r\n\r\n\r\n"]
[81.29136, "o", "\r\nextern char *setlocale (int __category, const char *__locale) noexcept (true);\r\n\r\n\r\nextern struct lconv *localeconv (void) noexcept (true);\r\n# 141 \"/usr/include/locale.h\" 3 4\r\n"]
[81.2914, "o", "extern locale_t newlocale (int __category_mask, const char *__locale,\r\n      locale_t __base) noexcept (true);\r\n# 176 \"/usr/include/locale.h\" 3 4\r\n"]
[81.291438, "o", "extern locale_t duplocale (locale_t __dataset) noexcept (true);\r\n\r\n\r\n\r\nextern void freelocale (locale_t __dataset) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.291474, "o", "extern locale_t uselocale (locale_t __dataset) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n# 43 \"/usr/include/c++/14.2.1/clocale\" 2 3\r\n# 51 \"/usr/include/c++/14.2.1/clocale\" 3\r\nnamespace std\r\n"]
[81.291749, "o", "{\r\n  using ::lconv;\r\n  using ::setlocale;\r\n  using ::localeconv;\r\n}\r\n# 42 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++locale.h\" 2 3\r\n"]
[81.291826, "o", "\r\n\r\n\r\n\r\n\r\n\r\nnamespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  extern \"C\" __typeof(uselocale) __uselocale;\r\n\r\n\r\n}\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  typedef __locale_t __c_locale;\r\n# 73 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++locale.h\" 3\r\n  inline int\r\n  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),\r\n     char* __out,\r\n     const int __size __attribute__ ((__unused__)),\r\n     const char* __fmt, ...)\r\n  {\r\n\r\n    __c_locale __old = __gnu_cxx::__uselocale(__cloc);\r\n# 93 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++locale.h\" 3\r\n    __builtin_va_list __args;\r\n    __builtin_va_start(__args, __fmt);\r\n\r\n\r\n    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);\r\n\r\n\r\n\r\n\r\n    __builtin_va_end(__args);\r\n\r\n\r\n    __gnu_cxx::__uselocale(__old);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return __ret;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n# 41 \"/usr/include/c++/14.2.1/bits/localefwd.h\" 2 3\r\n\r\n# 1 \"/usr/include/c++/14.2.1/cctype\" 1 3\r\n# 39 \"/usr/include/c++/14.2.1/cctype\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/cctype\" 3\r\n"]
[81.291951, "o", "\r\n\r\n# 1 \"/usr/include/ctype.h\" 1 3 4\r\n"]
[81.29211, "o", "# 26 \"/usr/include/ctype.h\" 3 4\r\n# 1 \"/usr/include/bits/types.h\" 1 3 4\r\n"]
[81.292185, "o", "# 27 \"/usr/include/bits/types.h\" 3 4\r\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\r\n# 28 \"/usr/include/bits/types.h\" 2 3 4\r\n# 1 \"/usr/include/bits/timesize.h\" 1 3 4\r\n# 19 \"/usr/include/bits/timesize.h\" 3 4\r\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\r\n# 20 \"/usr/include/bits/timesize.h\" 2 3 4\r\n# 29 \"/usr/include/bits/types.h\" 2 3 4\r\n"]
[81.292225, "o", "\r\n\r\ntypedef unsigned char __u_char;\r\ntypedef unsigned short int __u_short;\r\ntypedef unsigned int __u_int;\r\ntypedef unsigned long int __u_long;\r\n\r\n\r\ntypedef signed char __int8_t;\r\ntypedef unsigned char __uint8_t;\r\n"]
[81.292265, "o", "typedef signed short int __int16_t;\r\ntypedef unsigned short int __uint16_t;\r\ntypedef signed int __int32_t;\r\ntypedef unsigned int __uint32_t;\r\n\r\ntypedef signed long int __int64_t;\r\ntypedef unsigned long int __uint64_t;\r\n\r\n"]
[81.292301, "o", "\r\n\r\n\r\n\r\n\r\ntypedef __int8_t __int_least8_t;\r\ntypedef __uint8_t __uint_least8_t;\r\ntypedef __int16_t __int_least16_t;\r\ntypedef __uint16_t __uint_least16_t;\r\ntypedef __int32_t __int_least32_t;\r\ntypedef __uint32_t __uint_least32_t;\r\n"]
[81.292351, "o", "typedef __int64_t __int_least64_t;\r\ntypedef __uint64_t __uint_least64_t;\r\n\r\n\r\n\r\ntypedef long int __quad_t;\r\ntypedef unsigned long int __u_quad_t;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.29239, "o", "\r\ntypedef long int __intmax_t;\r\n"]
[81.292537, "o", "typedef unsigned long int __uintmax_t;\r\n# 141 \"/usr/include/bits/types.h\" 3 4\r\n# 1 \"/usr/include/bits/typesizes.h\" 1 3 4\r\n"]
[81.292614, "o", "# 142 \"/usr/include/bits/types.h\" 2 3 4\r\n"]
[81.292705, "o", "# 1 \"/usr/include/bits/time64.h\" 1 3 4\r\n# 143 \"/usr/include/bits/types.h\" 2 3 4\r\n\r\n\r\n"]
[81.29278, "o", "typedef unsigned long int __dev_t;\r\ntypedef unsigned int __uid_t;\r\ntypedef unsigned int __gid_t;\r\ntypedef unsigned long int __ino_t;\r\ntypedef unsigned long int __ino64_t;\r\ntypedef unsigned int __mode_t;\r\ntypedef unsigned long int __nlink_t;\r\ntypedef long int __off_t;\r\ntypedef long int __off64_t;\r\ntypedef int __pid_t;\r\ntypedef struct { int __val[2]; } __fsid_t;\r\ntypedef long int __clock_t;\r\ntypedef unsigned long int __rlim_t;\r\n"]
[81.292822, "o", "typedef unsigned long int __rlim64_t;\r\ntypedef unsigned int __id_t;\r\ntypedef long int __time_t;\r\ntypedef unsigned int __useconds_t;\r\ntypedef long int __suseconds_t;\r\ntypedef long int __suseconds64_t;\r\n\r\ntypedef int __daddr_t;\r\n"]
[81.292861, "o", "typedef int __key_t;\r\n\r\n\r\ntypedef int __clockid_t;\r\n\r\n\r\ntypedef void * __timer_t;\r\n\r\n\r\n"]
[81.292899, "o", "typedef long int __blksize_t;\r\n\r\n\r\n\r\n\r\ntypedef long int __blkcnt_t;\r\ntypedef long int __blkcnt64_t;\r\n\r\n\r\ntypedef unsigned long int __fsblkcnt_t;\r\n"]
[81.292939, "o", "typedef unsigned long int __fsblkcnt64_t;\r\n\r\n\r\ntypedef unsigned long int __fsfilcnt_t;\r\ntypedef unsigned long int __fsfilcnt64_t;\r\n\r\n\r\n"]
[81.292979, "o", "typedef long int __fsword_t;\r\n\r\ntypedef long int __ssize_t;\r\n\r\n\r\ntypedef long int __syscall_slong_t;\r\n\r\ntypedef unsigned long int __syscall_ulong_t;\r\n\r\n\r\n\r\ntypedef __off64_t __loff_t;\r\n"]
[81.293019, "o", "typedef char *__caddr_t;\r\n\r\n\r\ntypedef long int __intptr_t;\r\n\r\n\r\ntypedef unsigned int __socklen_t;\r\n\r\n\r\n\r\n\r\n"]
[81.293057, "o", "typedef int __sig_atomic_t;\r\n# 27 \"/usr/include/ctype.h\" 2 3 4\r\n\r\n"]
[81.293253, "o", "extern \"C\" {\r\n# 39 \"/usr/include/ctype.h\" 3 4\r\n# 1 \"/usr/include/bits/endian.h\" 1 3 4\r\n"]
[81.293325, "o", "# 35 \"/usr/include/bits/endian.h\" 3 4\r\n# 1 \"/usr/include/bits/endianness.h\" 1 3 4\r\n# 36 \"/usr/include/bits/endian.h\" 2 3 4\r\n"]
[81.293365, "o", "# 40 \"/usr/include/ctype.h\" 2 3 4\r\n\r\n\r\n\r\n\r\n\r\n\r\nenum\r\n{\r\n"]
[81.293405, "o", "  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),\r\n  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),\r\n  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),\r\n"]
[81.293443, "o", "  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),\r\n  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),\r\n  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),\r\n"]
[81.293488, "o", "  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),\r\n  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),\r\n  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),\r\n  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),\r\n  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),\r\n"]
[81.293526, "o", "  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))\r\n};\r\n# 79 \"/usr/include/ctype.h\" 3 4\r\nextern const unsigned short int **__ctype_b_loc (void)\r\n     noexcept (true) __attribute__ ((__const__));\r\nextern const __int32_t **__ctype_tolower_loc (void)\r\n     noexcept (true) __attribute__ ((__const__));\r\nextern const __int32_t **__ctype_toupper_loc (void)\r\n"]
[81.293729, "o", "     noexcept (true) __attribute__ ((__const__));\r\n# 108 \"/usr/include/ctype.h\" 3 4\r\nextern int isalnum (int) noexcept (true);\r\nextern int isalpha (int) noexcept (true);\r\nextern int iscntrl (int) noexcept (true);\r\nextern int isdigit (int) noexcept (true);\r\nextern int islower (int) noexcept (true);\r\nextern int isgraph (int) noexcept (true);\r\nextern int isprint (int) noexcept (true);\r\nextern int ispunct (int) noexcept (true);\r\nextern int isspace (int) noexcept (true);\r\nextern int isupper (int) noexcept (true);\r\nextern int isxdigit (int) noexcept (true);\r\n\r\n\r\n\r\nextern int tolower (int __c) noexcept (true);\r\n\r\n\r\nextern int toupper (int __c) noexcept (true);\r\n\r\n\r\n"]
[81.293807, "o", "\r\n\r\nextern int isblank (int) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int isctype (int __c, int __mask) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int isascii (int __c) noexcept (true);\r\n\r\n\r\n\r\nextern int toascii (int __c) noexcept (true);\r\n\r\n\r\n\r\n"]
[81.293886, "o", "extern int _toupper (int) noexcept (true);\r\n"]
[81.29396, "o", "extern int _tolower (int) noexcept (true);\r\n# 251 \"/usr/include/ctype.h\" 3 4\r\nextern int isalnum_l (int, locale_t) noexcept (true);\r\nextern int isalpha_l (int, locale_t) noexcept (true);\r\nextern int iscntrl_l (int, locale_t) noexcept (true);\r\nextern int isdigit_l (int, locale_t) noexcept (true);\r\nextern int islower_l (int, locale_t) noexcept (true);\r\n"]
[81.29404, "o", "extern int isgraph_l (int, locale_t) noexcept (true);\r\nextern int isprint_l (int, locale_t) noexcept (true);\r\nextern int ispunct_l (int, locale_t) noexcept (true);\r\nextern int isspace_l (int, locale_t) noexcept (true);\r\nextern int isupper_l (int, locale_t) noexcept (true);\r\nextern int isxdigit_l (int, locale_t) noexcept (true);\r\n\r\nextern int isblank_l (int, locale_t) noexcept (true);\r\n\r\n\r\n\r\nextern int __tolower_l (int __c, locale_t __l) noexcept (true);\r\nextern int tolower_l (int __c, locale_t __l) noexcept (true);\r\n\r\n"]
[81.294115, "o", "\r\nextern int __toupper_l (int __c, locale_t __l) noexcept (true);\r\n"]
[81.2942, "o", "extern int toupper_l (int __c, locale_t __l) noexcept (true);\r\n# 327 \"/usr/include/ctype.h\" 3 4\r\n}\r\n# 43 \"/usr/include/c++/14.2.1/cctype\" 2 3\r\n# 62 \"/usr/include/c++/14.2.1/cctype\" 3\r\nnamespace std\r\n{\r\n  using ::isalnum;\r\n  using ::isalpha;\r\n  using ::iscntrl;\r\n  using ::isdigit;\r\n  using ::isgraph;\r\n"]
[81.294277, "o", "  using ::islower;\r\n  using ::isprint;\r\n  using ::ispunct;\r\n  using ::isspace;\r\n  using ::isupper;\r\n  using ::isxdigit;\r\n  using ::tolower;\r\n  using ::toupper;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nnamespace std\r\n{\r\n  using ::isblank;\r\n"]
[81.294319, "o", "}\r\n# 43 \"/usr/include/c++/14.2.1/bits/localefwd.h\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 55 \"/usr/include/c++/14.2.1/bits/localefwd.h\" 3\r\n  class locale;\r\n\r\n"]
[81.294361, "o", "  template<typename _Facet>\r\n    bool\r\n    has_facet(const locale&) throw();\r\n\r\n  template<typename _Facet>\r\n    const _Facet&\r\n    use_facet(const locale&);\r\n\r\n\r\n  template<typename _CharT>\r\n"]
[81.294398, "o", "    bool\r\n    isspace(_CharT, const locale&);\r\n\r\n  template<typename _CharT>\r\n    bool\r\n    isprint(_CharT, const locale&);\r\n\r\n  template<typename _CharT>\r\n    bool\r\n    iscntrl(_CharT, const locale&);\r\n\r\n"]
[81.294442, "o", "  template<typename _CharT>\r\n    bool\r\n    isupper(_CharT, const locale&);\r\n\r\n  template<typename _CharT>\r\n    bool\r\n    islower(_CharT, const locale&);\r\n\r\n  template<typename _CharT>\r\n    bool\r\n    isalpha(_CharT, const locale&);\r\n\r\n"]
[81.294483, "o", "  template<typename _CharT>\r\n    bool\r\n    isdigit(_CharT, const locale&);\r\n\r\n  template<typename _CharT>\r\n    bool\r\n    ispunct(_CharT, const locale&);\r\n\r\n  template<typename _CharT>\r\n    bool\r\n"]
[81.294524, "o", "    isxdigit(_CharT, const locale&);\r\n\r\n  template<typename _CharT>\r\n    bool\r\n    isalnum(_CharT, const locale&);\r\n\r\n  template<typename _CharT>\r\n    bool\r\n    isgraph(_CharT, const locale&);\r\n\r\n\r\n"]
[81.294563, "o", "  template<typename _CharT>\r\n    bool\r\n    isblank(_CharT, const locale&);\r\n\r\n\r\n  template<typename _CharT>\r\n    _CharT\r\n    toupper(_CharT, const locale&);\r\n\r\n  template<typename _CharT>\r\n    _CharT\r\n    tolower(_CharT, const locale&);\r\n"]
[81.2946, "o", "\r\n\r\n  struct ctype_base;\r\n  template<typename _CharT>\r\n    class ctype;\r\n  template<> class ctype<char>;\r\n\r\n  template<> class ctype<wchar_t>;\r\n\r\n  template<typename _CharT>\r\n"]
[81.294639, "o", "    class ctype_byname;\r\n\r\n\r\n  class codecvt_base;\r\n  template<typename _InternT, typename _ExternT, typename _StateT>\r\n    class codecvt;\r\n  template<> class codecvt<char, char, mbstate_t>;\r\n\r\n"]
[81.294676, "o", "  template<> class codecvt<wchar_t, char, mbstate_t>;\r\n\r\n\r\n  template<> class codecvt<char16_t, char, mbstate_t>;\r\n  template<> class codecvt<char32_t, char, mbstate_t>;\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.294717, "o", "  template<typename _InternT, typename _ExternT, typename _StateT>\r\n    class codecvt_byname;\r\n\r\n\r\n\r\n  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >\r\n    class num_get;\r\n"]
[81.294762, "o", "  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\r\n    class num_put;\r\n\r\nnamespace __cxx11 {\r\n  template<typename _CharT> class numpunct;\r\n  template<typename _CharT> class numpunct_byname;\r\n}\r\n\r\nnamespace __cxx11 {\r\n\r\n"]
[81.294803, "o", "  template<typename _CharT>\r\n    class collate;\r\n  template<typename _CharT>\r\n    class collate_byname;\r\n}\r\n\r\n\r\n  class time_base;\r\nnamespace __cxx11 {\r\n  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >\r\n    class time_get;\r\n"]
[81.294842, "o", "  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >\r\n    class time_get_byname;\r\n}\r\n  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\r\n    class time_put;\r\n  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\r\n    class time_put_byname;\r\n\r\n\r\n"]
[81.294881, "o", "  class money_base;\r\nnamespace __cxx11 {\r\n  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >\r\n    class money_get;\r\n  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\r\n    class money_put;\r\n}\r\n"]
[81.294918, "o", "namespace __cxx11 {\r\n  template<typename _CharT, bool _Intl = false>\r\n    class moneypunct;\r\n  template<typename _CharT, bool _Intl = false>\r\n    class moneypunct_byname;\r\n}\r\n\r\n\r\n  struct messages_base;\r\n"]
[81.294957, "o", "namespace __cxx11 {\r\n  template<typename _CharT>\r\n    class messages;\r\n  template<typename _CharT>\r\n    class messages_byname;\r\n}\r\n\r\n\r\n}\r\n# 44 \"/usr/include/c++/14.2.1/ios\" 2 3\r\n"]
[81.295427, "o", "# 1 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n\r\n# 1 \"/usr/include/c++/14.2.1/ext/atomicity.h\" 1 3\r\n# 32 \"/usr/include/c++/14.2.1/ext/atomicity.h\" 3\r\n       \r\n# 33 \"/usr/include/c++/14.2.1/ext/atomicity.h\" 3\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr.h\" 1 3\r\n# 30 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr.h\" 3\r\n#pragma GCC visibility push(default)\r\n# 157 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h\" 1 3\r\n"]
[81.295507, "o", "# 35 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h\" 3\r\n# 1 \"/usr/include/pthread.h\" 1 3 4\r\n"]
[81.295611, "o", "# 22 \"/usr/include/pthread.h\" 3 4\r\n# 1 \"/usr/include/sched.h\" 1 3 4\r\n"]
[81.295687, "o", "# 29 \"/usr/include/sched.h\" 3 4\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 1 3 4\r\n"]
[81.295936, "o", "# 30 \"/usr/include/sched.h\" 2 3 4\r\n"]
[81.296088, "o", "\r\n# 1 \"/usr/include/bits/types/time_t.h\" 1 3 4\r\n# 10 \"/usr/include/bits/types/time_t.h\" 3 4\r\ntypedef __time_t time_t;\r\n# 32 \"/usr/include/sched.h\" 2 3 4\r\n"]
[81.296253, "o", "# 1 \"/usr/include/bits/types/struct_timespec.h\" 1 3 4\r\n# 11 \"/usr/include/bits/types/struct_timespec.h\" 3 4\r\nstruct timespec\r\n{\r\n\r\n"]
[81.296301, "o", "\r\n\r\n  __time_t tv_sec;\r\n\r\n\r\n\r\n\r\n  __syscall_slong_t tv_nsec;\r\n# 31 \"/usr/include/bits/types/struct_timespec.h\" 3 4\r\n};\r\n# 33 \"/usr/include/sched.h\" 2 3 4\r\n"]
[81.296331, "o", "\r\n\r\n\r\n\r\n\r\n"]
[81.296497, "o", "typedef __pid_t pid_t;\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/bits/sched.h\" 1 3 4\r\n"]
[81.296707, "o", "# 80 \"/usr/include/bits/sched.h\" 3 4\r\n# 1 \"/usr/include/bits/types/struct_sched_param.h\" 1 3 4\r\n# 23 \"/usr/include/bits/types/struct_sched_param.h\" 3 4\r\nstruct sched_param\r\n{\r\n  int sched_priority;\r\n"]
[81.296753, "o", "};\r\n# 81 \"/usr/include/bits/sched.h\" 2 3 4\r\n\r\nextern \"C\" {\r\n\r\n\r\n\r\nextern int clone (int (*__fn) (void *__arg), void *__child_stack,\r\n    int __flags, void *__arg, ...) noexcept (true);\r\n\r\n"]
[81.296889, "o", "\r\nextern int unshare (int __flags) noexcept (true);\r\n\r\n\r\nextern int sched_getcpu (void) noexcept (true);\r\n\r\n\r\nextern int getcpu (unsigned int *, unsigned int *) noexcept (true);\r\n\r\n\r\nextern int setns (int __fd, int __nstype) noexcept (true);\r\n\r\n\r\n}\r\n# 44 \"/usr/include/sched.h\" 2 3 4\r\n"]
[81.296983, "o", "# 1 \"/usr/include/bits/cpu-set.h\" 1 3 4\r\n# 32 \"/usr/include/bits/cpu-set.h\" 3 4\r\n"]
[81.297074, "o", "typedef unsigned long int __cpu_mask;\r\n\r\n\r\n\r\n\r\n\r\n\r\ntypedef struct\r\n{\r\n  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];\r\n"]
[81.297177, "o", "} cpu_set_t;\r\n# 115 \"/usr/include/bits/cpu-set.h\" 3 4\r\nextern \"C\" {\r\n\r\nextern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)\r\n     noexcept (true);\r\n"]
[81.297265, "o", "extern cpu_set_t *__sched_cpualloc (size_t __count) noexcept (true) ;\r\nextern void __sched_cpufree (cpu_set_t *__set) noexcept (true);\r\n\r\n}\r\n# 45 \"/usr/include/sched.h\" 2 3 4\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern \"C\" {\r\n\r\n\r\nextern int sched_setparam (__pid_t __pid, const struct sched_param *__param)\r\n     noexcept (true);\r\n\r\n\r\nextern int sched_getparam (__pid_t __pid, struct sched_param *__param) noexcept (true);\r\n\r\n\r\nextern int sched_setscheduler (__pid_t __pid, int __policy,\r\n"]
[81.297354, "o", "          const struct sched_param *__param) noexcept (true);\r\n\r\n\r\nextern int sched_getscheduler (__pid_t __pid) noexcept (true);\r\n\r\n\r\nextern int sched_yield (void) noexcept (true);\r\n\r\n\r\nextern int sched_get_priority_max (int __algorithm) noexcept (true);\r\n\r\n\r\nextern int sched_get_priority_min (int __algorithm) noexcept (true);\r\n\r\n\r\n\r\n"]
[81.297428, "o", "extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) noexcept (true);\r\n# 130 \"/usr/include/sched.h\" 3 4\r\nextern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,\r\n         const cpu_set_t *__cpuset) noexcept (true);\r\n\r\n\r\nextern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,\r\n         cpu_set_t *__cpuset) noexcept (true);\r\n\r\n\r\n}\r\n# 23 \"/usr/include/pthread.h\" 2 3 4\r\n"]
[81.297559, "o", "# 1 \"/usr/include/time.h\" 1 3 4\r\n"]
[81.297647, "o", "# 29 \"/usr/include/time.h\" 3 4\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 1 3 4\r\n"]
[81.297788, "o", "# 30 \"/usr/include/time.h\" 2 3 4\r\n"]
[81.297882, "o", "\r\n\r\n\r\n# 1 \"/usr/include/bits/time.h\" 1 3 4\r\n"]
[81.298005, "o", "# 73 \"/usr/include/bits/time.h\" 3 4\r\n# 1 \"/usr/include/bits/timex.h\" 1 3 4\r\n"]
[81.298106, "o", "# 22 \"/usr/include/bits/timex.h\" 3 4\r\n# 1 \"/usr/include/bits/types/struct_timeval.h\" 1 3 4\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nstruct timeval\r\n{\r\n\r\n"]
[81.298151, "o", "\r\n\r\n\r\n  __time_t tv_sec;\r\n  __suseconds_t tv_usec;\r\n\r\n};\r\n# 23 \"/usr/include/bits/timex.h\" 2 3 4\r\n\r\n\r\n\r\nstruct timex\r\n"]
[81.29819, "o", "{\r\n# 58 \"/usr/include/bits/timex.h\" 3 4\r\n  unsigned int modes;\r\n  __syscall_slong_t offset;\r\n  __syscall_slong_t freq;\r\n  __syscall_slong_t maxerror;\r\n  __syscall_slong_t esterror;\r\n"]
[81.29823, "o", "  int status;\r\n  __syscall_slong_t constant;\r\n  __syscall_slong_t precision;\r\n  __syscall_slong_t tolerance;\r\n  struct timeval time;\r\n  __syscall_slong_t tick;\r\n  __syscall_slong_t ppsfreq;\r\n  __syscall_slong_t jitter;\r\n  int shift;\r\n  __syscall_slong_t stabil;\r\n  __syscall_slong_t jitcnt;\r\n  __syscall_slong_t calcnt;\r\n  __syscall_slong_t errcnt;\r\n  __syscall_slong_t stbcnt;\r\n\r\n"]
[81.298276, "o", "  int tai;\r\n\r\n\r\n  int :32; int :32; int :32; int :32;\r\n  int :32; int :32; int :32; int :32;\r\n  int :32; int :32; int :32;\r\n\r\n"]
[81.298315, "o", "};\r\n# 74 \"/usr/include/bits/time.h\" 2 3 4\r\n\r\nextern \"C\" {\r\n\r\n\r\n"]
[81.298357, "o", "extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n# 90 \"/usr/include/bits/time.h\" 3 4\r\n}\r\n# 34 \"/usr/include/time.h\" 2 3 4\r\n"]
[81.298571, "o", "\r\n\r\n\r\n# 1 \"/usr/include/bits/types/clock_t.h\" 1 3 4\r\n\r\n\r\n\r\n\r\n\r\n\r\ntypedef __clock_t clock_t;\r\n# 38 \"/usr/include/time.h\" 2 3 4\r\n\r\n# 1 \"/usr/include/bits/types/struct_tm.h\" 1 3 4\r\n\r\n\r\n\r\n\r\n\r\n\r\nstruct tm\r\n{\r\n  int tm_sec;\r\n  int tm_min;\r\n  int tm_hour;\r\n  int tm_mday;\r\n  int tm_mon;\r\n  int tm_year;\r\n  int tm_wday;\r\n  int tm_yday;\r\n"]
[81.29865, "o", "  int tm_isdst;\r\n\r\n\r\n  long int tm_gmtoff;\r\n  const char *tm_zone;\r\n\r\n\r\n\r\n\r\n};\r\n# 40 \"/usr/include/time.h\" 2 3 4\r\n"]
[81.298731, "o", "\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/bits/types/clockid_t.h\" 1 3 4\r\n\r\n\r\n\r\n\r\n\r\n\r\ntypedef __clockid_t clockid_t;\r\n# 47 \"/usr/include/time.h\" 2 3 4\r\n"]
[81.298818, "o", "# 1 \"/usr/include/bits/types/timer_t.h\" 1 3 4\r\n\r\n\r\n\r\n\r\n\r\n\r\ntypedef __timer_t timer_t;\r\n# 48 \"/usr/include/time.h\" 2 3 4\r\n"]
[81.298925, "o", "# 1 \"/usr/include/bits/types/struct_itimerspec.h\" 1 3 4\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nstruct itimerspec\r\n  {\r\n"]
[81.299001, "o", "    struct timespec it_interval;\r\n    struct timespec it_value;\r\n  };\r\n# 49 \"/usr/include/time.h\" 2 3 4\r\nstruct sigevent;\r\n# 68 \"/usr/include/time.h\" 3 4\r\nextern \"C\" {\r\n\r\n\r\n\r\nextern clock_t clock (void) noexcept (true);\r\n\r\n\r\n\r\nextern time_t time (time_t *__timer) noexcept (true);\r\n\r\n\r\nextern double difftime (time_t __time1, time_t __time0);\r\n\r\n\r\nextern time_t mktime (struct tm *__tp) noexcept (true);\r\n# 99 \"/usr/include/time.h\" 3 4\r\nextern size_t strftime (char *__restrict __s, size_t __maxsize,\r\n   const char *__restrict __format,\r\n   const struct tm *__restrict __tp)\r\n"]
[81.299081, "o", "   noexcept (true) __attribute__ ((__nonnull__ (1, 3, 4)));\r\n\r\n\r\n\r\n\r\nextern char *strptime (const char *__restrict __s,\r\n         const char *__restrict __fmt, struct tm *__tp)\r\n     noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern size_t strftime_l (char *__restrict __s, size_t __maxsize,\r\n     const char *__restrict __format,\r\n     const struct tm *__restrict __tp,\r\n     locale_t __loc) noexcept (true);\r\n\r\n\r\n\r\nextern char *strptime_l (const char *__restrict __s,\r\n    const char *__restrict __fmt, struct tm *__tp,\r\n    locale_t __loc) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern struct tm *gmtime (const time_t *__timer) noexcept (true);\r\n\r\n\r\n"]
[81.299157, "o", "\r\nextern struct tm *localtime (const time_t *__timer) noexcept (true);\r\n# 154 \"/usr/include/time.h\" 3 4\r\nextern struct tm *gmtime_r (const time_t *__restrict __timer,\r\n       struct tm *__restrict __tp) noexcept (true);\r\n\r\n\r\n\r\nextern struct tm *localtime_r (const time_t *__restrict __timer,\r\n          struct tm *__restrict __tp) noexcept (true);\r\n# 179 \"/usr/include/time.h\" 3 4\r\nextern char *asctime (const struct tm *__tp) noexcept (true);\r\n\r\n\r\n\r\nextern char *ctime (const time_t *__timer) noexcept (true);\r\n# 197 \"/usr/include/time.h\" 3 4\r\nextern char *asctime_r (const struct tm *__restrict __tp,\r\n   char *__restrict __buf) noexcept (true);\r\n\r\n\r\n"]
[81.299235, "o", "\r\nextern char *ctime_r (const time_t *__restrict __timer,\r\n        char *__restrict __buf) noexcept (true);\r\n# 217 \"/usr/include/time.h\" 3 4\r\nextern char *__tzname[2];\r\nextern int __daylight;\r\nextern long int __timezone;\r\n\r\n\r\n\r\n\r\nextern char *tzname[2];\r\n\r\n\r\n\r\nextern void tzset (void) noexcept (true);\r\n\r\n\r\n\r\nextern int daylight;\r\nextern long int timezone;\r\n# 246 \"/usr/include/time.h\" 3 4\r\nextern time_t timegm (struct tm *__tp) noexcept (true);\r\n# 263 \"/usr/include/time.h\" 3 4\r\n"]
[81.299312, "o", "extern time_t timelocal (struct tm *__tp) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int dysize (int __year) noexcept (true) __attribute__ ((__const__));\r\n# 281 \"/usr/include/time.h\" 3 4\r\nextern int nanosleep (const struct timespec *__requested_time,\r\n        struct timespec *__remaining);\r\n\r\n\r\nextern int clock_getres (clockid_t __clock_id, struct timespec *__res) noexcept (true);\r\n\r\n\r\nextern int clock_gettime (clockid_t __clock_id, struct timespec *__tp)\r\n     noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\nextern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)\r\n"]
[81.299353, "o", "     noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n# 323 \"/usr/include/time.h\" 3 4\r\nextern int clock_nanosleep (clockid_t __clock_id, int __flags,\r\n       const struct timespec *__req,\r\n       struct timespec *__rem);\r\n# 338 \"/usr/include/time.h\" 3 4\r\nextern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int timer_create (clockid_t __clock_id,\r\n    struct sigevent *__restrict __evp,\r\n    timer_t *__restrict __timerid) noexcept (true);\r\n\r\n"]
[81.299392, "o", "\r\nextern int timer_delete (timer_t __timerid) noexcept (true);\r\n\r\n\r\n\r\nextern int timer_settime (timer_t __timerid, int __flags,\r\n     const struct itimerspec *__restrict __value,\r\n     struct itimerspec *__restrict __ovalue) noexcept (true);\r\n\r\n\r\nextern int timer_gettime (timer_t __timerid, struct itimerspec *__value)\r\n     noexcept (true);\r\n"]
[81.299432, "o", "# 376 \"/usr/include/time.h\" 3 4\r\nextern int timer_getoverrun (timer_t __timerid) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int timespec_get (struct timespec *__ts, int __base)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n# 399 \"/usr/include/time.h\" 3 4\r\n"]
[81.299476, "o", "extern int timespec_getres (struct timespec *__ts, int __base)\r\n     noexcept (true);\r\n# 425 \"/usr/include/time.h\" 3 4\r\nextern int getdate_err;\r\n# 434 \"/usr/include/time.h\" 3 4\r\nextern struct tm *getdate (const char *__string);\r\n# 448 \"/usr/include/time.h\" 3 4\r\nextern int getdate_r (const char *__restrict __string,\r\n        struct tm *__restrict __resbufp);\r\n\r\n\r\n}\r\n# 24 \"/usr/include/pthread.h\" 2 3 4"]
[81.299516, "o", "\r\n"]
[81.299709, "o", "\r\n\r\n# 1 \"/usr/include/bits/pthreadtypes.h\" 1 3 4\r\n# 23 \"/usr/include/bits/pthreadtypes.h\" 3 4\r\n# 1 \"/usr/include/bits/thread-shared-types.h\" 1 3 4\r\n"]
[81.299782, "o", "# 44 \"/usr/include/bits/thread-shared-types.h\" 3 4\r\n# 1 \"/usr/include/bits/pthreadtypes-arch.h\" 1 3 4\r\n# 21 \"/usr/include/bits/pthreadtypes-arch.h\" 3 4\r\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\r\n"]
[81.299823, "o", "# 22 \"/usr/include/bits/pthreadtypes-arch.h\" 2 3 4\r\n# 45 \"/usr/include/bits/thread-shared-types.h\" 2 3 4\r\n"]
[81.299923, "o", "\r\n# 1 \"/usr/include/bits/atomic_wide_counter.h\" 1 3 4\r\n# 25 \"/usr/include/bits/atomic_wide_counter.h\" 3 4\r\ntypedef union\r\n{\r\n  __extension__ unsigned long long int __value64;\r\n  struct\r\n  {\r\n    unsigned int __low;\r\n"]
[81.299964, "o", "    unsigned int __high;\r\n  } __value32;\r\n} __atomic_wide_counter;\r\n# 47 \"/usr/include/bits/thread-shared-types.h\" 2 3 4\r\n\r\n\r\n\r\n\r\ntypedef struct __pthread_internal_list\r\n{\r\n  struct __pthread_internal_list *__prev;\r\n  struct __pthread_internal_list *__next;\r\n} __pthread_list_t;\r\n\r\ntypedef struct __pthread_internal_slist\r\n{\r\n  struct __pthread_internal_slist *__next;\r\n"]
[81.300077, "o", "} __pthread_slist_t;\r\n# 76 \"/usr/include/bits/thread-shared-types.h\" 3 4\r\n# 1 \"/usr/include/bits/struct_mutex.h\" 1 3 4\r\n# 22 \"/usr/include/bits/struct_mutex.h\" 3 4\r\nstruct __pthread_mutex_s\r\n{\r\n  int __lock;\r\n  unsigned int __count;\r\n"]
[81.300157, "o", "  int __owner;\r\n\r\n  unsigned int __nusers;\r\n\r\n\r\n\r\n  int __kind;\r\n\r\n  short __spins;\r\n  short __elision;\r\n  __pthread_list_t __list;\r\n# 53 \"/usr/include/bits/struct_mutex.h\" 3 4\r\n};\r\n# 77 \"/usr/include/bits/thread-shared-types.h\" 2 3 4\r\n"]
[81.300228, "o", "# 89 \"/usr/include/bits/thread-shared-types.h\" 3 4\r\n# 1 \"/usr/include/bits/struct_rwlock.h\" 1 3 4\r\n# 23 \"/usr/include/bits/struct_rwlock.h\" 3 4\r\nstruct __pthread_rwlock_arch_t\r\n{\r\n  unsigned int __readers;\r\n  unsigned int __writers;\r\n  unsigned int __wrphase_futex;\r\n"]
[81.300268, "o", "  unsigned int __writers_futex;\r\n  unsigned int __pad3;\r\n  unsigned int __pad4;\r\n\r\n  int __cur_writer;\r\n  int __shared;\r\n  signed char __rwelision;\r\n\r\n\r\n\r\n\r\n  unsigned char __pad1[7];\r\n\r\n\r\n  unsigned long int __pad2;\r\n\r\n\r\n"]
[81.300307, "o", "  unsigned int __flags;\r\n# 55 \"/usr/include/bits/struct_rwlock.h\" 3 4\r\n};\r\n# 90 \"/usr/include/bits/thread-shared-types.h\" 2 3 4\r\n\r\n\r\n\r\n\r\nstruct __pthread_cond_s\r\n{\r\n  __atomic_wide_counter __wseq;\r\n  __atomic_wide_counter __g1_start;\r\n  unsigned int __g_refs[2] ;\r\n"]
[81.300345, "o", "  unsigned int __g_size[2];\r\n  unsigned int __g1_orig_size;\r\n  unsigned int __wrefs;\r\n  unsigned int __g_signals[2];\r\n};\r\n\r\ntypedef unsigned int __tss_t;\r\ntypedef unsigned long int __thrd_t;\r\n\r\ntypedef struct\r\n{\r\n  int __data ;\r\n} __once_flag;\r\n# 24 \"/usr/include/bits/pthreadtypes.h\" 2 3 4\r\n\r\n\r\n\r\n"]
[81.300389, "o", "typedef unsigned long int pthread_t;\r\n\r\n\r\n\r\n\r\ntypedef union\r\n{\r\n  char __size[4];\r\n  int __align;\r\n} pthread_mutexattr_t;\r\n\r\n\r\n\r\n\r\ntypedef union\r\n{\r\n  char __size[4];\r\n  int __align;"]
[81.30043, "o", "\r\n} pthread_condattr_t;\r\n\r\n\r\n\r\ntypedef unsigned int pthread_key_t;\r\n\r\n\r\n\r\ntypedef int pthread_once_t;\r\n\r\n\r\nunion pthread_attr_t\r\n{\r\n  char __size[56];\r\n  long int __align;\r\n};\r\n\r\ntypedef union pthread_attr_t pthread_attr_t;\r\n\r\n\r\n\r\n\r\n"]
[81.30047, "o", "typedef union\r\n{\r\n  struct __pthread_mutex_s __data;\r\n  char __size[40];\r\n  long int __align;\r\n} pthread_mutex_t;\r\n\r\n\r\ntypedef union\r\n{\r\n  struct __pthread_cond_s __data;\r\n  char __size[48];\r\n  __extension__ long long int __align;\r\n} pthread_cond_t;\r\n\r\n\r\n\r\n"]
[81.300509, "o", "\r\n\r\ntypedef union\r\n{\r\n  struct __pthread_rwlock_arch_t __data;\r\n  char __size[56];\r\n  long int __align;\r\n} pthread_rwlock_t;\r\n\r\ntypedef union\r\n{\r\n  char __size[8];\r\n  long int __align;\r\n} pthread_rwlockattr_t;\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.300545, "o", "typedef volatile int pthread_spinlock_t;\r\n\r\n\r\n\r\n\r\ntypedef union\r\n{\r\n  char __size[32];\r\n  long int __align;\r\n} pthread_barrier_t;\r\n\r\ntypedef union\r\n{\r\n  char __size[4];\r\n  int __align;\r\n} pthread_barrierattr_t;\r\n# 27 \"/usr/include/pthread.h\" 2 3 4\r\n"]
[81.300783, "o", "# 1 \"/usr/include/bits/setjmp.h\" 1 3 4\r\n# 26 \"/usr/include/bits/setjmp.h\" 3 4\r\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\r\n# 27 \"/usr/include/bits/setjmp.h\" 2 3 4\r\n\r\n\r\n\r\n\r\ntypedef long int __jmp_buf[8];\r\n# 28 \"/usr/include/pthread.h\" 2 3 4\r\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\r\n# 29 \"/usr/include/pthread.h\" 2 3 4\r\n"]
[81.301046, "o", "\r\n# 1 \"/usr/include/bits/types/__sigset_t.h\" 1 3 4\r\n\r\n\r\n\r\n\r\ntypedef struct\r\n{\r\n  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];\r\n} __sigset_t;\r\n# 31 \"/usr/include/pthread.h\" 2 3 4\r\n# 1 \"/usr/include/bits/types/struct___jmp_buf_tag.h\" 1 3 4\r\n# 26 \"/usr/include/bits/types/struct___jmp_buf_tag.h\" 3 4\r\nstruct __jmp_buf_tag\r\n  {\r\n\r\n\r\n\r\n\r\n    __jmp_buf __jmpbuf;\r\n    int __mask_was_saved;\r\n    __sigset_t __saved_mask;\r\n  };\r\n# 32 \"/usr/include/pthread.h\" 2 3 4\r\n"]
[81.301129, "o", "\r\n# 1 \"/usr/include/bits/pthread_stack_min-dynamic.h\" 1 3 4\r\n# 23 \"/usr/include/bits/pthread_stack_min-dynamic.h\" 3 4\r\nextern \"C\" {\r\nextern long int __sysconf (int __name) noexcept (true);\r\n}\r\n# 34 \"/usr/include/pthread.h\" 2 3 4\r\n\r\n\r\n\r\nenum\r\n{\r\n  PTHREAD_CREATE_JOINABLE,\r\n\r\n  PTHREAD_CREATE_DETACHED\r\n\r\n};\r\n\r\n\r\n\r\nenum\r\n{\r\n  PTHREAD_MUTEX_TIMED_NP,\r\n  PTHREAD_MUTEX_RECURSIVE_NP,\r\n  PTHREAD_MUTEX_ERRORCHECK_NP,\r\n  PTHREAD_MUTEX_ADAPTIVE_NP\r\n\r\n  ,\r\n  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,\r\n"]
[81.301205, "o", "  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,\r\n  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,\r\n  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL\r\n\r\n\r\n\r\n  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP\r\n\r\n};\r\n\r\n\r\n\r\n\r\nenum\r\n{\r\n  PTHREAD_MUTEX_STALLED,\r\n  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,\r\n  PTHREAD_MUTEX_ROBUST,\r\n  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST\r\n};\r\n\r\n\r\n\r\n\r\n\r\nenum\r\n{\r\n  PTHREAD_PRIO_NONE,\r\n  PTHREAD_PRIO_INHERIT,\r\n  PTHREAD_PRIO_PROTECT\r\n};\r\n# 104 \"/usr/include/pthread.h\" 3 4\r\nenum\r\n{\r\n"]
[81.301283, "o", "  PTHREAD_RWLOCK_PREFER_READER_NP,\r\n  PTHREAD_RWLOCK_PREFER_WRITER_NP,\r\n  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,\r\n  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP\r\n};\r\n# 124 \"/usr/include/pthread.h\" 3 4\r\nenum\r\n{\r\n  PTHREAD_INHERIT_SCHED,\r\n\r\n  PTHREAD_EXPLICIT_SCHED\r\n\r\n};\r\n\r\n\r\n\r\nenum\r\n{\r\n  PTHREAD_SCOPE_SYSTEM,\r\n\r\n  PTHREAD_SCOPE_PROCESS\r\n\r\n};\r\n\r\n\r\n\r\nenum\r\n{\r\n  PTHREAD_PROCESS_PRIVATE,\r\n\r\n  PTHREAD_PROCESS_SHARED\r\n\r\n};\r\n# 159 \"/usr/include/pthread.h\" 3 4\r\n"]
[81.301359, "o", "struct _pthread_cleanup_buffer\r\n{\r\n  void (*__routine) (void *);\r\n  void *__arg;\r\n  int __canceltype;\r\n  struct _pthread_cleanup_buffer *__prev;\r\n};\r\n\r\n\r\nenum\r\n{\r\n  PTHREAD_CANCEL_ENABLE,\r\n\r\n  PTHREAD_CANCEL_DISABLE\r\n\r\n};\r\nenum\r\n{\r\n  PTHREAD_CANCEL_DEFERRED,\r\n\r\n  PTHREAD_CANCEL_ASYNCHRONOUS\r\n\r\n};\r\n# 197 \"/usr/include/pthread.h\" 3 4\r\nextern \"C\" {\r\n\r\n\r\n\r\n\r\nextern int pthread_create (pthread_t *__restrict __newthread,\r\n      const pthread_attr_t *__restrict __attr,\r\n      void *(*__start_routine) (void *),\r\n"]
[81.301446, "o", "      void *__restrict __arg) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n\r\n\r\n\r\n\r\n\r\nextern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int pthread_join (pthread_t __th, void **__thread_return);\r\n\r\n\r\n\r\n\r\nextern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) noexcept (true);\r\n# 233 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,\r\n     const struct timespec *__abstime);\r\n# 243 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,\r\n                                 clockid_t __clockid,\r\n"]
[81.301555, "o", "     const struct timespec *__abstime);\r\n# 269 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_detach (pthread_t __th) noexcept (true);\r\n\r\n\r\n\r\nextern pthread_t pthread_self (void) noexcept (true) __attribute__ ((__const__));\r\n\r\n\r\nextern int pthread_equal (pthread_t __thread1, pthread_t __thread2)\r\n  noexcept (true) __attribute__ ((__const__));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.301598, "o", "extern int pthread_attr_init (pthread_attr_t *__attr) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_attr_destroy (pthread_attr_t *__attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,\r\n     int *__detachstate)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int pthread_attr_setdetachstate (pthread_attr_t *__attr,\r\n     int __detachstate)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern int pthread_attr_getguardsize (const pthread_attr_t *__attr,\r\n          size_t *__guardsize)\r\n"]
[81.301632, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int pthread_attr_setguardsize (pthread_attr_t *__attr,\r\n          size_t __guardsize)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n"]
[81.301665, "o", "\r\n\r\nextern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,\r\n           struct sched_param *__restrict __param)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n"]
[81.301706, "o", "extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,\r\n           const struct sched_param *__restrict\r\n           __param) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n"]
[81.301742, "o", "extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict\r\n     __attr, int *__restrict __policy)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)\r\n"]
[81.30178, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict\r\n      __attr, int *__restrict __inherit)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n"]
[81.301818, "o", "extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,\r\n      int __inherit)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,\r\n      int *__restrict __scope)\r\n"]
[81.301852, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict\r\n          __attr, void **__restrict __stackaddr)\r\n"]
[81.301888, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));\r\n\r\n\r\n\r\n\r\n\r\nextern int pthread_attr_setstackaddr (pthread_attr_t *__attr,\r\n          void *__stackaddr)\r\n"]
[81.301919, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));\r\n\r\n\r\nextern int pthread_attr_getstacksize (const pthread_attr_t *__restrict\r\n          __attr, size_t *__restrict __stacksize)\r\n"]
[81.301957, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n\r\n\r\nextern int pthread_attr_setstacksize (pthread_attr_t *__attr,\r\n          size_t __stacksize)\r\n"]
[81.302001, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,\r\n      void **__restrict __stackaddr,\r\n      size_t *__restrict __stacksize)\r\n"]
[81.30204, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3)));\r\n\r\n\r\n\r\n\r\nextern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,\r\n      size_t __stacksize) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\nextern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,\r\n     size_t __cpusetsize,\r\n     const cpu_set_t *__cpuset)\r\n"]
[81.302076, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n\r\n\r\n\r\nextern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,\r\n     size_t __cpusetsize,\r\n     cpu_set_t *__cpuset)\r\n"]
[81.302111, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n\r\n\r\nextern int pthread_getattr_default_np (pthread_attr_t *__attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_attr_setsigmask_np (pthread_attr_t *__attr,\r\n"]
[81.302144, "o", "           const __sigset_t *sigmask);\r\n\r\n\r\n\r\n\r\nextern int pthread_attr_getsigmask_np (const pthread_attr_t *__attr,\r\n           __sigset_t *sigmask);\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.302179, "o", "\r\n\r\nextern int pthread_setattr_default_np (const pthread_attr_t *__attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n"]
[81.302212, "o", "extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int pthread_setschedparam (pthread_t __target_thread, int __policy,\r\n"]
[81.302249, "o", "      const struct sched_param *__param)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n\r\n\r\nextern int pthread_getschedparam (pthread_t __target_thread,\r\n      int *__restrict __policy,\r\n"]
[81.302282, "o", "      struct sched_param *__restrict __param)\r\n     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));\r\n\r\n\r\nextern int pthread_setschedprio (pthread_t __target_thread, int __prio)\r\n     noexcept (true);\r\n\r\n\r\n\r\n\r\n"]
[81.302312, "o", "extern int pthread_getname_np (pthread_t __target_thread, char *__buf,\r\n          size_t __buflen)\r\n     noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\nextern int pthread_setname_np (pthread_t __target_thread, const char *__name)\r\n"]
[81.302345, "o", "     noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\n\r\n\r\n\r\nextern int pthread_getconcurrency (void) noexcept (true);\r\n\r\n"]
[81.302375, "o", "\r\nextern int pthread_setconcurrency (int __level) noexcept (true);\r\n\r\n\r\n\r\nextern int pthread_yield (void) noexcept (true);\r\n\r\n"]
[81.303058, "o", "extern int pthread_yield (void) noexcept (true) __asm__ (\"\" \"sched_yield\")\r\n  __attribute__ ((__deprecated__ (\"pthread_yield is deprecated, use sched_yield instead\")))\r\n                                                      ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,\r\n       const cpu_set_t *__cpuset)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n\r\n\r\nextern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,\r\n       cpu_set_t *__cpuset)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n# 509 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_once (pthread_once_t *__once_control,\r\n    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));\r\n# 521 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_setcancelstate (int __state, int *__oldstate);\r\n\r\n\r\n\r\nextern int pthread_setcanceltype (int __type, int *__oldtype);\r\n\r\n\r\nextern int pthread_cancel (pthread_t __th);\r\n\r\n\r\n\r\n\r\nextern void pthread_testcancel (void);\r\n\r\n\r\n\r\n\r\nstruct __cancel_jmp_buf_tag\r\n{\r\n  __jmp_buf __cancel_jmp_buf;\r\n  int __mask_was_saved;\r\n};\r\n\r\ntypedef struct\r\n{\r\n  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];\r\n  void *__pad[4];\r\n} __pthread_unwind_buf_t __attribute__ ((__aligned__));\r\n# 557 \"/usr/include/pthread.h\" 3 4\r\nstruct __pthread_cleanup_frame\r\n{\r\n  void (*__cancel_routine) (void *);\r\n  void *__cancel_arg;\r\n  int __do_it;\r\n  int __cancel_type;\r\n};\r\n\r\n\r\n\r\n\r\nclass __pthread_cleanup_class\r\n{\r\n  void (*__cancel_routine) (void *);\r\n  void *__cancel_arg;\r\n  int __do_it;\r\n  int __cancel_type;\r\n\r\n public:\r\n  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)\r\n    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }\r\n  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }\r\n  void __setdoit (int __newval) { __do_it = __newval; }\r\n  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,\r\n        &__cancel_type); }\r\n  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }\r\n};\r\n# 766 \"/usr/include/pthread.h\" 3 4\r\nextern int __sigsetjmp_cancel (struct __cancel_jmp_buf_tag __env[1], int __savemask) noexcept (true) __asm__ (\"\" \"__sigsetjmp\")\r\n\r\n\r\n                     __attribute__ ((__returns_twice__));\r\n# 781 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_mutex_init (pthread_mutex_t *__mutex,\r\n          const pthread_mutexattr_t *__mutexattr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_mutex_destroy (pthread_mutex_t *__mutex)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_mutex_trylock (pthread_mutex_t *__mutex)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_mutex_lock (pthread_mutex_t *__mutex)\r\n"]
[81.303095, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\nextern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,\r\n        const struct timespec *__restrict\r\n        __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n# 817 \"/usr/include/pthread.h\" 3 4\r\n"]
[81.303127, "o", "extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,\r\n        clockid_t __clockid,\r\n        const struct timespec *__restrict\r\n"]
[81.303158, "o", "        __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n# 835 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_mutex_unlock (pthread_mutex_t *__mutex)\r\n"]
[81.303197, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern int pthread_mutex_getprioceiling (const pthread_mutex_t *\r\n      __restrict __mutex,\r\n      int *__restrict __prioceiling)\r\n"]
[81.303229, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n\r\nextern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,\r\n      int __prioceiling,\r\n      int *__restrict __old_ceiling)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n\r\n\r\n"]
[81.303262, "o", "\r\n\r\nextern int pthread_mutex_consistent (pthread_mutex_t *__mutex)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n"]
[81.303298, "o", "extern int pthread_mutex_consistent_np (pthread_mutex_t *) noexcept (true) __asm__ (\"\" \"pthread_mutex_consistent\")\r\n                                __attribute__ ((__nonnull__ (1)))\r\n"]
[81.303327, "o", "  __attribute__ ((__deprecated__ (\"pthread_mutex_consistent_np is deprecated, use pthread_mutex_consistent\")))\r\n                                                                         ;\r\n# 874 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)\r\n"]
[81.30336, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n"]
[81.303393, "o", "extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *\r\n      __restrict __attr,\r\n      int *__restrict __pshared)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,\r\n"]
[81.303431, "o", "      int __pshared)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict\r\n          __attr, int *__restrict __kind)\r\n"]
[81.303473, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n\r\n\r\nextern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n"]
[81.303513, "o", "\r\nextern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *\r\n       __restrict __attr,\r\n       int *__restrict __protocol)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n\r\nextern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,\r\n       int __protocol)\r\n"]
[81.303547, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *\r\n          __restrict __attr,\r\n          int *__restrict __prioceiling)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n"]
[81.303574, "o", "extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,\r\n          int __prioceiling)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n"]
[81.303606, "o", "\r\nextern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,\r\n     int *__robustness)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n"]
[81.30411, "o", "extern int pthread_mutexattr_getrobust_np (pthread_mutexattr_t *, int *) noexcept (true) __asm__ (\"\" \"pthread_mutexattr_getrobust\")\r\n\r\n                                   __attribute__ ((__nonnull__ (1)))\r\n  __attribute__ ((__deprecated__ (\"pthread_mutexattr_getrobust_np is deprecated, use pthread_mutexattr_getrobust\")))\r\n                                                                               ;\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,\r\n     int __robustness)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *, int) noexcept (true) __asm__ (\"\" \"pthread_mutexattr_setrobust\")\r\n\r\n                                   __attribute__ ((__nonnull__ (1)))\r\n  __attribute__ ((__deprecated__ (\"pthread_mutexattr_setrobust_np is deprecated, use pthread_mutexattr_setrobust\")))\r\n                                                                               ;\r\n# 967 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,\r\n    const pthread_rwlockattr_t *__restrict\r\n    __attr) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)\r\n  noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\nextern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,\r\n           const struct timespec *__restrict\r\n           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n# 1004 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,\r\n           clockid_t __clockid,\r\n           const struct timespec *__restrict\r\n           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n# 1023 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\nextern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,\r\n           const struct timespec *__restrict\r\n           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n# 1051 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,\r\n           clockid_t __clockid,\r\n           const struct timespec *__restrict\r\n           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n# 1071 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)\r\n"]
[81.304151, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\nextern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n"]
[81.304193, "o", "extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *\r\n       __restrict __attr,\r\n       int *__restrict __pshared)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n"]
[81.304231, "o", "extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,\r\n       int __pshared)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *\r\n       __restrict __attr,\r\n       int *__restrict __pref)\r\n"]
[81.304268, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,\r\n"]
[81.304301, "o", "       int __pref) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int pthread_cond_init (pthread_cond_t *__restrict __cond,\r\n         const pthread_condattr_t *__restrict __cond_attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n"]
[81.304339, "o", "extern int pthread_cond_destroy (pthread_cond_t *__cond)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_cond_signal (pthread_cond_t *__cond)\r\n"]
[81.30437, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_cond_broadcast (pthread_cond_t *__cond)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.304617, "o", "extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,\r\n         pthread_mutex_t *__restrict __mutex)\r\n     __attribute__ ((__nonnull__ (1, 2)));\r\n# 1145 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,\r\n       pthread_mutex_t *__restrict __mutex,\r\n       const struct timespec *__restrict __abstime)\r\n     __attribute__ ((__nonnull__ (1, 2, 3)));\r\n# 1171 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,\r\n       pthread_mutex_t *__restrict __mutex,\r\n       __clockid_t __clock_id,\r\n       const struct timespec *__restrict __abstime)\r\n     __attribute__ ((__nonnull__ (1, 2, 4)));\r\n# 1194 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_condattr_init (pthread_condattr_t *__attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_condattr_destroy (pthread_condattr_t *__attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_condattr_getpshared (const pthread_condattr_t *\r\n     __restrict __attr,\r\n     int *__restrict __pshared)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int pthread_condattr_setpshared (pthread_condattr_t *__attr,\r\n     int __pshared) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern int pthread_condattr_getclock (const pthread_condattr_t *\r\n          __restrict __attr,\r\n          __clockid_t *__restrict __clock_id)\r\n"]
[81.304658, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int pthread_condattr_setclock (pthread_condattr_t *__attr,\r\n          __clockid_t __clock_id)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n# 1230 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)\r\n"]
[81.304689, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_spin_destroy (pthread_spinlock_t *__lock)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n"]
[81.304719, "o", "extern int pthread_spin_lock (pthread_spinlock_t *__lock)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_spin_trylock (pthread_spinlock_t *__lock)\r\n"]
[81.304864, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_spin_unlock (pthread_spinlock_t *__lock)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,\r\n     const pthread_barrierattr_t *__restrict\r\n     __attr, unsigned int __count)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_barrier_destroy (pthread_barrier_t *__barrier)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_barrier_wait (pthread_barrier_t *__barrier)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)\r\n"]
[81.304899, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *\r\n        __restrict __attr,\r\n        int *__restrict __pshared)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n"]
[81.304927, "o", "extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,\r\n        int __pshared)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n# 1297 \"/usr/include/pthread.h\" 3 4\r\n"]
[81.305052, "o", "extern int pthread_key_create (pthread_key_t *__key,\r\n          void (*__destr_function) (void *))\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int pthread_key_delete (pthread_key_t __key) noexcept (true);\r\n\r\n\r\nextern void *pthread_getspecific (pthread_key_t __key) noexcept (true);\r\n\r\n\r\nextern int pthread_setspecific (pthread_key_t __key,\r\n    const void *__pointer)\r\n  noexcept (true) __attribute__ ((__access__ (__none__, 2)));\r\n\r\n\r\n\r\n\r\nextern int pthread_getcpuclockid (pthread_t __thread_id,\r\n      __clockid_t *__clock_id)\r\n     noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n# 1332 \"/usr/include/pthread.h\" 3 4\r\nextern int pthread_atfork (void (*__prepare) (void),\r\n"]
[81.305092, "o", "      void (*__parent) (void),\r\n      void (*__child) (void)) noexcept (true);\r\n# 1346 \"/usr/include/pthread.h\" 3 4\r\n}\r\n# 36 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h\" 2 3\r\n# 47 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h\" 3\r\ntypedef pthread_t __gthread_t;\r\ntypedef pthread_key_t __gthread_key_t;\r\n"]
[81.305123, "o", "typedef pthread_once_t __gthread_once_t;\r\ntypedef pthread_mutex_t __gthread_mutex_t;\r\n\r\n\r\n\r\ntypedef pthread_mutex_t __gthread_recursive_mutex_t;\r\ntypedef pthread_cond_t __gthread_cond_t;\r\n"]
[81.305254, "o", "typedef struct timespec __gthread_time_t;\r\n# 108 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h\" 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.305331, "o", "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.305367, "o", "\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.305467, "o", "\r\n# 312 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h\" 3\r\nstatic inline int\r\n__gthread_active_p (void)\r\n{\r\n  return 1;\r\n"]
[81.305605, "o", "}\r\n# 672 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h\" 3\r\nstatic inline int\r\n__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),\r\n    void *__args)\r\n{\r\n"]
[81.305683, "o", "  return pthread_create (__threadid, __null, __func, __args);\r\n}\r\n\r\nstatic inline int\r\n__gthread_join (__gthread_t __threadid, void **__value_ptr)\r\n{\r\n  return pthread_join (__threadid, __value_ptr);\r\n}\r\n\r\nstatic inline int\r\n__gthread_detach (__gthread_t __threadid)\r\n{\r\n  return pthread_detach (__threadid);\r\n}\r\n\r\nstatic inline int\r\n__gthread_equal (__gthread_t __t1, __gthread_t __t2)\r\n{\r\n  return pthread_equal (__t1, __t2);\r\n}\r\n\r\nstatic inline __gthread_t\r\n__gthread_self (void)\r\n"]
[81.305721, "o", "{\r\n  return pthread_self ();\r\n}\r\n\r\nstatic inline int\r\n__gthread_yield (void)\r\n{\r\n  return sched_yield ();\r\n}\r\n\r\nstatic inline int\r\n__gthread_once (__gthread_once_t *__once, void (*__func) (void))\r\n{\r\n  if (__gthread_active_p ())\r\n"]
[81.305755, "o", "    return pthread_once (__once, __func);\r\n  else\r\n    return -1;\r\n}\r\n\r\nstatic inline int\r\n__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))\r\n{\r\n"]
[81.305788, "o", "  return pthread_key_create (__key, __dtor);\r\n}\r\n\r\nstatic inline int\r\n__gthread_key_delete (__gthread_key_t __key)\r\n{\r\n  return pthread_key_delete (__key);\r\n}\r\n\r\n"]
[81.305937, "o", "static inline void *\r\n__gthread_getspecific (__gthread_key_t __key)\r\n{\r\n  return pthread_getspecific (__key);\r\n}\r\n\r\nstatic inline int\r\n__gthread_setspecific (__gthread_key_t __key, const void *__ptr)\r\n{\r\n  return pthread_setspecific (__key, __ptr);\r\n}\r\n\r\nstatic inline void\r\n__gthread_mutex_init_function (__gthread_mutex_t *__mutex)\r\n{\r\n  if (__gthread_active_p ())\r\n    pthread_mutex_init (__mutex, __null);\r\n}\r\n\r\nstatic inline int\r\n__gthread_mutex_destroy (__gthread_mutex_t *__mutex)\r\n{\r\n  if (__gthread_active_p ())\r\n    return pthread_mutex_destroy (__mutex);\r\n  else\r\n    return 0;\r\n}\r\n\r\nstatic inline int\r\n__gthread_mutex_lock (__gthread_mutex_t *__mutex)\r\n{\r\n  if (__gthread_active_p ())\r\n    return pthread_mutex_lock (__mutex);\r\n  else\r\n    return 0;\r\n"]
[81.305979, "o", "}\r\n\r\nstatic inline int\r\n__gthread_mutex_trylock (__gthread_mutex_t *__mutex)\r\n{\r\n  if (__gthread_active_p ())\r\n    return pthread_mutex_trylock (__mutex);\r\n  else\r\n    return 0;\r\n}\r\n\r\n\r\nstatic inline int\r\n__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,\r\n      const __gthread_time_t *__abs_timeout)\r\n{\r\n"]
[81.306009, "o", "  if (__gthread_active_p ())\r\n    return pthread_mutex_timedlock (__mutex, __abs_timeout);\r\n  else\r\n    return 0;\r\n}\r\n\r\n\r\nstatic inline int\r\n__gthread_mutex_unlock (__gthread_mutex_t *__mutex)\r\n"]
[81.306042, "o", "{\r\n  if (__gthread_active_p ())\r\n    return pthread_mutex_unlock (__mutex);\r\n  else\r\n    return 0;\r\n"]
[81.306074, "o", "}\r\n# 821 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h\" 3\r\nstatic inline int\r\n__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)\r\n{\r\n"]
[81.306108, "o", "  return __gthread_mutex_lock (__mutex);\r\n}\r\n\r\nstatic inline int\r\n__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)\r\n{\r\n  return __gthread_mutex_trylock (__mutex);\r\n}\r\n\r\n\r\nstatic inline int\r\n"]
[81.306144, "o", "__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,\r\n         const __gthread_time_t *__abs_timeout)\r\n{\r\n  return __gthread_mutex_timedlock (__mutex, __abs_timeout);\r\n}\r\n\r\n\r\nstatic inline int\r\n"]
[81.306175, "o", "__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)\r\n{\r\n  return __gthread_mutex_unlock (__mutex);\r\n}\r\n\r\nstatic inline int\r\n__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)\r\n{\r\n  return __gthread_mutex_destroy (__mutex);\r\n"]
[81.306408, "o", "}\r\n# 863 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h\" 3\r\nstatic inline int\r\n__gthread_cond_broadcast (__gthread_cond_t *__cond)\r\n{\r\n  return pthread_cond_broadcast (__cond);\r\n}\r\n\r\nstatic inline int\r\n__gthread_cond_signal (__gthread_cond_t *__cond)\r\n{\r\n  return pthread_cond_signal (__cond);\r\n}\r\n\r\nstatic inline int\r\n__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)\r\n{\r\n  return pthread_cond_wait (__cond, __mutex);\r\n}\r\n\r\nstatic inline int\r\n__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,\r\n     const __gthread_time_t *__abs_timeout)\r\n{\r\n  return pthread_cond_timedwait (__cond, __mutex, __abs_timeout);\r\n}\r\n\r\nstatic inline int\r\n__gthread_cond_wait_recursive (__gthread_cond_t *__cond,\r\n          __gthread_recursive_mutex_t *__mutex)\r\n{\r\n  return __gthread_cond_wait (__cond, __mutex);\r\n}\r\n\r\nstatic inline int\r\n__gthread_cond_destroy (__gthread_cond_t* __cond)\r\n{\r\n  return pthread_cond_destroy (__cond);\r\n}\r\n# 158 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/gthr.h\" 2 3\r\n\r\n\r\n#pragma GCC visibility pop\r\n# 36 \"/usr/include/c++/14.2.1/ext/atomicity.h\" 2 3\r\n"]
[81.306481, "o", "# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/atomic_word.h\" 1 3\r\n# 32 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/atomic_word.h\" 3\r\ntypedef int _Atomic_word;\r\n# 37 \"/usr/include/c++/14.2.1/ext/atomicity.h\" 2 3\r\n"]
[81.306618, "o", "\r\n# 1 \"/usr/include/sys/single_threaded.h\" 1 3 4\r\n# 24 \"/usr/include/sys/single_threaded.h\" 3 4\r\nextern \"C\" {\r\n\r\n\r\n\r\n\r\n"]
[81.30665, "o", "extern char __libc_single_threaded;\r\n\r\n}\r\n# 39 \"/usr/include/c++/14.2.1/ext/atomicity.h\" 2 3\r\n\r\n\r\nnamespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  __attribute__((__always_inline__))\r\n"]
[81.306686, "o", "  inline bool\r\n  __is_single_threaded() noexcept\r\n  {\r\n\r\n\r\n\r\n    return ::__libc_single_threaded;\r\n\r\n"]
[81.306714, "o", "\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  inline _Atomic_word\r\n  __attribute__((__always_inline__))\r\n"]
[81.306757, "o", "  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\r\n  { return __atomic_fetch_add(__mem, __val, 4); }\r\n\r\n  inline void\r\n  __attribute__((__always_inline__))\r\n  __atomic_add(volatile _Atomic_word* __mem, int __val)\r\n"]
[81.306787, "o", "  { __atomic_fetch_add(__mem, __val, 4); }\r\n# 80 \"/usr/include/c++/14.2.1/ext/atomicity.h\" 3\r\n  inline _Atomic_word\r\n  __attribute__((__always_inline__))\r\n  __exchange_and_add_single(_Atomic_word* __mem, int __val)\r\n  {\r\n    _Atomic_word __result = *__mem;\r\n    *__mem += __val;\r\n    return __result;\r\n  }\r\n\r\n"]
[81.306828, "o", "  inline void\r\n  __attribute__((__always_inline__))\r\n  __atomic_add_single(_Atomic_word* __mem, int __val)\r\n  { *__mem += __val; }\r\n\r\n  inline _Atomic_word\r\n  __attribute__ ((__always_inline__))\r\n  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)\r\n  {\r\n"]
[81.306865, "o", "    if (__is_single_threaded())\r\n      return __exchange_and_add_single(__mem, __val);\r\n    else\r\n      return __exchange_and_add(__mem, __val);\r\n  }\r\n\r\n  inline void\r\n  __attribute__ ((__always_inline__))\r\n  __atomic_add_dispatch(_Atomic_word* __mem, int __val)\r\n  {\r\n    if (__is_single_threaded())\r\n"]
[81.306903, "o", "      __atomic_add_single(__mem, __val);\r\n    else\r\n      __atomic_add(__mem, __val);\r\n  }\r\n\r\n\r\n}\r\n# 40 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 2 3\r\n"]
[81.307121, "o", "\r\n# 1 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/string\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/string\" 3\r\n       \r\n# 37 \"/usr/include/c++/14.2.1/string\" 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/allocator.h\" 1 3\r\n"]
[81.307276, "o", "# 46 \"/usr/include/c++/14.2.1/bits/allocator.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/new_allocator.h\" 1 3\r\n"]
[81.307316, "o", "# 35 \"/usr/include/c++/14.2.1/bits/new_allocator.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/functexcept.h\" 1 3\r\n# 42 \"/usr/include/c++/14.2.1/bits/functexcept.h\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n"]
[81.307345, "o", "\r\n  void\r\n  __throw_bad_exception(void) __attribute__((__noreturn__));\r\n\r\n\r\n  void\r\n  __throw_bad_alloc(void) __attribute__((__noreturn__));\r\n\r\n"]
[81.30738, "o", "  void\r\n  __throw_bad_array_new_length(void) __attribute__((__noreturn__));\r\n\r\n\r\n  void\r\n  __throw_bad_cast(void) __attribute__((__noreturn__,__cold__));\r\n\r\n  void\r\n  __throw_bad_typeid(void) __attribute__((__noreturn__,__cold__));\r\n\r\n"]
[81.307416, "o", "\r\n  void\r\n  __throw_logic_error(const char*) __attribute__((__noreturn__,__cold__));\r\n\r\n  void\r\n  __throw_domain_error(const char*) __attribute__((__noreturn__,__cold__));\r\n\r\n  void\r\n"]
[81.307452, "o", "  __throw_invalid_argument(const char*) __attribute__((__noreturn__,__cold__));\r\n\r\n  void\r\n  __throw_length_error(const char*) __attribute__((__noreturn__,__cold__));\r\n\r\n  void\r\n  __throw_out_of_range(const char*) __attribute__((__noreturn__,__cold__));\r\n\r\n  void\r\n  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__,__cold__))\r\n"]
[81.307484, "o", "    __attribute__((__format__(__gnu_printf__, 1, 2)));\r\n\r\n  void\r\n  __throw_runtime_error(const char*) __attribute__((__noreturn__,__cold__));\r\n\r\n  void\r\n  __throw_range_error(const char*) __attribute__((__noreturn__,__cold__));\r\n\r\n  void\r\n"]
[81.307528, "o", "  __throw_overflow_error(const char*) __attribute__((__noreturn__,__cold__));\r\n\r\n  void\r\n  __throw_underflow_error(const char*) __attribute__((__noreturn__,__cold__));\r\n\r\n\r\n  void\r\n  __throw_ios_failure(const char*) __attribute__((__noreturn__,__cold__));\r\n\r\n  void\r\n"]
[81.307569, "o", "  __throw_ios_failure(const char*, int) __attribute__((__noreturn__,__cold__));\r\n\r\n\r\n  void\r\n  __throw_system_error(int) __attribute__((__noreturn__,__cold__));\r\n\r\n\r\n  void\r\n"]
[81.307613, "o", "  __throw_future_error(int) __attribute__((__noreturn__,__cold__));\r\n\r\n\r\n  void\r\n  __throw_bad_function_call() __attribute__((__noreturn__,__cold__));\r\n# 140 \"/usr/include/c++/14.2.1/bits/functexcept.h\" 3\r\n\r\n}\r\n"]
[81.307647, "o", "# 36 \"/usr/include/c++/14.2.1/bits/new_allocator.h\" 2 3\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n"]
[81.307687, "o", "# 62 \"/usr/include/c++/14.2.1/bits/new_allocator.h\" 3\r\n  template<typename _Tp>\r\n    class __new_allocator\r\n    {\r\n    public:\r\n      typedef _Tp value_type;\r\n      typedef std::size_t size_type;\r\n"]
[81.307732, "o", "      typedef std::ptrdiff_t difference_type;\r\n\r\n      typedef _Tp* pointer;\r\n      typedef const _Tp* const_pointer;\r\n      typedef _Tp& reference;\r\n      typedef const _Tp& const_reference;\r\n\r\n      template<typename _Tp1>\r\n struct rebind\r\n { typedef __new_allocator<_Tp1> other; };\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.307771, "o", "      typedef std::true_type propagate_on_container_move_assignment;\r\n\r\n\r\n      __attribute__((__always_inline__))\r\n     \r\n      __new_allocator() noexcept { }\r\n\r\n      __attribute__((__always_inline__))\r\n     \r\n      __new_allocator(const __new_allocator&) noexcept { }\r\n\r\n      template<typename _Tp1>\r\n __attribute__((__always_inline__))\r\n\r\n __new_allocator(const __new_allocator<_Tp1>&) noexcept { }\r\n\r\n\r\n"]
[81.307806, "o", "      __new_allocator& operator=(const __new_allocator&) = default;\r\n\r\n\r\n\r\n      ~__new_allocator() noexcept { }\r\n\r\n      pointer\r\n      address(reference __x) const noexcept\r\n      { return std::__addressof(__x); }\r\n\r\n      const_pointer\r\n      address(const_reference __x) const noexcept\r\n"]
[81.30784, "o", "      { return std::__addressof(__x); }\r\n# 125 \"/usr/include/c++/14.2.1/bits/new_allocator.h\" 3\r\n      [[__nodiscard__]] _Tp*\r\n      allocate(size_type __n, const void* = static_cast<const void*>(0))\r\n      {\r\n\r\n\r\n\r\n static_assert(sizeof(_Tp) != 0, \"cannot allocate incomplete types\");\r\n\r\n\r\n if (__builtin_expect(__n > this->_M_max_size(), false))\r\n"]
[81.307873, "o", "   {\r\n\r\n\r\n     if (__n > (std::size_t(-1) / sizeof(_Tp)))\r\n       std::__throw_bad_array_new_length();\r\n     std::__throw_bad_alloc();\r\n   }\r\n\r\n\r\n if (alignof(_Tp) > 16)\r\n   {\r\n     std::align_val_t __al = std::align_val_t(alignof(_Tp));\r\n"]
[81.307907, "o", "     return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp),\r\n          __al));\r\n   }\r\n\r\n return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));\r\n      }\r\n\r\n\r\n      void\r\n      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))\r\n"]
[81.307941, "o", "      {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n if (alignof(_Tp) > 16)\r\n   {\r\n     ::operator delete((__p), (__n) * sizeof(_Tp),\r\n         std::align_val_t(alignof(_Tp)));\r\n     return;\r\n   }\r\n\r\n"]
[81.307983, "o", " ::operator delete((__p), (__n) * sizeof(_Tp));\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      __attribute__((__always_inline__))\r\n      size_type\r\n      max_size() const noexcept\r\n      { return _M_max_size(); }\r\n\r\n"]
[81.308016, "o", "\r\n      template<typename _Up, typename... _Args>\r\n __attribute__((__always_inline__))\r\n void\r\n construct(_Up* __p, _Args&&... __args)\r\n noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)\r\n { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\r\n\r\n      template<typename _Up>\r\n __attribute__((__always_inline__))\r\n void\r\n destroy(_Up* __p)\r\n noexcept(std::is_nothrow_destructible<_Up>::value)\r\n"]
[81.308054, "o", " { __p->~_Up(); }\r\n# 213 \"/usr/include/c++/14.2.1/bits/new_allocator.h\" 3\r\n      template<typename _Up>\r\n friend __attribute__((__always_inline__)) bool\r\n operator==(const __new_allocator&, const __new_allocator<_Up>&)\r\n noexcept\r\n { return true; }\r\n\r\n\r\n      template<typename _Up>\r\n"]
[81.308086, "o", " friend __attribute__((__always_inline__)) bool\r\n operator!=(const __new_allocator&, const __new_allocator<_Up>&)\r\n noexcept\r\n { return false; }\r\n\r\n\r\n    private:\r\n      __attribute__((__always_inline__))\r\n      constexpr size_type\r\n      _M_max_size() const noexcept\r\n      {\r\n\r\n"]
[81.308118, "o", " return std::size_t(0x7fffffffffffffffL) / sizeof(_Tp);\r\n\r\n\r\n\r\n      }\r\n    };\r\n\r\n\r\n}\r\n# 34 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h\" 2 3\r\n\r\n\r\nnamespace std\r\n{\r\n# 46 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h\" 3\r\n  template<typename _Tp>\r\n"]
[81.308155, "o", "    using __allocator_base = __new_allocator<_Tp>;\r\n}\r\n# 47 \"/usr/include/c++/14.2.1/bits/allocator.h\" 2 3\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n"]
[81.308197, "o", "\r\n# 72 \"/usr/include/c++/14.2.1/bits/allocator.h\" 3\r\n  template<>\r\n    class allocator<void>\r\n    {\r\n    public:\r\n      typedef void value_type;\r\n      typedef size_t size_type;\r\n      typedef ptrdiff_t difference_type;\r\n\r\n\r\n\r\n      typedef void* pointer;\r\n"]
[81.308234, "o", "      typedef const void* const_pointer;\r\n\r\n      template<typename _Tp1>\r\n struct rebind\r\n { typedef allocator<_Tp1> other; };\r\n\r\n\r\n\r\n\r\n\r\n      using propagate_on_container_move_assignment = true_type;\r\n\r\n      using is_always_equal\r\n\r\n = true_type;\r\n"]
[81.308271, "o", "# 115 \"/usr/include/c++/14.2.1/bits/allocator.h\" 3\r\n    };\r\n# 127 \"/usr/include/c++/14.2.1/bits/allocator.h\" 3\r\n  template<typename _Tp>\r\n    class allocator : public __allocator_base<_Tp>\r\n    {\r\n    public:\r\n      typedef _Tp value_type;\r\n      typedef size_t size_type;\r\n      typedef ptrdiff_t difference_type;\r\n\r\n\r\n\r\n      typedef _Tp* pointer;\r\n      typedef const _Tp* const_pointer;\r\n"]
[81.308303, "o", "      typedef _Tp& reference;\r\n      typedef const _Tp& const_reference;\r\n\r\n      template<typename _Tp1>\r\n struct rebind\r\n { typedef allocator<_Tp1> other; };\r\n\r\n\r\n\r\n\r\n\r\n      using propagate_on_container_move_assignment = true_type;\r\n\r\n      using is_always_equal\r\n\r\n = true_type;\r\n\r\n"]
[81.308336, "o", "\r\n\r\n\r\n      __attribute__((__always_inline__))\r\n     \r\n      allocator() noexcept { }\r\n\r\n      __attribute__((__always_inline__))\r\n     \r\n      allocator(const allocator& __a) noexcept\r\n      : __allocator_base<_Tp>(__a) { }\r\n\r\n\r\n\r\n"]
[81.308372, "o", "      allocator& operator=(const allocator&) = default;\r\n\r\n\r\n      template<typename _Tp1>\r\n __attribute__((__always_inline__))\r\n\r\n allocator(const allocator<_Tp1>&) noexcept { }\r\n\r\n      __attribute__((__always_inline__))\r\n\r\n\r\n\r\n"]
[81.308408, "o", "      ~allocator() noexcept { }\r\n# 212 \"/usr/include/c++/14.2.1/bits/allocator.h\" 3\r\n      friend __attribute__((__always_inline__))\r\n      bool\r\n      operator==(const allocator&, const allocator&) noexcept\r\n      { return true; }\r\n\r\n\r\n      friend __attribute__((__always_inline__))\r\n      bool\r\n"]
[81.308447, "o", "      operator!=(const allocator&, const allocator&) noexcept\r\n      { return false; }\r\n\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _T1, typename _T2>\r\n    __attribute__((__always_inline__))\r\n    inline bool\r\n    operator==(const allocator<_T1>&, const allocator<_T2>&)\r\n    noexcept\r\n"]
[81.308487, "o", "    { return true; }\r\n\r\n\r\n  template<typename _T1, typename _T2>\r\n    __attribute__((__always_inline__))\r\n    inline bool\r\n    operator!=(const allocator<_T1>&, const allocator<_T2>&)\r\n    noexcept\r\n    { return false; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.308522, "o", "    class allocator<const _Tp>\r\n    {\r\n    public:\r\n      typedef _Tp value_type;\r\n      allocator() { }\r\n      template<typename _Up> allocator(const allocator<_Up>&) { }\r\n    };\r\n\r\n  template<typename _Tp>\r\n    class allocator<volatile _Tp>\r\n    {\r\n    public:\r\n      typedef _Tp value_type;\r\n      allocator() { }\r\n"]
[81.308555, "o", "      template<typename _Up> allocator(const allocator<_Up>&) { }\r\n    };\r\n\r\n  template<typename _Tp>\r\n    class allocator<const volatile _Tp>\r\n    {\r\n    public:\r\n      typedef _Tp value_type;\r\n      allocator() { }\r\n"]
[81.30859, "o", "      template<typename _Up> allocator(const allocator<_Up>&) { }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  extern template class allocator<char>;\r\n  extern template class allocator<wchar_t>;\r\n\r\n"]
[81.308618, "o", "\r\n\r\n\r\n\r\n\r\n}\r\n# 44 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.30871, "o", "# 1 \"/usr/include/c++/14.2.1/bits/cpp_type_traits.h\" 1 3\r\n# 35 \"/usr/include/c++/14.2.1/bits/cpp_type_traits.h\" 3\r\n       \r\n# 36 \"/usr/include/c++/14.2.1/bits/cpp_type_traits.h\" 3\r\n# 67 \"/usr/include/c++/14.2.1/bits/cpp_type_traits.h\" 3\r\nextern \"C++\" {\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  struct __true_type { };\r\n  struct __false_type { };\r\n\r\n  template<bool>\r\n"]
[81.308746, "o", "    struct __truth_type\r\n    { typedef __false_type __type; };\r\n\r\n  template<>\r\n    struct __truth_type<true>\r\n    { typedef __true_type __type; };\r\n\r\n\r\n\r\n  template<class _Sp, class _Tp>\r\n    struct __traitor\r\n    {\r\n"]
[81.308779, "o", "      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };\r\n      typedef typename __truth_type<__value>::__type __type;\r\n    };\r\n\r\n\r\n  template<typename, typename>\r\n    struct __are_same\r\n    {\r\n      enum { __value = 0 };\r\n"]
[81.308827, "o", "      typedef __false_type __type;\r\n    };\r\n\r\n  template<typename _Tp>\r\n    struct __are_same<_Tp, _Tp>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n\r\n"]
[81.308868, "o", "  template<typename _Tp>\r\n    struct __is_void\r\n    {\r\n      enum { __value = 0 };\r\n      typedef __false_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_void<void>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n\r\n\r\n\r\n"]
[81.308904, "o", "  template<typename _Tp>\r\n    struct __is_integer\r\n    {\r\n      enum { __value = 0 };\r\n      typedef __false_type __type;\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  template<>\r\n    struct __is_integer<bool>\r\n"]
[81.308938, "o", "    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_integer<char>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n"]
[81.308972, "o", "    struct __is_integer<signed char>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_integer<unsigned char>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n"]
[81.30901, "o", "    };\r\n\r\n\r\n  template<>\r\n    struct __is_integer<wchar_t>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n# 184 \"/usr/include/c++/14.2.1/bits/cpp_type_traits.h\" 3\r\n"]
[81.309045, "o", "  template<>\r\n    struct __is_integer<char16_t>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_integer<char32_t>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n\r\n"]
[81.309079, "o", "  template<>\r\n    struct __is_integer<short>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_integer<unsigned short>\r\n"]
[81.309113, "o", "    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_integer<int>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n"]
[81.309145, "o", "  template<>\r\n    struct __is_integer<unsigned int>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_integer<long>\r\n    {\r\n"]
[81.309176, "o", "      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_integer<unsigned long>\r\n    {\r\n      enum { __value = 1 };\r\n"]
[81.309208, "o", "      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_integer<long long>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n"]
[81.309237, "o", "  template<>\r\n    struct __is_integer<unsigned long long>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n"]
[81.310054, "o", "    };\r\n# 272 \"/usr/include/c++/14.2.1/bits/cpp_type_traits.h\" 3\r\n__extension__ template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; __extension__ template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };\r\n# 289 \"/usr/include/c++/14.2.1/bits/cpp_type_traits.h\" 3\r\n  template<typename _Tp>\r\n    struct __is_floating\r\n    {\r\n      enum { __value = 0 };\r\n      typedef __false_type __type;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct __is_floating<float>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_floating<double>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_floating<long double>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n# 366 \"/usr/include/c++/14.2.1/bits/cpp_type_traits.h\" 3\r\n  template<typename _Tp>\r\n    struct __is_pointer\r\n    {\r\n      enum { __value = 0 };\r\n      typedef __false_type __type;\r\n    };\r\n\r\n  template<typename _Tp>\r\n    struct __is_pointer<_Tp*>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_arithmetic\r\n    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >\r\n    { };\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_scalar\r\n    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >\r\n    { };\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_char\r\n    {\r\n      enum { __value = 0 };\r\n      typedef __false_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_char<char>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct __is_char<wchar_t>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_byte\r\n    {\r\n      enum { __value = 0 };\r\n      typedef __false_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_byte<char>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_byte<signed char>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __is_byte<unsigned char>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n\r\n  enum class byte : unsigned char;\r\n\r\n  template<>\r\n    struct __is_byte<byte>\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n# 470 \"/usr/include/c++/14.2.1/bits/cpp_type_traits.h\" 3\r\n  template<typename> struct iterator_traits;\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_nonvolatile_trivially_copyable\r\n    {\r\n      enum { __value = __is_trivially_copyable(_Tp) };\r\n    };\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_nonvolatile_trivially_copyable<volatile _Tp>\r\n    {\r\n      enum { __value = 0 };\r\n    };\r\n\r\n\r\n  template<typename _OutputIter, typename _InputIter>\r\n    struct __memcpyable\r\n    {\r\n      enum { __value = 0 };\r\n    };\r\n\r\n  template<typename _Tp>\r\n    struct __memcpyable<_Tp*, _Tp*>\r\n    : __is_nonvolatile_trivially_copyable<_Tp>\r\n    { };\r\n\r\n  template<typename _Tp>\r\n    struct __memcpyable<_Tp*, const _Tp*>\r\n    : __is_nonvolatile_trivially_copyable<_Tp>\r\n    { };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Iter1, typename _Iter2>\r\n    struct __memcmpable\r\n    {\r\n      enum { __value = 0 };\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __memcmpable<_Tp*, _Tp*>\r\n    : __is_nonvolatile_trivially_copyable<_Tp>\r\n    { };\r\n\r\n  template<typename _Tp>\r\n    struct __memcmpable<const _Tp*, _Tp*>\r\n    : __is_nonvolatile_trivially_copyable<_Tp>\r\n    { };\r\n\r\n  template<typename _Tp>\r\n    struct __memcmpable<_Tp*, const _Tp*>\r\n    : __is_nonvolatile_trivially_copyable<_Tp>\r\n    { };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, bool _TreatAsBytes =\r\n\r\n\r\n\r\n __is_byte<_Tp>::__value\r\n\r\n    >\r\n    struct __is_memcmp_ordered\r\n    {\r\n      static const bool __value = _Tp(-1) > _Tp(1);\r\n    };\r\n\r\n  template<typename _Tp>\r\n    struct __is_memcmp_ordered<_Tp, false>\r\n    {\r\n      static const bool __value = false;\r\n    };\r\n\r\n\r\n  template<typename _Tp, typename _Up, bool = sizeof(_Tp) == sizeof(_Up)>\r\n    struct __is_memcmp_ordered_with\r\n    {\r\n      static const bool __value = __is_memcmp_ordered<_Tp>::__value\r\n && __is_memcmp_ordered<_Up>::__value;\r\n    };\r\n\r\n  template<typename _Tp, typename _Up>\r\n    struct __is_memcmp_ordered_with<_Tp, _Up, false>\r\n    {\r\n      static const bool __value = false;\r\n    };\r\n# 579 \"/usr/include/c++/14.2.1/bits/cpp_type_traits.h\" 3\r\n  template<>\r\n"]
[81.31009, "o", "    struct __is_memcmp_ordered_with<std::byte, std::byte, true>\r\n    { static constexpr bool __value = true; };\r\n\r\n  template<typename _Tp, bool _SameSize>\r\n    struct __is_memcmp_ordered_with<_Tp, std::byte, _SameSize>\r\n    { static constexpr bool __value = false; };\r\n\r\n  template<typename _Up, bool _SameSize>\r\n    struct __is_memcmp_ordered_with<std::byte, _Up, _SameSize>\r\n"]
[81.310127, "o", "    { static constexpr bool __value = false; };\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_move_iterator\r\n    {\r\n      enum { __value = 0 };\r\n      typedef __false_type __type;\r\n"]
[81.310157, "o", "    };\r\n\r\n\r\n\r\n  template<typename _Iterator>\r\n   \r\n    inline _Iterator\r\n    __miter_base(_Iterator __it)\r\n    { return __it; }\r\n\r\n\r\n}\r\n"]
[81.310188, "o", "}\r\n# 45 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.310361, "o", "\r\n# 1 \"/usr/include/c++/14.2.1/bits/ostream_insert.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/ostream_insert.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/ostream_insert.h\" 3\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/cxxabi_forced.h\" 1 3\r\n# 34 \"/usr/include/c++/14.2.1/bits/cxxabi_forced.h\" 3\r\n       \r\n# 35 \"/usr/include/c++/14.2.1/bits/cxxabi_forced.h\" 3\r\n\r\n#pragma GCC visibility push(default)\r\n\r\n\r\nnamespace __cxxabiv1\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  class __forced_unwind\r\n  {\r\n    virtual ~__forced_unwind() throw();\r\n\r\n\r\n    virtual void __pure_dummy() = 0;\r\n  };\r\n}\r\n\r\n\r\n#pragma GCC visibility pop\r\n# 37 \"/usr/include/c++/14.2.1/bits/ostream_insert.h\" 2 3\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n"]
[81.310431, "o", "\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    inline void\r\n    __ostream_write(basic_ostream<_CharT, _Traits>& __out,\r\n      const _CharT* __s, streamsize __n)\r\n    {\r\n      typedef basic_ostream<_CharT, _Traits> __ostream_type;\r\n      typedef typename __ostream_type::ios_base __ios_base;\r\n\r\n      const streamsize __put = __out.rdbuf()->sputn(__s, __n);\r\n      if (__put != __n)\r\n __out.setstate(__ios_base::badbit);\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    inline void\r\n    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)\r\n    {\r\n      typedef basic_ostream<_CharT, _Traits> __ostream_type;\r\n      typedef typename __ostream_type::ios_base __ios_base;\r\n\r\n"]
[81.31046, "o", "      const _CharT __c = __out.fill();\r\n      for (; __n > 0; --__n)\r\n {\r\n   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);\r\n   if (_Traits::eq_int_type(__put, _Traits::eof()))\r\n     {\r\n"]
[81.310497, "o", "       __out.setstate(__ios_base::badbit);\r\n       break;\r\n     }\r\n }\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ostream<_CharT, _Traits>&\r\n    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,\r\n"]
[81.310531, "o", "       const _CharT* __s, streamsize __n)\r\n    {\r\n      typedef basic_ostream<_CharT, _Traits> __ostream_type;\r\n      typedef typename __ostream_type::ios_base __ios_base;\r\n\r\n      typename __ostream_type::sentry __cerb(__out);\r\n      if (__cerb)\r\n {\r\n"]
[81.310578, "o", "   try\r\n     {\r\n       const streamsize __w = __out.width();\r\n       if (__w > __n)\r\n  {\r\n    const bool __left = ((__out.flags()\r\n     & __ios_base::adjustfield)\r\n           == __ios_base::left);\r\n    if (!__left)\r\n      __ostream_fill(__out, __w - __n);\r\n"]
[81.310612, "o", "    if (__out.good())\r\n      __ostream_write(__out, __s, __n);\r\n    if (__left && __out.good())\r\n      __ostream_fill(__out, __w - __n);\r\n  }\r\n       else\r\n  __ostream_write(__out, __s, __n);\r\n       __out.width(0);\r\n     }\r\n"]
[81.310647, "o", "   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       __out._M_setstate(__ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { __out._M_setstate(__ios_base::badbit); }\r\n }\r\n"]
[81.310682, "o", "      return __out;\r\n    }\r\n\r\n\r\n\r\n\r\n  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);\r\n\r\n\r\n  extern template wostream& __ostream_insert(wostream&, const wchar_t*,\r\n          streamsize);\r\n\r\n\r\n\r\n"]
[81.310711, "o", "\r\n\r\n\r\n}\r\n# 47 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.310743, "o", "# 1 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_funcs.h\" 1 3\r\n# 62 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_funcs.h\" 3\r\n       \r\n# 63 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_funcs.h\" 3\r\n"]
[81.310775, "o", "\r\n# 1 \"/usr/include/c++/14.2.1/bits/concept_check.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/concept_check.h\" 3\r\n       \r\n"]
[81.310807, "o", "# 34 \"/usr/include/c++/14.2.1/bits/concept_check.h\" 3\r\n# 65 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_funcs.h\" 2 3\r\n"]
[81.310842, "o", "# 1 \"/usr/include/c++/14.2.1/debug/assertions.h\" 1 3\r\n"]
[81.311313, "o", "# 66 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_funcs.h\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_types.h\" 1 3\r\n# 62 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_types.h\" 3\r\n       \r\n# 63 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_types.h\" 3\r\n# 74 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_types.h\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 93 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_types.h\" 3\r\n  struct input_iterator_tag { };\r\n\r\n\r\n  struct output_iterator_tag { };\r\n\r\n\r\n  struct forward_iterator_tag : public input_iterator_tag { };\r\n\r\n\r\n\r\n  struct bidirectional_iterator_tag : public forward_iterator_tag { };\r\n\r\n\r\n\r\n  struct random_access_iterator_tag : public bidirectional_iterator_tag { };\r\n# 125 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_types.h\" 3\r\n  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,\r\n           typename _Pointer = _Tp*, typename _Reference = _Tp&>\r\n    struct [[__deprecated__]] iterator\r\n    {\r\n\r\n      typedef _Category iterator_category;\r\n\r\n      typedef _Tp value_type;\r\n\r\n      typedef _Distance difference_type;\r\n\r\n"]
[81.311402, "o", "      typedef _Pointer pointer;\r\n\r\n      typedef _Reference reference;\r\n    };\r\n# 149 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_types.h\" 3\r\n  template<typename _Iterator>\r\n    struct iterator_traits;\r\n\r\n\r\n\r\n\r\n  template<typename _Iterator, typename = __void_t<>>\r\n    struct __iterator_traits { };\r\n\r\n\r\n\r\n  template<typename _Iterator>\r\n    struct __iterator_traits<_Iterator,\r\n        __void_t<typename _Iterator::iterator_category,\r\n          typename _Iterator::value_type,\r\n          typename _Iterator::difference_type,\r\n          typename _Iterator::pointer,\r\n          typename _Iterator::reference>>\r\n    {\r\n      typedef typename _Iterator::iterator_category iterator_category;\r\n      typedef typename _Iterator::value_type value_type;\r\n      typedef typename _Iterator::difference_type difference_type;\r\n      typedef typename _Iterator::pointer pointer;\r\n      typedef typename _Iterator::reference reference;\r\n    };\r\n\r\n\r\n  template<typename _Iterator>\r\n    struct iterator_traits\r\n    : public __iterator_traits<_Iterator> { };\r\n# 209 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_types.h\" 3\r\n  template<typename _Tp>\r\n    struct iterator_traits<_Tp*>\r\n    {\r\n      typedef random_access_iterator_tag iterator_category;\r\n      typedef _Tp value_type;\r\n      typedef ptrdiff_t difference_type;\r\n      typedef _Tp* pointer;\r\n      typedef _Tp& reference;\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct iterator_traits<const _Tp*>\r\n    {\r\n      typedef random_access_iterator_tag iterator_category;\r\n      typedef _Tp value_type;\r\n      typedef ptrdiff_t difference_type;\r\n      typedef const _Tp* pointer;\r\n      typedef const _Tp& reference;\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Iter>\r\n    __attribute__((__always_inline__))\r\n    inline constexpr\r\n    typename iterator_traits<_Iter>::iterator_category\r\n    __iterator_category(const _Iter&)\r\n    { return typename iterator_traits<_Iter>::iterator_category(); }\r\n\r\n\r\n\r\n\r\n  template<typename _Iter>\r\n    using __iter_category_t\r\n      = typename iterator_traits<_Iter>::iterator_category;\r\n\r\n  template<typename _InIter>\r\n    using _RequireInputIter =\r\n      __enable_if_t<is_convertible<__iter_category_t<_InIter>,\r\n"]
[81.311445, "o", "       input_iterator_tag>::value>;\r\n\r\n  template<typename _It,\r\n    typename _Cat = __iter_category_t<_It>>\r\n    struct __is_random_access_iter\r\n      : is_base_of<random_access_iterator_tag, _Cat>\r\n    {\r\n      typedef is_base_of<random_access_iterator_tag, _Cat> _Base;\r\n      enum { __value = _Base::value };\r\n    };\r\n\r\n\r\n\r\n"]
[81.31148, "o", "\r\n\r\n\r\n\r\n\r\n}\r\n# 67 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_funcs.h\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n"]
[81.311517, "o", "\r\n\r\n  template <typename> struct _List_iterator;\r\n  template <typename> struct _List_const_iterator;\r\n\r\n\r\n  template<typename _InputIterator>\r\n    inline constexpr\r\n    typename iterator_traits<_InputIterator>::difference_type\r\n    __distance(_InputIterator __first, _InputIterator __last,\r\n               input_iterator_tag)\r\n"]
[81.311556, "o", "    {\r\n\r\n     \r\n\r\n      typename iterator_traits<_InputIterator>::difference_type __n = 0;\r\n      while (__first != __last)\r\n {\r\n   ++__first;\r\n   ++__n;\r\n }\r\n      return __n;\r\n    }\r\n\r\n"]
[81.311596, "o", "  template<typename _RandomAccessIterator>\r\n    __attribute__((__always_inline__))\r\n    inline constexpr\r\n    typename iterator_traits<_RandomAccessIterator>::difference_type\r\n    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,\r\n               random_access_iterator_tag)\r\n    {\r\n\r\n     \r\n\r\n"]
[81.311632, "o", "      return __last - __first;\r\n    }\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    ptrdiff_t\r\n    __distance(std::_List_iterator<_Tp>,\r\n        std::_List_iterator<_Tp>,\r\n        input_iterator_tag);\r\n\r\n"]
[81.311661, "o", "  template<typename _Tp>\r\n    ptrdiff_t\r\n    __distance(std::_List_const_iterator<_Tp>,\r\n        std::_List_const_iterator<_Tp>,\r\n        input_iterator_tag);\r\n\r\n\r\n\r\n\r\n  template<typename _OutputIterator>\r\n"]
[81.311691, "o", "    void\r\n    __distance(_OutputIterator, _OutputIterator, output_iterator_tag) = delete;\r\n# 144 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_funcs.h\" 3\r\n  template<typename _InputIterator>\r\n    [[__nodiscard__]] __attribute__((__always_inline__))\r\n    inline constexpr\r\n"]
[81.311728, "o", "    typename iterator_traits<_InputIterator>::difference_type\r\n    distance(_InputIterator __first, _InputIterator __last)\r\n    {\r\n\r\n      return std::__distance(__first, __last,\r\n        std::__iterator_category(__first));\r\n    }\r\n\r\n  template<typename _InputIterator, typename _Distance>\r\n"]
[81.31176, "o", "    inline constexpr void\r\n    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)\r\n    {\r\n\r\n     \r\n"]
[81.3118, "o", "      do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(__n >= 0), false)) std::__glibcxx_assert_fail(); } while (false);\r\n      while (__n--)\r\n ++__i;\r\n    }\r\n\r\n  template<typename _BidirectionalIterator, typename _Distance>\r\n    inline constexpr void\r\n    __advance(_BidirectionalIterator& __i, _Distance __n,\r\n       bidirectional_iterator_tag)\r\n"]
[81.311847, "o", "    {\r\n\r\n     \r\n\r\n      if (__n > 0)\r\n        while (__n--)\r\n   ++__i;\r\n      else\r\n        while (__n++)\r\n   --__i;\r\n    }\r\n\r\n  template<typename _RandomAccessIterator, typename _Distance>\r\n"]
[81.311878, "o", "    inline constexpr void\r\n    __advance(_RandomAccessIterator& __i, _Distance __n,\r\n              random_access_iterator_tag)\r\n    {\r\n\r\n     \r\n\r\n      if (__builtin_constant_p(__n) && __n == 1)\r\n ++__i;\r\n      else if (__builtin_constant_p(__n) && __n == -1)\r\n"]
[81.311908, "o", " --__i;\r\n      else\r\n __i += __n;\r\n    }\r\n\r\n\r\n\r\n  template<typename _OutputIterator, typename _Distance>\r\n    void\r\n"]
[81.311941, "o", "    __advance(_OutputIterator&, _Distance, output_iterator_tag) = delete;\r\n# 217 \"/usr/include/c++/14.2.1/bits/stl_iterator_base_funcs.h\" 3\r\n  template<typename _InputIterator, typename _Distance>\r\n    __attribute__((__always_inline__))\r\n    inline constexpr void\r\n    advance(_InputIterator& __i, _Distance __n)\r\n"]
[81.31197, "o", "    {\r\n\r\n      typename iterator_traits<_InputIterator>::difference_type __d = __n;\r\n      std::__advance(__i, __d, std::__iterator_category(__i));\r\n    }\r\n\r\n\r\n\r\n  template<typename _InputIterator>\r\n"]
[81.312004, "o", "    [[__nodiscard__]] [[__gnu__::__always_inline__]]\r\n    inline constexpr _InputIterator\r\n    next(_InputIterator __x, typename\r\n  iterator_traits<_InputIterator>::difference_type __n = 1)\r\n    {\r\n\r\n     \r\n"]
[81.312036, "o", "      std::advance(__x, __n);\r\n      return __x;\r\n    }\r\n\r\n  template<typename _BidirectionalIterator>\r\n    [[__nodiscard__]] [[__gnu__::__always_inline__]]\r\n    inline constexpr _BidirectionalIterator\r\n    prev(_BidirectionalIterator __x, typename\r\n"]
[81.312077, "o", "  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)\r\n    {\r\n\r\n     \r\n\r\n      std::advance(__x, -__n);\r\n      return __x;\r\n    }\r\n\r\n\r\n\r\n\r\n"]
[81.31211, "o", "}\r\n# 48 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.312493, "o", "# 1 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 1 3\r\n# 65 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/ext/type_traits.h\" 1 3\r\n# 32 \"/usr/include/c++/14.2.1/ext/type_traits.h\" 3\r\n       \r\n# 33 \"/usr/include/c++/14.2.1/ext/type_traits.h\" 3\r\n\r\n\r\n\r\n\r\nextern \"C++\" {\r\n\r\nnamespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n  template<bool, typename>\r\n    struct __enable_if\r\n    { };\r\n\r\n  template<typename _Tp>\r\n    struct __enable_if<true, _Tp>\r\n    { typedef _Tp __type; };\r\n\r\n\r\n\r\n  template<bool _Cond, typename _Iftrue, typename _Iffalse>\r\n    struct __conditional_type\r\n    { typedef _Iftrue __type; };\r\n\r\n  template<typename _Iftrue, typename _Iffalse>\r\n    struct __conditional_type<false, _Iftrue, _Iffalse>\r\n    { typedef _Iffalse __type; };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __add_unsigned\r\n    {\r\n    private:\r\n      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;\r\n\r\n    public:\r\n      typedef typename __if_type::__type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __add_unsigned<char>\r\n    { typedef unsigned char __type; };\r\n\r\n  template<>\r\n    struct __add_unsigned<signed char>\r\n    { typedef unsigned char __type; };\r\n\r\n  template<>\r\n    struct __add_unsigned<short>\r\n    { typedef unsigned short __type; };\r\n\r\n  template<>\r\n    struct __add_unsigned<int>\r\n    { typedef unsigned int __type; };\r\n\r\n  template<>\r\n    struct __add_unsigned<long>\r\n    { typedef unsigned long __type; };\r\n\r\n  template<>\r\n    struct __add_unsigned<long long>\r\n    { typedef unsigned long long __type; };\r\n\r\n\r\n  template<>\r\n    struct __add_unsigned<bool>;\r\n\r\n  template<>\r\n    struct __add_unsigned<wchar_t>;\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __remove_unsigned\r\n    {\r\n    private:\r\n      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;\r\n\r\n    public:\r\n      typedef typename __if_type::__type __type;\r\n    };\r\n\r\n  template<>\r\n    struct __remove_unsigned<char>\r\n    { typedef signed char __type; };\r\n\r\n  template<>\r\n    struct __remove_unsigned<unsigned char>\r\n"]
[81.312576, "o", "    { typedef signed char __type; };\r\n\r\n  template<>\r\n    struct __remove_unsigned<unsigned short>\r\n    { typedef short __type; };\r\n\r\n  template<>\r\n    struct __remove_unsigned<unsigned int>\r\n    { typedef int __type; };\r\n\r\n  template<>\r\n    struct __remove_unsigned<unsigned long>\r\n    { typedef long __type; };\r\n\r\n  template<>\r\n    struct __remove_unsigned<unsigned long long>\r\n    { typedef long long __type; };\r\n\r\n\r\n  template<>\r\n    struct __remove_unsigned<bool>;\r\n\r\n  template<>\r\n    struct __remove_unsigned<wchar_t>;\r\n\r\n\r\n\r\n  template<typename _Type>\r\n"]
[81.312648, "o", "    constexpr\r\n    inline bool\r\n    __is_null_pointer(_Type* __ptr)\r\n    { return __ptr == 0; }\r\n\r\n  template<typename _Type>\r\n    constexpr\r\n    inline bool\r\n    __is_null_pointer(_Type)\r\n    { return false; }\r\n\r\n\r\n  constexpr bool\r\n  __is_null_pointer(std::nullptr_t)\r\n  { return true; }\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>\r\n"]
[81.312718, "o", "    struct __promote\r\n    { typedef double __type; };\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __promote<_Tp, false>\r\n    { };\r\n\r\n  template<>\r\n    struct __promote<long double>\r\n    { typedef long double __type; };\r\n\r\n  template<>\r\n    struct __promote<double>\r\n    { typedef double __type; };\r\n\r\n  template<>\r\n    struct __promote<float>\r\n"]
[81.312793, "o", "    { typedef float __type; };\r\n# 225 \"/usr/include/c++/14.2.1/ext/type_traits.h\" 3\r\n  template<typename... _Tp>\r\n    using __promoted_t = decltype((typename __promote<_Tp>::__type(0) + ...));\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    using __promote_2 = __promote<__promoted_t<_Tp, _Up>>;\r\n\r\n  template<typename _Tp, typename _Up, typename _Vp>\r\n    using __promote_3 = __promote<__promoted_t<_Tp, _Up, _Vp>>;\r\n\r\n  template<typename _Tp, typename _Up, typename _Vp, typename _Wp>\r\n"]
[81.312865, "o", "    using __promote_4 = __promote<__promoted_t<_Tp, _Up, _Vp, _Wp>>;\r\n# 269 \"/usr/include/c++/14.2.1/ext/type_traits.h\" 3\r\n\r\n}\r\n}\r\n# 66 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 2 3\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/ptr_traits.h\" 1 3\r\n"]
[81.312946, "o", "# 42 \"/usr/include/c++/14.2.1/bits/ptr_traits.h\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n  class __undefined;\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __get_first_arg\r\n    { using type = __undefined; };\r\n\r\n  template<template<typename, typename...> class _SomeTemplate, typename _Tp,\r\n           typename... _Types>\r\n    struct __get_first_arg<_SomeTemplate<_Tp, _Types...>>\r\n    { using type = _Tp; };\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    struct __replace_first_arg\r\n    { };\r\n\r\n"]
[81.313023, "o", "  template<template<typename, typename...> class _SomeTemplate, typename _Up,\r\n           typename _Tp, typename... _Types>\r\n    struct __replace_first_arg<_SomeTemplate<_Tp, _Types...>, _Up>\r\n    { using type = _SomeTemplate<_Up, _Types...>; };\r\n\r\n\r\n  template<typename _Ptr, typename = void>\r\n    struct __ptr_traits_elem : __get_first_arg<_Ptr>\r\n    { };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Ptr>\r\n    struct __ptr_traits_elem<_Ptr, __void_t<typename _Ptr::element_type>>\r\n    { using type = typename _Ptr::element_type; };\r\n\r\n\r\n  template<typename _Ptr>\r\n    using __ptr_traits_elem_t = typename __ptr_traits_elem<_Ptr>::type;\r\n\r\n\r\n\r\n\r\n  template<typename _Ptr, typename _Elt, bool = is_void<_Elt>::value>\r\n    struct __ptr_traits_ptr_to\r\n    {\r\n      using pointer = _Ptr;\r\n      using element_type = _Elt;\r\n\r\n\r\n\r\n"]
[81.313058, "o", "\r\n\r\n\r\n\r\n      static pointer\r\n      pointer_to(element_type& __r)\r\n\r\n\r\n\r\n\r\n\r\n      { return pointer::pointer_to(__r); }\r\n    };\r\n\r\n\r\n  template<typename _Ptr, typename _Elt>\r\n    struct __ptr_traits_ptr_to<_Ptr, _Elt, true>\r\n"]
[81.313089, "o", "    { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __ptr_traits_ptr_to<_Tp*, _Tp, false>\r\n    {\r\n      using pointer = _Tp*;\r\n      using element_type = _Tp;\r\n\r\n\r\n\r\n\r\n\r\n\r\n      static pointer\r\n"]
[81.313124, "o", "      pointer_to(element_type& __r) noexcept\r\n      { return std::addressof(__r); }\r\n    };\r\n\r\n  template<typename _Ptr, typename _Elt>\r\n    struct __ptr_traits_impl : __ptr_traits_ptr_to<_Ptr, _Elt>\r\n    {\r\n    private:\r\n      template<typename _Tp>\r\n using __diff_t = typename _Tp::difference_type;\r\n\r\n      template<typename _Tp, typename _Up>\r\n using __rebind = __type_identity<typename _Tp::template rebind<_Up>>;\r\n\r\n"]
[81.313164, "o", "    public:\r\n\r\n      using pointer = _Ptr;\r\n\r\n\r\n      using element_type = _Elt;\r\n\r\n\r\n      using difference_type = __detected_or_t<ptrdiff_t, __diff_t, _Ptr>;\r\n\r\n\r\n      template<typename _Up>\r\n using rebind = typename __detected_or_t<__replace_first_arg<_Ptr, _Up>,\r\n      __rebind, _Ptr, _Up>::type;\r\n"]
[81.313201, "o", "    };\r\n\r\n\r\n\r\n  template<typename _Ptr>\r\n    struct __ptr_traits_impl<_Ptr, __undefined>\r\n    { };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Ptr>\r\n    struct pointer_traits : __ptr_traits_impl<_Ptr, __ptr_traits_elem_t<_Ptr>>\r\n    { };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.313242, "o", "  template<typename _Tp>\r\n    struct pointer_traits<_Tp*> : __ptr_traits_ptr_to<_Tp*, _Tp>\r\n    {\r\n\r\n      typedef _Tp* pointer;\r\n\r\n      typedef _Tp element_type;\r\n\r\n      typedef ptrdiff_t difference_type;\r\n\r\n      template<typename _Up> using rebind = _Up*;\r\n    };\r\n\r\n\r\n  template<typename _Ptr, typename _Tp>\r\n    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;\r\n\r\n"]
[81.313277, "o", "  template<typename _Tp>\r\n    constexpr _Tp*\r\n    __to_address(_Tp* __ptr) noexcept\r\n    {\r\n      static_assert(!std::is_function<_Tp>::value, \"not a function pointer\");\r\n      return __ptr;\r\n    }\r\n\r\n\r\n  template<typename _Ptr>\r\n    constexpr typename std::pointer_traits<_Ptr>::element_type*\r\n    __to_address(const _Ptr& __ptr)\r\n"]
[81.313312, "o", "    { return std::__to_address(__ptr.operator->()); }\r\n# 257 \"/usr/include/c++/14.2.1/bits/ptr_traits.h\" 3\r\n\r\n}\r\n# 68 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 2 3\r\n# 85 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n"]
[81.313345, "o", "\r\n# 106 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n \r\n# 106 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n"]
[81.313379, "o", "# 128 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Iterator>\r\n    class reverse_iterator\r\n    : public iterator<typename iterator_traits<_Iterator>::iterator_category,\r\n        typename iterator_traits<_Iterator>::value_type,\r\n        typename iterator_traits<_Iterator>::difference_type,\r\n"]
[81.313414, "o", "        typename iterator_traits<_Iterator>::pointer,\r\n                      typename iterator_traits<_Iterator>::reference>\r\n    {\r\n      template<typename _Iter>\r\n friend class reverse_iterator;\r\n# 147 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n    protected:\r\n      _Iterator current;\r\n\r\n      typedef iterator_traits<_Iterator> __traits_type;\r\n\r\n    public:\r\n"]
[81.313458, "o", "      typedef _Iterator iterator_type;\r\n      typedef typename __traits_type::pointer pointer;\r\n\r\n      typedef typename __traits_type::difference_type difference_type;\r\n      typedef typename __traits_type::reference reference;\r\n# 178 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n      constexpr\r\n      reverse_iterator()\r\n      noexcept(noexcept(_Iterator()))\r\n      : current()\r\n"]
[81.313497, "o", "      { }\r\n\r\n\r\n\r\n\r\n      explicit constexpr\r\n      reverse_iterator(iterator_type __x)\r\n      noexcept(noexcept(_Iterator(__x)))\r\n      : current(__x)\r\n      { }\r\n\r\n\r\n\r\n\r\n      constexpr\r\n      reverse_iterator(const reverse_iterator& __x)\r\n      noexcept(noexcept(_Iterator(__x.current)))\r\n"]
[81.313533, "o", "      : current(__x.current)\r\n      { }\r\n\r\n\r\n      reverse_iterator& operator=(const reverse_iterator&) = default;\r\n\r\n\r\n\r\n\r\n\r\n\r\n      template<typename _Iter>\r\n\r\n\r\n\r\n constexpr\r\n        reverse_iterator(const reverse_iterator<_Iter>& __x)\r\n"]
[81.313568, "o", " noexcept(noexcept(_Iterator(__x.current)))\r\n : current(__x.current)\r\n { }\r\n\r\n\r\n      template<typename _Iter>\r\n\r\n\r\n\r\n\r\n constexpr\r\n reverse_iterator&\r\n operator=(const reverse_iterator<_Iter>& __x)\r\n noexcept(noexcept(current = __x.current))\r\n {\r\n"]
[81.313602, "o", "   current = __x.current;\r\n   return *this;\r\n }\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      constexpr iterator_type\r\n      base() const\r\n      noexcept(noexcept(_Iterator(current)))\r\n      { return current; }\r\n"]
[81.313638, "o", "# 255 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n      [[__nodiscard__]]\r\n      constexpr reference\r\n      operator*() const\r\n      {\r\n _Iterator __tmp = current;\r\n return *--__tmp;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      constexpr pointer\r\n"]
[81.313672, "o", "      operator->() const\r\n\r\n\r\n\r\n\r\n      {\r\n\r\n\r\n _Iterator __tmp = current;\r\n --__tmp;\r\n return _S_to_pointer(__tmp);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.313713, "o", "      constexpr reverse_iterator&\r\n      operator++()\r\n      {\r\n --current;\r\n return *this;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      constexpr reverse_iterator\r\n      operator++(int)\r\n      {\r\n reverse_iterator __tmp = *this;\r\n --current;\r\n"]
[81.313751, "o", " return __tmp;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      constexpr reverse_iterator&\r\n      operator--()\r\n      {\r\n ++current;\r\n return *this;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      constexpr reverse_iterator\r\n      operator--(int)\r\n      {\r\n"]
[81.313789, "o", " reverse_iterator __tmp = *this;\r\n ++current;\r\n return __tmp;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      constexpr reverse_iterator\r\n      operator+(difference_type __n) const\r\n      { return reverse_iterator(current - __n); }\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.313822, "o", "\r\n\r\n      constexpr reverse_iterator&\r\n      operator+=(difference_type __n)\r\n      {\r\n current -= __n;\r\n return *this;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      constexpr reverse_iterator\r\n      operator-(difference_type __n) const\r\n"]
[81.313853, "o", "      { return reverse_iterator(current + __n); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      constexpr reverse_iterator&\r\n      operator-=(difference_type __n)\r\n      {\r\n current += __n;\r\n return *this;\r\n      }\r\n\r\n\r\n\r\n"]
[81.313884, "o", "\r\n\r\n\r\n      [[__nodiscard__]]\r\n      constexpr reference\r\n      operator[](difference_type __n) const\r\n"]
[81.314354, "o", "      { return *(*this + __n); }\r\n# 415 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n    private:\r\n      template<typename _Tp>\r\n static constexpr _Tp*\r\n _S_to_pointer(_Tp* __p)\r\n        { return __p; }\r\n\r\n      template<typename _Tp>\r\n static constexpr pointer\r\n _S_to_pointer(_Tp __t)\r\n        { return __t.operator->(); }\r\n"]
[81.314433, "o", "    };\r\n# 438 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator==(const reverse_iterator<_Iterator>& __x,\r\n        const reverse_iterator<_Iterator>& __y)\r\n    { return __x.base() == __y.base(); }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator<(const reverse_iterator<_Iterator>& __x,\r\n       const reverse_iterator<_Iterator>& __y)\r\n    { return __y.base() < __x.base(); }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator!=(const reverse_iterator<_Iterator>& __x,\r\n        const reverse_iterator<_Iterator>& __y)\r\n    { return !(__x == __y); }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator>(const reverse_iterator<_Iterator>& __x,\r\n       const reverse_iterator<_Iterator>& __y)\r\n    { return __y < __x; }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator<=(const reverse_iterator<_Iterator>& __x,\r\n        const reverse_iterator<_Iterator>& __y)\r\n    { return !(__y < __x); }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator>=(const reverse_iterator<_Iterator>& __x,\r\n        const reverse_iterator<_Iterator>& __y)\r\n    { return !(__x < __y); }\r\n\r\n\r\n\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator==(const reverse_iterator<_IteratorL>& __x,\r\n        const reverse_iterator<_IteratorR>& __y)\r\n    { return __x.base() == __y.base(); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator<(const reverse_iterator<_IteratorL>& __x,\r\n       const reverse_iterator<_IteratorR>& __y)\r\n    { return __x.base() > __y.base(); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator!=(const reverse_iterator<_IteratorL>& __x,\r\n        const reverse_iterator<_IteratorR>& __y)\r\n    { return __x.base() != __y.base(); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator>(const reverse_iterator<_IteratorL>& __x,\r\n       const reverse_iterator<_IteratorR>& __y)\r\n    { return __x.base() < __y.base(); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    inline constexpr bool\r\n    operator<=(const reverse_iterator<_IteratorL>& __x,\r\n        const reverse_iterator<_IteratorR>& __y)\r\n    { return __x.base() >= __y.base(); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator>=(const reverse_iterator<_IteratorL>& __x,\r\n        const reverse_iterator<_IteratorR>& __y)\r\n    { return __x.base() <= __y.base(); }\r\n# 615 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr auto\r\n    operator-(const reverse_iterator<_IteratorL>& __x,\r\n       const reverse_iterator<_IteratorR>& __y)\r\n    -> decltype(__y.base() - __x.base())\r\n    { return __y.base() - __x.base(); }\r\n\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr reverse_iterator<_Iterator>\r\n    operator+(typename reverse_iterator<_Iterator>::difference_type __n,\r\n       const reverse_iterator<_Iterator>& __x)\r\n    { return reverse_iterator<_Iterator>(__x.base() - __n); }\r\n\r\n\r\n\r\n  template<typename _Iterator>\r\n    inline constexpr reverse_iterator<_Iterator>\r\n    __make_reverse_iterator(_Iterator __i)\r\n    { return reverse_iterator<_Iterator>(__i); }\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr reverse_iterator<_Iterator>\r\n    make_reverse_iterator(_Iterator __i)\r\n    { return reverse_iterator<_Iterator>(__i); }\r\n# 657 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Iterator>\r\n   \r\n    auto\r\n    __niter_base(reverse_iterator<_Iterator> __it)\r\n    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))\r\n    { return __make_reverse_iterator(__niter_base(__it.base())); }\r\n\r\n  template<typename _Iterator>\r\n    struct __is_move_iterator<reverse_iterator<_Iterator> >\r\n      : __is_move_iterator<_Iterator>\r\n    { };\r\n\r\n  template<typename _Iterator>\r\n   \r\n    auto\r\n    __miter_base(reverse_iterator<_Iterator> __it)\r\n    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))\r\n    { return __make_reverse_iterator(__miter_base(__it.base())); }\r\n# 688 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Container>\r\n    class back_insert_iterator\r\n    : public iterator<output_iterator_tag, void, void, void, void>\r\n    {\r\n    protected:\r\n      _Container* container;\r\n\r\n    public:\r\n\r\n      typedef _Container container_type;\r\n\r\n\r\n\r\n\r\n"]
[81.314475, "o", "\r\n      explicit\r\n      back_insert_iterator(_Container& __x)\r\n      : container(std::__addressof(__x)) { }\r\n# 726 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n     \r\n      back_insert_iterator&\r\n      operator=(const typename _Container::value_type& __value)\r\n      {\r\n container->push_back(__value);\r\n return *this;\r\n      }\r\n\r\n     \r\n      back_insert_iterator&\r\n      operator=(typename _Container::value_type&& __value)\r\n      {\r\n"]
[81.314514, "o", " container->push_back(std::move(__value));\r\n return *this;\r\n      }\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      back_insert_iterator&\r\n      operator*()\r\n      { return *this; }\r\n\r\n\r\n     \r\n      back_insert_iterator&\r\n      operator++()\r\n      { return *this; }\r\n\r\n"]
[81.314548, "o", "\r\n     \r\n      back_insert_iterator\r\n      operator++(int)\r\n      { return *this; }\r\n    };\r\n# 773 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Container>\r\n    [[__nodiscard__]]\r\n    inline back_insert_iterator<_Container>\r\n    back_inserter(_Container& __x)\r\n    { return back_insert_iterator<_Container>(__x); }\r\n# 789 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n"]
[81.314586, "o", "  template<typename _Container>\r\n    class front_insert_iterator\r\n    : public iterator<output_iterator_tag, void, void, void, void>\r\n    {\r\n    protected:\r\n      _Container* container;\r\n\r\n    public:\r\n\r\n      typedef _Container container_type;\r\n\r\n\r\n\r\n\r\n\r\n      explicit\r\n"]
[81.314624, "o", "      front_insert_iterator(_Container& __x)\r\n      : container(std::__addressof(__x)) { }\r\n# 827 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n     \r\n      front_insert_iterator&\r\n      operator=(const typename _Container::value_type& __value)\r\n      {\r\n container->push_front(__value);\r\n return *this;\r\n      }\r\n\r\n     \r\n"]
[81.314841, "o", "      front_insert_iterator&\r\n      operator=(typename _Container::value_type&& __value)\r\n      {\r\n container->push_front(std::move(__value));\r\n return *this;\r\n      }\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      front_insert_iterator&\r\n      operator*()\r\n      { return *this; }\r\n\r\n\r\n     \r\n      front_insert_iterator&\r\n"]
[81.314923, "o", "      operator++()\r\n      { return *this; }\r\n\r\n\r\n     \r\n      front_insert_iterator\r\n      operator++(int)\r\n      { return *this; }\r\n    };\r\n# 874 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Container>\r\n    [[__nodiscard__]]\r\n    inline front_insert_iterator<_Container>\r\n    front_inserter(_Container& __x)\r\n    { return front_insert_iterator<_Container>(__x); }\r\n# 894 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Container>\r\n    class insert_iterator\r\n    : public iterator<output_iterator_tag, void, void, void, void>\r\n    {\r\n\r\n\r\n\r\n      typedef typename _Container::iterator _Iter;\r\n\r\n    protected:\r\n      _Container* container;\r\n      _Iter iter;\r\n\r\n    public:\r\n\r\n      typedef _Container container_type;\r\n# 919 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n     \r\n      insert_iterator(_Container& __x, _Iter __i)\r\n      : container(std::__addressof(__x)), iter(__i) {}\r\n# 955 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n     \r\n      insert_iterator&\r\n      operator=(const typename _Container::value_type& __value)\r\n      {\r\n iter = container->insert(iter, __value);\r\n ++iter;\r\n return *this;\r\n      }\r\n\r\n     \r\n      insert_iterator&\r\n      operator=(typename _Container::value_type&& __value)\r\n      {\r\n iter = container->insert(iter, std::move(__value));\r\n ++iter;\r\n return *this;\r\n      }\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      insert_iterator&\r\n      operator*()\r\n      { return *this; }\r\n\r\n\r\n     \r\n      insert_iterator&\r\n      operator++()\r\n      { return *this; }\r\n\r\n\r\n     \r\n      insert_iterator&\r\n      operator++(int)\r\n      { return *this; }\r\n    };\r\n\r\n#pragma GCC diagnostic pop\r\n# 1014 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Container>\r\n    [[__nodiscard__]]\r\n    inline insert_iterator<_Container>\r\n    inserter(_Container& __x, typename _Container::iterator __i)\r\n    { return insert_iterator<_Container>(__x, __i); }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nnamespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 1037 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Iterator, typename _Container>\r\n    class __normal_iterator\r\n    {\r\n    protected:\r\n"]
[81.314998, "o", "      _Iterator _M_current;\r\n\r\n      typedef std::iterator_traits<_Iterator> __traits_type;\r\n\r\n\r\n      template<typename _Iter>\r\n using __convertible_from\r\n   = std::__enable_if_t<std::is_convertible<_Iter, _Iterator>::value>;\r\n\r\n\r\n    public:\r\n      typedef _Iterator iterator_type;\r\n      typedef typename __traits_type::iterator_category iterator_category;\r\n      typedef typename __traits_type::value_type value_type;\r\n      typedef typename __traits_type::difference_type difference_type;\r\n      typedef typename __traits_type::reference reference;\r\n      typedef typename __traits_type::pointer pointer;\r\n\r\n\r\n\r\n\r\n\r\n      constexpr __normal_iterator() noexcept\r\n      : _M_current(_Iterator()) { }\r\n\r\n      explicit\r\n      __normal_iterator(const _Iterator& __i) noexcept\r\n      : _M_current(__i) { }\r\n\r\n\r\n\r\n"]
[81.315037, "o", "      template<typename _Iter, typename = __convertible_from<_Iter>>\r\n\r\n __normal_iterator(const __normal_iterator<_Iter, _Container>& __i)\r\n noexcept\r\n# 1085 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n        : _M_current(__i.base()) { }\r\n\r\n\r\n     \r\n      reference\r\n      operator*() const noexcept\r\n      { return *_M_current; }\r\n\r\n     \r\n      pointer\r\n      operator->() const noexcept\r\n      { return _M_current; }\r\n"]
[81.31507, "o", "\r\n     \r\n      __normal_iterator&\r\n      operator++() noexcept\r\n      {\r\n ++_M_current;\r\n return *this;\r\n      }\r\n\r\n     \r\n      __normal_iterator\r\n      operator++(int) noexcept\r\n      { return __normal_iterator(_M_current++); }\r\n\r\n"]
[81.315107, "o", "\r\n     \r\n      __normal_iterator&\r\n      operator--() noexcept\r\n      {\r\n --_M_current;\r\n return *this;\r\n      }\r\n\r\n     \r\n      __normal_iterator\r\n      operator--(int) noexcept\r\n      { return __normal_iterator(_M_current--); }\r\n\r\n\r\n"]
[81.315141, "o", "     \r\n      reference\r\n      operator[](difference_type __n) const noexcept\r\n      { return _M_current[__n]; }\r\n\r\n     \r\n      __normal_iterator&\r\n      operator+=(difference_type __n) noexcept\r\n      { _M_current += __n; return *this; }\r\n\r\n     \r\n      __normal_iterator\r\n"]
[81.315175, "o", "      operator+(difference_type __n) const noexcept\r\n      { return __normal_iterator(_M_current + __n); }\r\n\r\n     \r\n      __normal_iterator&\r\n      operator-=(difference_type __n) noexcept\r\n      { _M_current -= __n; return *this; }\r\n\r\n     \r\n      __normal_iterator\r\n      operator-(difference_type __n) const noexcept\r\n      { return __normal_iterator(_M_current - __n); }\r\n\r\n     \r\n      const _Iterator&\r\n      base() const noexcept\r\n"]
[81.315203, "o", "      { return _M_current; }\r\n"]
[81.315243, "o", "    };\r\n# 1205 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _IteratorL, typename _IteratorR, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\r\n        const __normal_iterator<_IteratorR, _Container>& __rhs)\r\n    noexcept\r\n    { return __lhs.base() == __rhs.base(); }\r\n\r\n  template<typename _Iterator, typename _Container>\r\n"]
[81.315279, "o", "    [[__nodiscard__]]\r\n    inline bool\r\n    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,\r\n        const __normal_iterator<_Iterator, _Container>& __rhs)\r\n    noexcept\r\n    { return __lhs.base() == __rhs.base(); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\r\n        const __normal_iterator<_IteratorR, _Container>& __rhs)\r\n"]
[81.315314, "o", "    noexcept\r\n    { return __lhs.base() != __rhs.base(); }\r\n\r\n  template<typename _Iterator, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,\r\n        const __normal_iterator<_Iterator, _Container>& __rhs)\r\n    noexcept\r\n    { return __lhs.base() != __rhs.base(); }\r\n\r\n\r\n  template<typename _IteratorL, typename _IteratorR, typename _Container>\r\n"]
[81.315349, "o", "    [[__nodiscard__]]\r\n    inline bool\r\n    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\r\n       const __normal_iterator<_IteratorR, _Container>& __rhs)\r\n    noexcept\r\n    { return __lhs.base() < __rhs.base(); }\r\n\r\n  template<typename _Iterator, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,\r\n"]
[81.315389, "o", "       const __normal_iterator<_Iterator, _Container>& __rhs)\r\n    noexcept\r\n    { return __lhs.base() < __rhs.base(); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\r\n       const __normal_iterator<_IteratorR, _Container>& __rhs)\r\n    noexcept\r\n    { return __lhs.base() > __rhs.base(); }\r\n\r\n"]
[81.315433, "o", "  template<typename _Iterator, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,\r\n       const __normal_iterator<_Iterator, _Container>& __rhs)\r\n    noexcept\r\n    { return __lhs.base() > __rhs.base(); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,\r\n        const __normal_iterator<_IteratorR, _Container>& __rhs)\r\n    noexcept\r\n"]
[81.31547, "o", "    { return __lhs.base() <= __rhs.base(); }\r\n\r\n  template<typename _Iterator, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,\r\n        const __normal_iterator<_Iterator, _Container>& __rhs)\r\n    noexcept\r\n    { return __lhs.base() <= __rhs.base(); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,\r\n"]
[81.315505, "o", "        const __normal_iterator<_IteratorR, _Container>& __rhs)\r\n    noexcept\r\n    { return __lhs.base() >= __rhs.base(); }\r\n\r\n  template<typename _Iterator, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,\r\n        const __normal_iterator<_Iterator, _Container>& __rhs)\r\n    noexcept\r\n    { return __lhs.base() >= __rhs.base(); }\r\n\r\n\r\n\r\n"]
[81.315538, "o", "\r\n\r\n\r\n  template<typename _IteratorL, typename _IteratorR, typename _Container>\r\n\r\n\r\n    [[__nodiscard__]]\r\n    inline auto\r\n    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\r\n       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept\r\n    -> decltype(__lhs.base() - __rhs.base())\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.315573, "o", "    { return __lhs.base() - __rhs.base(); }\r\n\r\n  template<typename _Iterator, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline typename __normal_iterator<_Iterator, _Container>::difference_type\r\n    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,\r\n       const __normal_iterator<_Iterator, _Container>& __rhs)\r\n    noexcept\r\n"]
[81.315608, "o", "    { return __lhs.base() - __rhs.base(); }\r\n\r\n  template<typename _Iterator, typename _Container>\r\n    [[__nodiscard__]]\r\n    inline __normal_iterator<_Iterator, _Container>\r\n    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type\r\n       __n, const __normal_iterator<_Iterator, _Container>& __i)\r\n    noexcept\r\n    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }\r\n\r\n\r\n}\r\n\r\n"]
[81.315648, "o", "namespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  template<typename _Iterator, typename _Container>\r\n   \r\n    _Iterator\r\n    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)\r\n    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)\r\n    { return __it.base(); }\r\n\r\n\r\n"]
[81.315687, "o", "\r\n\r\n\r\n\r\n  template<typename _Iterator, typename _Container>\r\n    constexpr auto\r\n    __to_address(const __gnu_cxx::__normal_iterator<_Iterator,\r\n          _Container>& __it) noexcept\r\n    -> decltype(std::__to_address(__it.base()))\r\n"]
[81.31572, "o", "    { return std::__to_address(__it.base()); }\r\n# 1412 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  namespace __detail\r\n  {\r\n# 1428 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  }\r\n# 1439 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Iterator>\r\n    class move_iterator\r\n\r\n\r\n\r\n    {\r\n"]
[81.315753, "o", "      _Iterator _M_current;\r\n\r\n      using __traits_type = iterator_traits<_Iterator>;\r\n\r\n      using __base_ref = typename __traits_type::reference;\r\n\r\n\r\n      template<typename _Iter2>\r\n friend class move_iterator;\r\n# 1478 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n"]
[81.315788, "o", "    public:\r\n      using iterator_type = _Iterator;\r\n# 1490 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n      typedef typename __traits_type::iterator_category iterator_category;\r\n      typedef typename __traits_type::value_type value_type;\r\n      typedef typename __traits_type::difference_type difference_type;\r\n\r\n      typedef _Iterator pointer;\r\n\r\n\r\n      using reference\r\n = __conditional_t<is_reference<__base_ref>::value,\r\n"]
[81.31582, "o", "     typename remove_reference<__base_ref>::type&&,\r\n     __base_ref>;\r\n\r\n\r\n      constexpr\r\n      move_iterator()\r\n      : _M_current() { }\r\n\r\n      explicit constexpr\r\n      move_iterator(iterator_type __i)\r\n      : _M_current(std::move(__i)) { }\r\n\r\n      template<typename _Iter>\r\n\r\n"]
[81.315855, "o", "\r\n\r\n constexpr\r\n move_iterator(const move_iterator<_Iter>& __i)\r\n : _M_current(__i._M_current) { }\r\n\r\n      template<typename _Iter>\r\n\r\n\r\n\r\n\r\n constexpr\r\n move_iterator& operator=(const move_iterator<_Iter>& __i)\r\n {\r\n   _M_current = __i._M_current;\r\n   return *this;\r\n"]
[81.315895, "o", " }\r\n\r\n\r\n      [[__nodiscard__]]\r\n      constexpr iterator_type\r\n      base() const\r\n      { return _M_current; }\r\n# 1548 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n      [[__nodiscard__]]\r\n      constexpr reference\r\n      operator*() const\r\n\r\n"]
[81.315939, "o", "\r\n\r\n      { return static_cast<reference>(*_M_current); }\r\n\r\n\r\n      [[__nodiscard__]]\r\n      constexpr pointer\r\n      operator->() const\r\n      { return _M_current; }\r\n\r\n      constexpr move_iterator&\r\n      operator++()\r\n      {\r\n ++_M_current;\r\n return *this;\r\n      }\r\n\r\n"]
[81.315972, "o", "      constexpr move_iterator\r\n      operator++(int)\r\n      {\r\n move_iterator __tmp = *this;\r\n ++_M_current;\r\n return __tmp;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      constexpr move_iterator&\r\n      operator--()\r\n      {\r\n --_M_current;\r\n return *this;\r\n      }\r\n"]
[81.316008, "o", "\r\n      constexpr move_iterator\r\n      operator--(int)\r\n      {\r\n move_iterator __tmp = *this;\r\n --_M_current;\r\n return __tmp;\r\n      }\r\n\r\n      [[__nodiscard__]]\r\n      constexpr move_iterator\r\n      operator+(difference_type __n) const\r\n      { return move_iterator(_M_current + __n); }\r\n\r\n"]
[81.316041, "o", "      constexpr move_iterator&\r\n      operator+=(difference_type __n)\r\n      {\r\n _M_current += __n;\r\n return *this;\r\n      }\r\n\r\n      [[__nodiscard__]]\r\n      constexpr move_iterator\r\n      operator-(difference_type __n) const\r\n      { return move_iterator(_M_current - __n); }\r\n\r\n      constexpr move_iterator&\r\n      operator-=(difference_type __n)\r\n      {\r\n _M_current -= __n;\r\n"]
[81.316545, "o", " return *this;\r\n      }\r\n\r\n      [[__nodiscard__]]\r\n      constexpr reference\r\n      operator[](difference_type __n) const\r\n\r\n\r\n\r\n      { return std::move(_M_current[__n]); }\r\n# 1662 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n    };\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator==(const move_iterator<_IteratorL>& __x,\r\n        const move_iterator<_IteratorR>& __y)\r\n\r\n\r\n\r\n    { return __x.base() == __y.base(); }\r\n# 1683 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator!=(const move_iterator<_IteratorL>& __x,\r\n        const move_iterator<_IteratorR>& __y)\r\n    { return !(__x == __y); }\r\n\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator<(const move_iterator<_IteratorL>& __x,\r\n       const move_iterator<_IteratorR>& __y)\r\n\r\n\r\n\r\n    { return __x.base() < __y.base(); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator<=(const move_iterator<_IteratorL>& __x,\r\n        const move_iterator<_IteratorR>& __y)\r\n\r\n\r\n\r\n    { return !(__y < __x); }\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator>(const move_iterator<_IteratorL>& __x,\r\n       const move_iterator<_IteratorR>& __y)\r\n\r\n\r\n\r\n    { return __y < __x; }\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator>=(const move_iterator<_IteratorL>& __x,\r\n        const move_iterator<_IteratorR>& __y)\r\n\r\n\r\n\r\n    { return !(__x < __y); }\r\n\r\n\r\n\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator==(const move_iterator<_Iterator>& __x,\r\n        const move_iterator<_Iterator>& __y)\r\n    { return __x.base() == __y.base(); }\r\n# 1749 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator!=(const move_iterator<_Iterator>& __x,\r\n        const move_iterator<_Iterator>& __y)\r\n    { return !(__x == __y); }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator<(const move_iterator<_Iterator>& __x,\r\n       const move_iterator<_Iterator>& __y)\r\n    { return __x.base() < __y.base(); }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator<=(const move_iterator<_Iterator>& __x,\r\n        const move_iterator<_Iterator>& __y)\r\n    { return !(__y < __x); }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator>(const move_iterator<_Iterator>& __x,\r\n       const move_iterator<_Iterator>& __y)\r\n    { return __y < __x; }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr bool\r\n    operator>=(const move_iterator<_Iterator>& __x,\r\n        const move_iterator<_Iterator>& __y)\r\n    { return !(__x < __y); }\r\n\r\n\r\n\r\n  template<typename _IteratorL, typename _IteratorR>\r\n    [[__nodiscard__]]\r\n    inline constexpr auto\r\n    operator-(const move_iterator<_IteratorL>& __x,\r\n       const move_iterator<_IteratorR>& __y)\r\n    -> decltype(__x.base() - __y.base())\r\n    { return __x.base() - __y.base(); }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr move_iterator<_Iterator>\r\n    operator+(typename move_iterator<_Iterator>::difference_type __n,\r\n       const move_iterator<_Iterator>& __x)\r\n    { return __x + __n; }\r\n\r\n  template<typename _Iterator>\r\n    [[__nodiscard__]]\r\n    inline constexpr move_iterator<_Iterator>\r\n    make_move_iterator(_Iterator __i)\r\n    { return move_iterator<_Iterator>(std::move(__i)); }\r\n\r\n  template<typename _Iterator, typename _ReturnType\r\n    = __conditional_t<__move_if_noexcept_cond\r\n      <typename iterator_traits<_Iterator>::value_type>::value,\r\n  _Iterator, move_iterator<_Iterator>>>\r\n    inline constexpr _Retur"]
[81.316575, "o", "nType\r\n    __make_move_if_noexcept_iterator(_Iterator __i)\r\n    { return _ReturnType(__i); }\r\n\r\n\r\n\r\n  template<typename _Tp, typename _ReturnType\r\n    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,\r\n        const _Tp*, move_iterator<_Tp*>>>\r\n    inline constexpr _ReturnType\r\n    __make_move_if_noexcept_iterator(_Tp* __i)\r\n"]
[81.31699, "o", "    { return _ReturnType(__i); }\r\n# 2960 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n  template<typename _Iterator>\r\n   \r\n    auto\r\n    __niter_base(move_iterator<_Iterator> __it)\r\n    -> decltype(make_move_iterator(__niter_base(__it.base())))\r\n    { return make_move_iterator(__niter_base(__it.base())); }\r\n\r\n"]
[81.317031, "o", "  template<typename _Iterator>\r\n    struct __is_move_iterator<move_iterator<_Iterator> >\r\n    {\r\n      enum { __value = 1 };\r\n      typedef __true_type __type;\r\n    };\r\n\r\n  template<typename _Iterator>\r\n   \r\n    auto\r\n    __miter_base(move_iterator<_Iterator> __it)\r\n    -> decltype(__miter_base(__it.base()))\r\n    { return __miter_base(__it.base()); }\r\n# 2992 \"/usr/include/c++/14.2.1/bits/stl_iterator.h\" 3\r\n"]
[81.317066, "o", "  template<typename _InputIterator>\r\n    using __iter_key_t = remove_const_t<\r\n\r\n\r\n\r\n      typename iterator_traits<_InputIterator>::value_type::first_type>;\r\n\r\n\r\n  template<typename _InputIterator>\r\n    using __iter_val_t\r\n\r\n\r\n\r\n      = typename iterator_traits<_InputIterator>::value_type::second_type;\r\n\r\n\r\n"]
[81.317101, "o", "  template<typename _T1, typename _T2>\r\n    struct pair;\r\n\r\n  template<typename _InputIterator>\r\n    using __iter_to_alloc_t\r\n      = pair<const __iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>>;\r\n\r\n\r\n\r\n}\r\n# 49 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.317245, "o", "# 1 \"/usr/include/c++/14.2.1/bits/stl_function.h\" 1 3\r\n# 63 \"/usr/include/c++/14.2.1/bits/stl_function.h\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 116 \"/usr/include/c++/14.2.1/bits/stl_function.h\" 3\r\n  template<typename _Arg, typename _Result>\r\n    struct unary_function\r\n    {\r\n\r\n      typedef _Arg argument_type;\r\n\r\n\r\n      typedef _Result result_type;\r\n    } __attribute__ ((__deprecated__));\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Arg1, typename _Arg2, typename _Result>\r\n    struct binary_function\r\n    {\r\n\r\n      typedef _Arg1 first_argument_type;\r\n\r\n\r\n      typedef _Arg2 second_argument_type;\r\n\r\n\r\n      typedef _Result result_type;\r\n    } __attribute__ ((__deprecated__));\r\n# 157 \"/usr/include/c++/14.2.1/bits/stl_function.h\" 3\r\n  struct __is_transparent;\r\n\r\n  template<typename _Tp = void>\r\n    struct plus;\r\n\r\n"]
[81.317286, "o", "  template<typename _Tp = void>\r\n    struct minus;\r\n\r\n  template<typename _Tp = void>\r\n    struct multiplies;\r\n\r\n  template<typename _Tp = void>\r\n    struct divides;\r\n\r\n  template<typename _Tp = void>\r\n    struct modulus;\r\n\r\n  template<typename _Tp = void>\r\n    struct negate;\r\n\r\n\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n"]
[81.317321, "o", "\r\n\r\n  template<typename _Tp>\r\n    struct plus : public binary_function<_Tp, _Tp, _Tp>\r\n    {\r\n\r\n      constexpr\r\n      _Tp\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x + __y; }\r\n    };\r\n\r\n\r\n"]
[81.317353, "o", "  template<typename _Tp>\r\n    struct minus : public binary_function<_Tp, _Tp, _Tp>\r\n    {\r\n      constexpr\r\n      _Tp\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x - __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct multiplies : public binary_function<_Tp, _Tp, _Tp>\r\n    {\r\n"]
[81.317396, "o", "      constexpr\r\n      _Tp\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x * __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct divides : public binary_function<_Tp, _Tp, _Tp>\r\n    {\r\n      constexpr\r\n      _Tp\r\n"]
[81.317434, "o", "      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x / __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct modulus : public binary_function<_Tp, _Tp, _Tp>\r\n    {\r\n      constexpr\r\n      _Tp\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x % __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct negate : public unary_function<_Tp, _Tp>\r\n    {\r\n"]
[81.317466, "o", "      constexpr\r\n      _Tp\r\n      operator()(const _Tp& __x) const\r\n      { return -__x; }\r\n    };\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n  template<>\r\n    struct plus<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr\r\n"]
[81.317502, "o", " auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct minus<void>\r\n    {\r\n"]
[81.317693, "o", "      template <typename _Tp, typename _Up>\r\n constexpr\r\n auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }\r\n\r\n"]
[81.317773, "o", "      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct multiplies<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr\r\n auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct divides<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr\r\n auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct modulus<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr\r\n auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct negate<void>\r\n    {\r\n      template <typename _Tp>\r\n constexpr\r\n auto\r\n operator()(_Tp&& __t) const\r\n noexcept(noexcept(-std::forward<_Tp>(__t)))\r\n -> decltype(-std::forward<_Tp>(__t))\r\n { return -std::forward<_Tp>(__t); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n# 346 \"/usr/include/c++/14.2.1/bits/stl_function.h\" 3\r\n  template<typename _Tp = void>\r\n    struct equal_to;\r\n\r\n  template<typename _Tp = void>\r\n    struct not_equal_to;\r\n\r\n  template<typename _Tp = void>\r\n    struct greater;\r\n\r\n  template<typename _Tp = void>\r\n    struct less;\r\n\r\n  template<typename _Tp = void>\r\n    struct greater_equal;\r\n\r\n  template<typename _Tp = void>\r\n    struct less_equal;\r\n\r\n\r\n#pragma GCC diagnostic push\r\n"]
[81.317809, "o", "#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n\r\n\r\n  template<typename _Tp>\r\n    struct equal_to : public binary_function<_Tp, _Tp, bool>\r\n    {\r\n      constexpr\r\n      bool\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x == __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct not_equal_to : public binary_function<_Tp, _Tp, bool>\r\n    {\r\n"]
[81.317843, "o", "      constexpr\r\n      bool\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x != __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct greater : public binary_function<_Tp, _Tp, bool>\r\n    {\r\n      constexpr\r\n      bool\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n"]
[81.317877, "o", "      { return __x > __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct less : public binary_function<_Tp, _Tp, bool>\r\n    {\r\n      constexpr\r\n      bool\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x < __y; }\r\n    };\r\n\r\n\r\n"]
[81.317918, "o", "  template<typename _Tp>\r\n    struct greater_equal : public binary_function<_Tp, _Tp, bool>\r\n    {\r\n      constexpr\r\n      bool\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x >= __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct less_equal : public binary_function<_Tp, _Tp, bool>\r\n    {\r\n      constexpr\r\n      bool\r\n"]
[81.317957, "o", "      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x <= __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>\r\n    {\r\n      constexpr bool\r\n      operator()(_Tp* __x, _Tp* __y) const noexcept\r\n      {\r\n\r\n if (std::__is_constant_evaluated())\r\n   return __x > __y;\r\n\r\n"]
[81.317994, "o", " return (long unsigned int)__x > (long unsigned int)__y;\r\n      }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>\r\n    {\r\n      constexpr bool\r\n      operator()(_Tp* __x, _Tp* __y) const noexcept\r\n      {\r\n\r\n"]
[81.318028, "o", " if (std::__is_constant_evaluated())\r\n   return __x < __y;\r\n\r\n return (long unsigned int)__x < (long unsigned int)__y;\r\n      }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>\r\n    {\r\n      constexpr bool\r\n      operator()(_Tp* __x, _Tp* __y) const noexcept\r\n"]
[81.318064, "o", "      {\r\n\r\n if (std::__is_constant_evaluated())\r\n   return __x >= __y;\r\n\r\n return (long unsigned int)__x >= (long unsigned int)__y;\r\n      }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>\r\n    {\r\n      constexpr bool\r\n"]
[81.3181, "o", "      operator()(_Tp* __x, _Tp* __y) const noexcept\r\n      {\r\n\r\n if (std::__is_constant_evaluated())\r\n   return __x <= __y;\r\n\r\n return (long unsigned int)__x <= (long unsigned int)__y;\r\n      }\r\n    };\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n\r\n  template<>\r\n    struct equal_to<void>\r\n    {\r\n"]
[81.318133, "o", "      template <typename _Tp, typename _Up>\r\n constexpr auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n\r\n"]
[81.318172, "o", "  template<>\r\n    struct not_equal_to<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };"]
[81.318217, "o", "\r\n\r\n\r\n  template<>\r\n    struct greater<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))\r\n {\r\n   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),\r\n"]
[81.318255, "o", "   __ptr_cmp<_Tp, _Up>{});\r\n }\r\n\r\n      template<typename _Tp, typename _Up>\r\n constexpr bool\r\n operator()(_Tp* __t, _Up* __u) const noexcept\r\n { return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n\r\n    private:\r\n      template <typename _Tp, typename _Up>\r\n static constexpr decltype(auto)\r\n _S_cmp(_Tp&& __t, _Up&& __u, false_type)\r\n { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }\r\n\r\n"]
[81.318292, "o", "      template <typename _Tp, typename _Up>\r\n static constexpr bool\r\n _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept\r\n {\r\n   return greater<const volatile void*>{}(\r\n       static_cast<const volatile void*>(std::forward<_Tp>(__t)),\r\n       static_cast<const volatile void*>(std::forward<_Up>(__u)));\r\n }\r\n\r\n\r\n      template<typename _Tp, typename _Up, typename = void>\r\n struct __not_overloaded2 : true_type { };\r\n\r\n\r\n"]
[81.318327, "o", "      template<typename _Tp, typename _Up>\r\n struct __not_overloaded2<_Tp, _Up, __void_t<\r\n   decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>\r\n : false_type { };\r\n\r\n\r\n      template<typename _Tp, typename _Up, typename = void>\r\n struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };\r\n\r\n\r\n      template<typename _Tp, typename _Up>\r\n struct __not_overloaded<_Tp, _Up, __void_t<\r\n"]
[81.318357, "o", "   decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>\r\n : false_type { };\r\n\r\n      template<typename _Tp, typename _Up>\r\n using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,\r\n       is_convertible<_Tp, const volatile void*>,\r\n       is_convertible<_Up, const volatile void*>>;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct less<void>\r\n"]
[81.31839, "o", "    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))\r\n {\r\n   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),\r\n   __ptr_cmp<_Tp, _Up>{});\r\n }\r\n\r\n"]
[81.318424, "o", "      template<typename _Tp, typename _Up>\r\n constexpr bool\r\n operator()(_Tp* __t, _Up* __u) const noexcept\r\n { return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n\r\n    private:\r\n      template <typename _Tp, typename _Up>\r\n static constexpr decltype(auto)\r\n"]
[81.318465, "o", " _S_cmp(_Tp&& __t, _Up&& __u, false_type)\r\n { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }\r\n\r\n      template <typename _Tp, typename _Up>\r\n static constexpr bool\r\n _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept\r\n {\r\n   return less<const volatile void*>{}(\r\n       static_cast<const volatile void*>(std::forward<_Tp>(__t)),\r\n       static_cast<const volatile void*>(std::forward<_Up>(__u)));\r\n }\r\n\r\n\r\n"]
[81.318502, "o", "      template<typename _Tp, typename _Up, typename = void>\r\n struct __not_overloaded2 : true_type { };\r\n\r\n\r\n      template<typename _Tp, typename _Up>\r\n struct __not_overloaded2<_Tp, _Up, __void_t<\r\n   decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>\r\n : false_type { };\r\n\r\n\r\n      template<typename _Tp, typename _Up, typename = void>\r\n struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };\r\n\r\n\r\n      template<typename _Tp, typename _Up>\r\n struct __not_overloaded<_Tp, _Up, __void_t<\r\n"]
[81.318538, "o", "   decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>\r\n : false_type { };\r\n\r\n      template<typename _Tp, typename _Up>\r\n using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,\r\n       is_convertible<_Tp, const volatile void*>,\r\n       is_convertible<_Up, const volatile void*>>;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct greater_equal<void>\r\n    {\r\n"]
[81.31857, "o", "      template <typename _Tp, typename _Up>\r\n constexpr auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))\r\n {\r\n   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),\r\n   __ptr_cmp<_Tp, _Up>{});\r\n }\r\n\r\n      template<typename _Tp, typename _Up>\r\n constexpr bool\r\n"]
[81.318601, "o", " operator()(_Tp* __t, _Up* __u) const noexcept\r\n { return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n\r\n    private:\r\n      template <typename _Tp, typename _Up>\r\n static constexpr decltype(auto)\r\n _S_cmp(_Tp&& __t, _Up&& __u, false_type)\r\n { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }\r\n\r\n"]
[81.318635, "o", "      template <typename _Tp, typename _Up>\r\n static constexpr bool\r\n _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept\r\n {\r\n   return greater_equal<const volatile void*>{}(\r\n       static_cast<const volatile void*>(std::forward<_Tp>(__t)),\r\n       static_cast<const volatile void*>(std::forward<_Up>(__u)));\r\n }\r\n\r\n\r\n      template<typename _Tp, typename _Up, typename = void>\r\n"]
[81.318682, "o", " struct __not_overloaded2 : true_type { };\r\n\r\n\r\n      template<typename _Tp, typename _Up>\r\n struct __not_overloaded2<_Tp, _Up, __void_t<\r\n   decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>\r\n : false_type { };\r\n\r\n\r\n      template<typename _Tp, typename _Up, typename = void>\r\n struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };\r\n\r\n\r\n      template<typename _Tp, typename _Up>\r\n struct __not_overloaded<_Tp, _Up, __void_t<\r\n"]
[81.318725, "o", "   decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>\r\n : false_type { };\r\n\r\n      template<typename _Tp, typename _Up>\r\n using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,\r\n       is_convertible<_Tp, const volatile void*>,\r\n       is_convertible<_Up, const volatile void*>>;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct less_equal<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr auto\r\n"]
[81.31876, "o", " operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))\r\n {\r\n   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),\r\n   __ptr_cmp<_Tp, _Up>{});\r\n }\r\n\r\n      template<typename _Tp, typename _Up>\r\n constexpr bool\r\n operator()(_Tp* __t, _Up* __u) const noexcept\r\n { return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }\r\n\r\n"]
[81.318794, "o", "      typedef __is_transparent is_transparent;\r\n\r\n    private:\r\n      template <typename _Tp, typename _Up>\r\n static constexpr decltype(auto)\r\n _S_cmp(_Tp&& __t, _Up&& __u, false_type)\r\n { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }\r\n\r\n      template <typename _Tp, typename _Up>\r\n static constexpr bool\r\n _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept\r\n {\r\n   return less_equal<const volatile void*>{}(\r\n"]
[81.318826, "o", "       static_cast<const volatile void*>(std::forward<_Tp>(__t)),\r\n       static_cast<const volatile void*>(std::forward<_Up>(__u)));\r\n }\r\n\r\n\r\n      template<typename _Tp, typename _Up, typename = void>\r\n struct __not_overloaded2 : true_type { };\r\n\r\n\r\n      template<typename _Tp, typename _Up>\r\n struct __not_overloaded2<_Tp, _Up, __void_t<\r\n"]
[81.318857, "o", "   decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>\r\n : false_type { };\r\n\r\n\r\n      template<typename _Tp, typename _Up, typename = void>\r\n struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };\r\n\r\n\r\n      template<typename _Tp, typename _Up>\r\n struct __not_overloaded<_Tp, _Up, __void_t<\r\n   decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>\r\n : false_type { };\r\n\r\n"]
[81.31889, "o", "      template<typename _Tp, typename _Up>\r\n using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,\r\n       is_convertible<_Tp, const volatile void*>,\r\n       is_convertible<_Up, const volatile void*>>;\r\n    };\r\n# 778 \"/usr/include/c++/14.2.1/bits/stl_function.h\" 3\r\n  template<typename _Tp = void>\r\n    struct logical_and;\r\n\r\n  template<typename _Tp = void>\r\n    struct logical_or;\r\n"]
[81.318921, "o", "\r\n  template<typename _Tp = void>\r\n    struct logical_not;\r\n\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.318959, "o", "    struct logical_and : public binary_function<_Tp, _Tp, bool>\r\n    {\r\n      constexpr\r\n      bool\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x && __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct logical_or : public binary_function<_Tp, _Tp, bool>\r\n    {\r\n"]
[81.318992, "o", "      constexpr\r\n      bool\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x || __y; }\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct logical_not : public unary_function<_Tp, bool>\r\n    {\r\n      constexpr\r\n      bool\r\n      operator()(const _Tp& __x) const\r\n"]
[81.319027, "o", "      { return !__x; }\r\n    };\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n\r\n  template<>\r\n    struct logical_and<void>\r\n    {\r\n"]
[81.319057, "o", "      template <typename _Tp, typename _Up>\r\n constexpr\r\n auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }\r\n\r\n"]
[81.319086, "o", "      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct logical_or<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr\r\n auto\r\n"]
[81.319121, "o", " operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }\r\n\r\n"]
[81.319153, "o", "      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct logical_not<void>\r\n    {\r\n      template <typename _Tp>\r\n constexpr\r\n auto\r\n"]
[81.319825, "o", " operator()(_Tp&& __t) const\r\n noexcept(noexcept(!std::forward<_Tp>(__t)))\r\n -> decltype(!std::forward<_Tp>(__t))\r\n { return !std::forward<_Tp>(__t); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n\r\n\r\n\r\n  template<typename _Tp = void>\r\n    struct bit_and;\r\n\r\n  template<typename _Tp = void>\r\n    struct bit_or;\r\n\r\n  template<typename _Tp = void>\r\n    struct bit_xor;\r\n\r\n  template<typename _Tp = void>\r\n    struct bit_not;\r\n\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct bit_and : public binary_function<_Tp, _Tp, _Tp>\r\n    {\r\n      constexpr\r\n      _Tp\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x & __y; }\r\n    };\r\n\r\n  template<typename _Tp>\r\n    struct bit_or : public binary_function<_Tp, _Tp, _Tp>\r\n    {\r\n      constexpr\r\n      _Tp\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x | __y; }\r\n    };\r\n\r\n  template<typename _Tp>\r\n    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>\r\n    {\r\n      constexpr\r\n      _Tp\r\n      operator()(const _Tp& __x, const _Tp& __y) const\r\n      { return __x ^ __y; }\r\n    };\r\n\r\n  template<typename _Tp>\r\n    struct bit_not : public unary_function<_Tp, _Tp>\r\n    {\r\n    constexpr\r\n      _Tp\r\n      operator()(const _Tp& __x) const\r\n      { return ~__x; }\r\n    };\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n  template <>\r\n    struct bit_and<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr\r\n auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n  template <>\r\n    struct bit_or<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr\r\n auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n  template <>\r\n    struct bit_xor<void>\r\n    {\r\n      template <typename _Tp, typename _Up>\r\n constexpr\r\n auto\r\n operator()(_Tp&& __t, _Up&& __u) const\r\n noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))\r\n -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))\r\n { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n  template <>\r\n    struct bit_not<void>\r\n    {\r\n      template <typename _Tp>\r\n constexpr\r\n auto\r\n operator()(_Tp&& __t) const\r\n noexcept(noexcept(~std::forward<_Tp>(__t)))\r\n -> decltype(~std::forward<_Tp>(__t))\r\n { return ~std::forward<_Tp>(__t); }\r\n\r\n      typedef __is_transparent is_transparent;\r\n    };\r\n\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n# 1020 \"/usr/include/c++/14.2.1/bits/stl_function.h\" 3\r\n  template<typename _Predicate>\r\n    class [[__deprecated__]] unary_negate\r\n    : public unary_function<typename _Predicate::argument_type, bool>\r\n    {\r\n    protected:\r\n      _Predicate _M_pred;\r\n\r\n    public:\r\n      constexpr\r\n      explicit\r\n      unary_negate(const _Predicate& __x) : _M_pred(__x) { }\r\n\r\n      constexpr\r\n      bool\r\n      operator()(const typename _Predicate::argument_type& __x) const\r\n      { return !_M_pred(__x); }\r\n    };\r\n\r\n\r\n  template<typename _Predicate>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::not_fn\" \"' instead\")))\r\n    constexpr\r\n    inline unary_negate<_Predicate>\r\n    not1(const _Predicate& __pred)\r\n    { return unary_negate<_Predicate>(__pred); }\r\n\r\n\r\n  template<typename _Predicate>\r\n    class [[__deprecated__]] binary_negate\r\n    : public binary_function<typename _Predicate::first_argument_type,\r\n        typename _Predicate::second_argument_type, bool>\r\n    {\r\n    protected:\r\n      _Predicate _M_pred;\r\n\r\n    public:\r\n      constexpr\r\n      explicit\r\n      binary_negate(const _Predicate& __x) : _M_pred(__x) { }\r\n\r\n      constexpr\r\n      bool\r\n"]
[81.319921, "o", "      operator()(const typename _Predicate::first_argument_type& __x,\r\n   const typename _Predicate::second_argument_type& __y) const\r\n      { return !_M_pred(__x, __y); }\r\n    };\r\n\r\n\r\n  template<typename _Predicate>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::not_fn\" \"' instead\")))\r\n    constexpr\r\n    inline binary_negate<_Predicate>\r\n    not2(const _Predicate& __pred)\r\n    { return binary_negate<_Predicate>(__pred); }\r\n# 1101 \"/usr/include/c++/14.2.1/bits/stl_function.h\" 3\r\n  template<typename _Arg, typename _Result>\r\n    class pointer_to_unary_function : public unary_function<_Arg, _Result>\r\n    {\r\n    protected:\r\n      _Result (*_M_ptr)(_Arg);\r\n\r\n    public:\r\n      pointer_to_unary_function() { }\r\n\r\n      explicit\r\n"]
[81.319953, "o", "      pointer_to_unary_function(_Result (*__x)(_Arg))\r\n      : _M_ptr(__x) { }\r\n\r\n      _Result\r\n      operator()(_Arg __x) const\r\n      { return _M_ptr(__x); }\r\n    } __attribute__ ((__deprecated__));\r\n\r\n\r\n  template<typename _Arg, typename _Result>\r\n"]
[81.319983, "o", "    __attribute__ ((__deprecated__ (\"use '\" \"std::function\" \"' instead\")))\r\n    inline pointer_to_unary_function<_Arg, _Result>\r\n    ptr_fun(_Result (*__x)(_Arg))\r\n    { return pointer_to_unary_function<_Arg, _Result>(__x); }\r\n\r\n\r\n  template<typename _Arg1, typename _Arg2, typename _Result>\r\n"]
[81.320017, "o", "    class pointer_to_binary_function\r\n    : public binary_function<_Arg1, _Arg2, _Result>\r\n    {\r\n    protected:\r\n      _Result (*_M_ptr)(_Arg1, _Arg2);\r\n\r\n    public:\r\n      pointer_to_binary_function() { }\r\n\r\n"]
[81.320049, "o", "      explicit\r\n      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))\r\n      : _M_ptr(__x) { }\r\n\r\n      _Result\r\n      operator()(_Arg1 __x, _Arg2 __y) const\r\n      { return _M_ptr(__x, __y); }\r\n"]
[81.320086, "o", "    } __attribute__ ((__deprecated__));\r\n\r\n\r\n  template<typename _Arg1, typename _Arg2, typename _Result>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::function\" \"' instead\")))\r\n    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>\r\n    ptr_fun(_Result (*__x)(_Arg1, _Arg2))\r\n    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }\r\n\r\n\r\n"]
[81.320117, "o", "  template<typename _Tp>\r\n    struct _Identity\r\n    : public unary_function<_Tp, _Tp>\r\n    {\r\n      _Tp&\r\n      operator()(_Tp& __x) const\r\n      { return __x; }\r\n\r\n      const _Tp&\r\n      operator()(const _Tp& __x) const\r\n"]
[81.320151, "o", "      { return __x; }\r\n    };\r\n\r\n\r\n  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };\r\n\r\n  template<typename _Pair>\r\n    struct _Select1st\r\n"]
[81.320183, "o", "    : public unary_function<_Pair, typename _Pair::first_type>\r\n    {\r\n      typename _Pair::first_type&\r\n      operator()(_Pair& __x) const\r\n      { return __x.first; }\r\n\r\n      const typename _Pair::first_type&\r\n      operator()(const _Pair& __x) const\r\n      { return __x.first; }\r\n\r\n\r\n"]
[81.320218, "o", "      template<typename _Pair2>\r\n        typename _Pair2::first_type&\r\n        operator()(_Pair2& __x) const\r\n        { return __x.first; }\r\n\r\n      template<typename _Pair2>\r\n        const typename _Pair2::first_type&\r\n        operator()(const _Pair2& __x) const\r\n"]
[81.320253, "o", "        { return __x.first; }\r\n\r\n    };\r\n\r\n  template<typename _Pair>\r\n    struct _Select2nd\r\n    : public unary_function<_Pair, typename _Pair::second_type>\r\n    {\r\n      typename _Pair::second_type&\r\n      operator()(_Pair& __x) const\r\n      { return __x.second; }\r\n\r\n      const typename _Pair::second_type&\r\n"]
[81.320293, "o", "      operator()(const _Pair& __x) const\r\n      { return __x.second; }\r\n    };\r\n# 1228 \"/usr/include/c++/14.2.1/bits/stl_function.h\" 3\r\n  template<typename _Ret, typename _Tp>\r\n    class mem_fun_t : public unary_function<_Tp*, _Ret>\r\n    {\r\n    public:\r\n      explicit\r\n      mem_fun_t(_Ret (_Tp::*__pf)())\r\n      : _M_f(__pf) { }\r\n\r\n"]
[81.320336, "o", "      _Ret\r\n      operator()(_Tp* __p) const\r\n      { return (__p->*_M_f)(); }\r\n\r\n    private:\r\n      _Ret (_Tp::*_M_f)();\r\n    } __attribute__ ((__deprecated__));\r\n\r\n\r\n  template<typename _Ret, typename _Tp>\r\n    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>\r\n    {\r\n    public:\r\n"]
[81.320375, "o", "      explicit\r\n      const_mem_fun_t(_Ret (_Tp::*__pf)() const)\r\n      : _M_f(__pf) { }\r\n\r\n      _Ret\r\n      operator()(const _Tp* __p) const\r\n      { return (__p->*_M_f)(); }\r\n\r\n    private:\r\n      _Ret (_Tp::*_M_f)() const;\r\n    } __attribute__ ((__deprecated__));\r\n\r\n\r\n  template<typename _Ret, typename _Tp>\r\n"]
[81.320405, "o", "    class mem_fun_ref_t : public unary_function<_Tp, _Ret>\r\n    {\r\n    public:\r\n      explicit\r\n      mem_fun_ref_t(_Ret (_Tp::*__pf)())\r\n      : _M_f(__pf) { }\r\n\r\n      _Ret\r\n      operator()(_Tp& __r) const\r\n      { return (__r.*_M_f)(); }\r\n\r\n"]
[81.320438, "o", "    private:\r\n      _Ret (_Tp::*_M_f)();\r\n    } __attribute__ ((__deprecated__));\r\n\r\n\r\n  template<typename _Ret, typename _Tp>\r\n    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>\r\n    {\r\n    public:\r\n"]
[81.32047, "o", "      explicit\r\n      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)\r\n      : _M_f(__pf) { }\r\n\r\n      _Ret\r\n      operator()(const _Tp& __r) const\r\n      { return (__r.*_M_f)(); }\r\n\r\n"]
[81.3205, "o", "    private:\r\n      _Ret (_Tp::*_M_f)() const;\r\n    } __attribute__ ((__deprecated__));\r\n\r\n\r\n  template<typename _Ret, typename _Tp, typename _Arg>\r\n    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>\r\n    {\r\n"]
[81.320536, "o", "    public:\r\n      explicit\r\n      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))\r\n      : _M_f(__pf) { }\r\n\r\n      _Ret\r\n      operator()(_Tp* __p, _Arg __x) const\r\n      { return (__p->*_M_f)(__x); }\r\n\r\n"]
[81.320569, "o", "    private:\r\n      _Ret (_Tp::*_M_f)(_Arg);\r\n    } __attribute__ ((__deprecated__));\r\n\r\n\r\n  template<typename _Ret, typename _Tp, typename _Arg>\r\n    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>\r\n    {\r\n    public:\r\n      explicit\r\n"]
[81.32061, "o", "      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)\r\n      : _M_f(__pf) { }\r\n\r\n      _Ret\r\n      operator()(const _Tp* __p, _Arg __x) const\r\n      { return (__p->*_M_f)(__x); }\r\n\r\n    private:\r\n      _Ret (_Tp::*_M_f)(_Arg) const;\r\n    } __attribute__ ((__deprecated__));\r\n\r\n\r\n"]
[81.320647, "o", "  template<typename _Ret, typename _Tp, typename _Arg>\r\n    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>\r\n    {\r\n    public:\r\n      explicit\r\n      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))\r\n      : _M_f(__pf) { }\r\n\r\n      _Ret\r\n      operator()(_Tp& __r, _Arg __x) const\r\n      { return (__r.*_M_f)(__x); }\r\n\r\n    private:\r\n"]
[81.32068, "o", "      _Ret (_Tp::*_M_f)(_Arg);\r\n    } __attribute__ ((__deprecated__));\r\n\r\n\r\n  template<typename _Ret, typename _Tp, typename _Arg>\r\n    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>\r\n    {\r\n    public:\r\n      explicit\r\n      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)\r\n      : _M_f(__pf) { }\r\n\r\n"]
[81.32071, "o", "      _Ret\r\n      operator()(const _Tp& __r, _Arg __x) const\r\n      { return (__r.*_M_f)(__x); }\r\n\r\n    private:\r\n      _Ret (_Tp::*_M_f)(_Arg) const;\r\n    } __attribute__ ((__deprecated__));\r\n\r\n"]
[81.32117, "o", "\r\n\r\n  template<typename _Ret, typename _Tp>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::mem_fn\" \"' instead\")))\r\n    inline mem_fun_t<_Ret, _Tp>\r\n    mem_fun(_Ret (_Tp::*__f)())\r\n    { return mem_fun_t<_Ret, _Tp>(__f); }\r\n\r\n  template<typename _Ret, typename _Tp>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::mem_fn\" \"' instead\")))\r\n    inline const_mem_fun_t<_Ret, _Tp>\r\n    mem_fun(_Ret (_Tp::*__f)() const)\r\n    { return const_mem_fun_t<_Ret, _Tp>(__f); }\r\n\r\n  template<typename _Ret, typename _Tp>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::mem_fn\" \"' instead\")))\r\n    inline mem_fun_ref_t<_Ret, _Tp>\r\n    mem_fun_ref(_Ret (_Tp::*__f)())\r\n    { return mem_fun_ref_t<_Ret, _Tp>(__f); }\r\n\r\n  template<typename _Ret, typename _Tp>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::mem_fn\" \"' instead\")))\r\n    inline const_mem_fun_ref_t<_Ret, _Tp>\r\n    mem_fun_ref(_Ret (_Tp::*__f)() const)\r\n    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }\r\n\r\n  template<typename _Ret, typename _Tp, typename _Arg>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::mem_fn\" \"' instead\")))\r\n    inline mem_fun1_t<_Ret, _Tp, _Arg>\r\n    mem_fun(_Ret (_Tp::*__f)(_Arg))\r\n    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\r\n\r\n  template<typename _Ret, typename _Tp, typename _Arg>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::mem_fn\" \"' instead\")))\r\n    inline const_mem_fun1_t<_Ret, _Tp, _Arg>\r\n    mem_fun(_Ret (_Tp::*__f)(_Arg) const)\r\n    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\r\n\r\n  template<typename _Ret, typename _Tp, typename _Arg>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::mem_fn\" \"' instead\")))\r\n    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>\r\n    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))\r\n    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\r\n\r\n  template<typename _Ret, typename _Tp, typename _Arg>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::mem_fn\" \"' instead\")))\r\n    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>\r\n    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)\r\n    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n\r\n\r\n  template<typename _Func, typename _SfinaeType, typename = __void_t<>>\r\n    struct __has_is_transparent\r\n    { };\r\n\r\n  template<typename _Func, typename _SfinaeType>\r\n    struct __has_is_transparent<_Func, _SfinaeType,\r\n    __void_t<typename _Func::is_transparent>>\r\n    { typedef void type; };\r\n\r\n  template<typename _Func, typename _SfinaeType>\r\n    using __has_is_transparent_t\r\n      = typename __has_is_transparent<_Func, _SfinaeType>::type;\r\n\r\n\r\n\r\n}\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/backward/binders.h\" 1 3\r\n"]
[81.321247, "o", "# 60 \"/usr/include/c++/14.2.1/backward/binders.h\" 3\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 107 \"/usr/include/c++/14.2.1/backward/binders.h\" 3\r\n  template<typename _Operation>\r\n    class binder1st\r\n    : public unary_function<typename _Operation::second_argument_type,\r\n       typename _Operation::result_type>\r\n    {\r\n    protected:\r\n      _Operation op;\r\n      typename _Operation::first_argument_type value;\r\n\r\n    public:\r\n      binder1st(const _Operation& __x,\r\n"]
[81.321286, "o", "  const typename _Operation::first_argument_type& __y)\r\n      : op(__x), value(__y) { }\r\n\r\n      typename _Operation::result_type\r\n      operator()(const typename _Operation::second_argument_type& __x) const\r\n      { return op(value, __x); }\r\n\r\n\r\n\r\n      typename _Operation::result_type\r\n"]
[81.321321, "o", "      operator()(typename _Operation::second_argument_type& __x) const\r\n      { return op(value, __x); }\r\n    } __attribute__ ((__deprecated__ (\"use '\" \"std::bind\" \"' instead\")));\r\n\r\n\r\n  template<typename _Operation, typename _Tp>\r\n"]
[81.321355, "o", "    __attribute__ ((__deprecated__ (\"use '\" \"std::bind\" \"' instead\")))\r\n    inline binder1st<_Operation>\r\n    bind1st(const _Operation& __fn, const _Tp& __x)\r\n    {\r\n      typedef typename _Operation::first_argument_type _Arg1_type;\r\n      return binder1st<_Operation>(__fn, _Arg1_type(__x));\r\n"]
[81.321395, "o", "    }\r\n\r\n\r\n  template<typename _Operation>\r\n    class binder2nd\r\n    : public unary_function<typename _Operation::first_argument_type,\r\n       typename _Operation::result_type>\r\n    {\r\n    protected:\r\n      _Operation op;\r\n"]
[81.321424, "o", "      typename _Operation::second_argument_type value;\r\n\r\n    public:\r\n      binder2nd(const _Operation& __x,\r\n  const typename _Operation::second_argument_type& __y)\r\n      : op(__x), value(__y) { }\r\n\r\n      typename _Operation::result_type\r\n      operator()(const typename _Operation::first_argument_type& __x) const\r\n"]
[81.321459, "o", "      { return op(__x, value); }\r\n\r\n\r\n\r\n      typename _Operation::result_type\r\n      operator()(typename _Operation::first_argument_type& __x) const\r\n      { return op(__x, value); }\r\n    } __attribute__ ((__deprecated__ (\"use '\" \"std::bind\" \"' instead\")));\r\n\r\n\r\n"]
[81.32149, "o", "  template<typename _Operation, typename _Tp>\r\n    __attribute__ ((__deprecated__ (\"use '\" \"std::bind\" \"' instead\")))\r\n    inline binder2nd<_Operation>\r\n    bind2nd(const _Operation& __fn, const _Tp& __x)\r\n    {\r\n      typedef typename _Operation::second_argument_type _Arg2_type;\r\n"]
[81.321523, "o", "      return binder2nd<_Operation>(__fn, _Arg2_type(__x));\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n#pragma GCC diagnostic pop\r\n# 1436 \"/usr/include/c++/14.2.1/bits/stl_function.h\" 2 3\r\n# 50 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.321757, "o", "# 1 \"/usr/include/c++/14.2.1/ext/numeric_traits.h\" 1 3\r\n# 32 \"/usr/include/c++/14.2.1/ext/numeric_traits.h\" 3\r\n       \r\n# 33 \"/usr/include/c++/14.2.1/ext/numeric_traits.h\" 3\r\n\r\n\r\n\r\n\r\nnamespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 50 \"/usr/include/c++/14.2.1/ext/numeric_traits.h\" 3\r\n  template<typename _Tp>\r\n    struct __is_integer_nonstrict\r\n    : public std::__is_integer<_Tp>\r\n    {\r\n      using std::__is_integer<_Tp>::__value;\r\n\r\n\r\n      enum { __width = __value ? sizeof(_Tp) * 8 : 0 };\r\n    };\r\n\r\n  template<typename _Value>\r\n    struct __numeric_traits_integer\r\n    {\r\n\r\n      static_assert(__is_integer_nonstrict<_Value>::__value,\r\n      \"invalid specialization\");\r\n\r\n\r\n\r\n\r\n      static const bool __is_signed = (_Value)(-1) < 0;\r\n      static const int __digits\r\n = __is_integer_nonstrict<_Value>::__width - __is_signed;\r\n\r\n\r\n      static const _Value __max = __is_signed\r\n ? (((((_Value)1 << (__digits - 1)) - 1) << 1) + 1)\r\n : ~(_Value)0;\r\n      static const _Value __min = __is_signed ? -__max - 1 : (_Value)0;\r\n    };\r\n\r\n  template<typename _Value>\r\n    const _Value __numeric_traits_integer<_Value>::__min;\r\n\r\n  template<typename _Value>\r\n    const _Value __numeric_traits_integer<_Value>::__max;\r\n\r\n  template<typename _Value>\r\n    const bool __numeric_traits_integer<_Value>::__is_signed;\r\n\r\n  template<typename _Value>\r\n"]
[81.321788, "o", "    const int __numeric_traits_integer<_Value>::__digits;\r\n# 137 \"/usr/include/c++/14.2.1/ext/numeric_traits.h\" 3\r\n  template<typename _Tp>\r\n"]
[81.32182, "o", "    using __int_traits = __numeric_traits_integer<_Tp>;\r\n# 157 \"/usr/include/c++/14.2.1/ext/numeric_traits.h\" 3\r\n  template<typename _Value>\r\n    struct __numeric_traits_floating\r\n    {\r\n\r\n"]
[81.321847, "o", "      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);\r\n\r\n\r\n      static const bool __is_signed = true;\r\n"]
[81.321886, "o", "      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);\r\n      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);\r\n    };\r\n\r\n"]
[81.321923, "o", "  template<typename _Value>\r\n    const int __numeric_traits_floating<_Value>::__max_digits10;\r\n\r\n  template<typename _Value>\r\n    const bool __numeric_traits_floating<_Value>::__is_signed;\r\n\r\n  template<typename _Value>\r\n    const int __numeric_traits_floating<_Value>::__digits10;\r\n\r\n  template<typename _Value>\r\n    const int __numeric_traits_floating<_Value>::__max_exponent10;\r\n\r\n\r\n"]
[81.321964, "o", "\r\n\r\n\r\n\r\n  template<typename _Value>\r\n    struct __numeric_traits\r\n    : public __numeric_traits_integer<_Value>\r\n    { };\r\n\r\n  template<>\r\n    struct __numeric_traits<float>\r\n    : public __numeric_traits_floating<float>\r\n    { };\r\n\r\n  template<>\r\n"]
[81.321993, "o", "    struct __numeric_traits<double>\r\n    : public __numeric_traits_floating<double>\r\n    { };\r\n\r\n  template<>\r\n    struct __numeric_traits<long double>\r\n    : public __numeric_traits_floating<long double>\r\n    { };\r\n"]
[81.322024, "o", "# 238 \"/usr/include/c++/14.2.1/ext/numeric_traits.h\" 3\r\n\r\n}\r\n# 51 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.322229, "o", "# 1 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 1 3\r\n# 64 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 1 3\r\n# 62 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/utility.h\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/bits/utility.h\" 3\r\n       \r\n# 37 \"/usr/include/c++/14.2.1/bits/utility.h\" 3\r\n\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct tuple_size;\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp,\r\n    typename _Up = typename remove_cv<_Tp>::type,\r\n"]
[81.322311, "o", "    typename = typename enable_if<is_same<_Tp, _Up>::value>::type,\r\n    size_t = tuple_size<_Tp>::value>\r\n    using __enable_if_has_tuple_size = _Tp;\r\n\r\n  template<typename _Tp>\r\n    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>\r\n    : public tuple_size<_Tp> { };\r\n\r\n  template<typename _Tp>\r\n    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>\r\n    : public tuple_size<_Tp> { };\r\n\r\n  template<typename _Tp>\r\n    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>\r\n    : public tuple_size<_Tp> { };\r\n\r\n\r\n  template<typename _Tp>\r\n    inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;\r\n\r\n\r\n\r\n  template<size_t __i, typename _Tp>\r\n    struct tuple_element;\r\n\r\n\r\n  template<size_t __i, typename _Tp>\r\n    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;\r\n\r\n  template<size_t __i, typename _Tp>\r\n"]
[81.322349, "o", "    struct tuple_element<__i, const _Tp>\r\n    {\r\n      using type = const __tuple_element_t<__i, _Tp>;\r\n    };\r\n\r\n  template<size_t __i, typename _Tp>\r\n    struct tuple_element<__i, volatile _Tp>\r\n    {\r\n      using type = volatile __tuple_element_t<__i, _Tp>;\r\n    };\r\n\r\n  template<size_t __i, typename _Tp>\r\n"]
[81.322379, "o", "    struct tuple_element<__i, const volatile _Tp>\r\n    {\r\n      using type = const volatile __tuple_element_t<__i, _Tp>;\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, typename... _Types>\r\n    constexpr size_t\r\n"]
[81.322411, "o", "    __find_uniq_type_in_pack()\r\n    {\r\n      constexpr size_t __sz = sizeof...(_Types);\r\n      constexpr bool __found[__sz] = { __is_same(_Tp, _Types) ... };\r\n      size_t __n = __sz;\r\n"]
[81.322446, "o", "      for (size_t __i = 0; __i < __sz; ++__i)\r\n {\r\n   if (__found[__i])\r\n     {\r\n       if (__n < __sz)\r\n  return __sz;\r\n       __n = __i;\r\n     }\r\n }\r\n      return __n;\r\n"]
[81.32248, "o", "    }\r\n# 134 \"/usr/include/c++/14.2.1/bits/utility.h\" 3\r\n  template<size_t __i, typename _Tp>\r\n    using tuple_element_t = typename tuple_element<__i, _Tp>::type;\r\n\r\n\r\n\r\n\r\n  template<size_t... _Indexes> struct _Index_tuple { };\r\n\r\n"]
[81.322513, "o", "\r\n  template<size_t _Num>\r\n    struct _Build_index_tuple\r\n    {\r\n# 154 \"/usr/include/c++/14.2.1/bits/utility.h\" 3\r\n"]
[81.322545, "o", "      using __type = _Index_tuple<__integer_pack(_Num)...>;\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, _Tp... _Idx>\r\n    struct integer_sequence\r\n    {\r\n\r\n\r\n\r\n"]
[81.322577, "o", "      typedef _Tp value_type;\r\n      static constexpr size_t size() noexcept { return sizeof...(_Idx); }\r\n    };\r\n\r\n\r\n  template<typename _Tp, _Tp _Num>\r\n    using make_integer_sequence\r\n\r\n\r\n"]
[81.322612, "o", "\r\n      = integer_sequence<_Tp, __integer_pack(_Num)...>;\r\n\r\n\r\n\r\n  template<size_t... _Idx>\r\n    using index_sequence = integer_sequence<size_t, _Idx...>;\r\n\r\n\r\n  template<size_t _Num>\r\n"]
[81.32265, "o", "    using make_index_sequence = make_integer_sequence<size_t, _Num>;\r\n\r\n\r\n  template<typename... _Types>\r\n    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;\r\n\r\n\r\n\r\n\r\n  struct in_place_t {\r\n    explicit in_place_t() = default;\r\n  };\r\n\r\n  inline constexpr in_place_t in_place{};\r\n\r\n  template<typename _Tp> struct in_place_type_t\r\n  {\r\n"]
[81.322691, "o", "    explicit in_place_type_t() = default;\r\n  };\r\n\r\n  template<typename _Tp>\r\n    inline constexpr in_place_type_t<_Tp> in_place_type{};\r\n\r\n  template<size_t _Idx> struct in_place_index_t\r\n  {\r\n    explicit in_place_index_t() = default;\r\n  };\r\n\r\n"]
[81.322725, "o", "  template<size_t _Idx>\r\n    inline constexpr in_place_index_t<_Idx> in_place_index{};\r\n\r\n  template<typename>\r\n    inline constexpr bool __is_in_place_type_v = false;\r\n\r\n  template<typename _Tp>\r\n    inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;\r\n\r\n  template<typename _Tp>\r\n    using __is_in_place_type = bool_constant<__is_in_place_type_v<_Tp>>;\r\n\r\n"]
[81.322994, "o", "  template<typename>\r\n    inline constexpr bool __is_in_place_index_v = false;\r\n\r\n  template<size_t _Nm>\r\n    inline constexpr bool __is_in_place_index_v<in_place_index_t<_Nm>> = true;\r\n\r\n\r\n\r\n\r\n  template<size_t _Np, typename... _Types>\r\n    struct _Nth_type\r\n    { using type = __type_pack_element<_Np, _Types...>; };\r\n# 283 \"/usr/include/c++/14.2.1/bits/utility.h\" 3\r\n\r\n}\r\n# 63 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 2 3\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 79 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };\r\n\r\n\r\n  inline constexpr piecewise_construct_t piecewise_construct =\r\n    piecewise_construct_t();\r\n\r\n\r\n\r\n\r\n  template<typename _T1, typename _T2>\r\n    struct pair;\r\n\r\n  template<typename...>\r\n    class tuple;\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, size_t _Nm>\r\n    struct array;\r\n\r\n  template<size_t...>\r\n    struct _Index_tuple;\r\n\r\n  template<size_t _Int, class _Tp1, class _Tp2>\r\n    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&\r\n    get(pair<_Tp1, _Tp2>& __in) noexcept;\r\n\r\n  template<size_t _Int, class _Tp1, class _Tp2>\r\n    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&\r\n    get(pair<_Tp1, _Tp2>&& __in) noexcept;\r\n\r\n  template<size_t _Int, class _Tp1, class _Tp2>\r\n    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&\r\n    get(const pair<_Tp1, _Tp2>& __in) noexcept;\r\n\r\n"]
[81.323077, "o", "  template<size_t _Int, class _Tp1, class _Tp2>\r\n    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&\r\n    get(const pair<_Tp1, _Tp2>&& __in) noexcept;\r\n\r\n  template<size_t __i, typename... _Elements>\r\n    constexpr __tuple_element_t<__i, tuple<_Elements...>>&\r\n    get(tuple<_Elements...>& __t) noexcept;\r\n\r\n  template<size_t __i, typename... _Elements>\r\n    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&\r\n    get(const tuple<_Elements...>& __t) noexcept;\r\n\r\n  template<size_t __i, typename... _Elements>\r\n    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&\r\n    get(tuple<_Elements...>&& __t) noexcept;\r\n\r\n  template<size_t __i, typename... _Elements>\r\n    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&\r\n    get(const tuple<_Elements...>&& __t) noexcept;\r\n\r\n  template<size_t _Int, typename _Tp, size_t _Nm>\r\n    constexpr _Tp&\r\n    get(array<_Tp, _Nm>&) noexcept;\r\n\r\n"]
[81.323149, "o", "  template<size_t _Int, typename _Tp, size_t _Nm>\r\n    constexpr _Tp&&\r\n    get(array<_Tp, _Nm>&&) noexcept;\r\n\r\n  template<size_t _Int, typename _Tp, size_t _Nm>\r\n    constexpr const _Tp&\r\n    get(const array<_Tp, _Nm>&) noexcept;\r\n\r\n  template<size_t _Int, typename _Tp, size_t _Nm>\r\n    constexpr const _Tp&&\r\n    get(const array<_Tp, _Nm>&&) noexcept;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template <bool, typename _T1, typename _T2>\r\n    struct _PCC\r\n"]
[81.323184, "o", "    {\r\n      template <typename _U1, typename _U2>\r\n      static constexpr bool _ConstructiblePair()\r\n      {\r\n return __and_<is_constructible<_T1, const _U1&>,\r\n        is_constructible<_T2, const _U2&>>::value;\r\n      }\r\n\r\n      template <typename _U1, typename _U2>\r\n"]
[81.323218, "o", "      static constexpr bool _ImplicitlyConvertiblePair()\r\n      {\r\n return __and_<is_convertible<const _U1&, _T1>,\r\n        is_convertible<const _U2&, _T2>>::value;\r\n      }\r\n\r\n      template <typename _U1, typename _U2>\r\n      static constexpr bool _MoveConstructiblePair()\r\n      {\r\n"]
[81.323255, "o", " return __and_<is_constructible<_T1, _U1&&>,\r\n        is_constructible<_T2, _U2&&>>::value;\r\n      }\r\n\r\n      template <typename _U1, typename _U2>\r\n      static constexpr bool _ImplicitlyMoveConvertiblePair()\r\n      {\r\n return __and_<is_convertible<_U1&&, _T1>,\r\n        is_convertible<_U2&&, _T2>>::value;\r\n      }\r\n    };\r\n"]
[81.323292, "o", "\r\n  template <typename _T1, typename _T2>\r\n    struct _PCC<false, _T1, _T2>\r\n    {\r\n      template <typename _U1, typename _U2>\r\n      static constexpr bool _ConstructiblePair()\r\n      {\r\n return false;\r\n      }\r\n\r\n      template <typename _U1, typename _U2>\r\n"]
[81.32333, "o", "      static constexpr bool _ImplicitlyConvertiblePair()\r\n      {\r\n return false;\r\n      }\r\n\r\n      template <typename _U1, typename _U2>\r\n      static constexpr bool _MoveConstructiblePair()\r\n      {\r\n return false;\r\n      }\r\n\r\n"]
[81.323489, "o", "      template <typename _U1, typename _U2>\r\n      static constexpr bool _ImplicitlyMoveConvertiblePair()\r\n      {\r\n return false;\r\n      }\r\n    };\r\n# 260 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n  template<typename _U1, typename _U2> class __pair_base\r\n  {\r\n\r\n    template<typename _T1, typename _T2> friend struct pair;\r\n    __pair_base() = default;\r\n    ~__pair_base() = default;\r\n    __pair_base(const __pair_base&) = default;\r\n    __pair_base& operator=(const __pair_base&) = delete;\r\n\r\n  };\r\n# 283 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n  template<typename _T1, typename _T2>\r\n    struct pair\r\n    : public __pair_base<_T1, _T2>\r\n    {\r\n      typedef _T1 first_type;\r\n      typedef _T2 second_type;\r\n\r\n      _T1 first;\r\n      _T2 second;\r\n\r\n\r\n      constexpr pair(const pair&) = default;\r\n      constexpr pair(pair&&) = default;\r\n\r\n      template<typename... _Args1, typename... _Args2>\r\n\r\n pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);\r\n\r\n"]
[81.32356, "o", "\r\n      void\r\n      swap(pair& __p)\r\n      noexcept(__and_<__is_nothrow_swappable<_T1>,\r\n        __is_nothrow_swappable<_T2>>::value)\r\n      {\r\n using std::swap;\r\n swap(first, __p.first);\r\n swap(second, __p.second);\r\n      }\r\n# 331 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n    private:\r\n      template<typename... _Args1, size_t... _Indexes1,\r\n        typename... _Args2, size_t... _Indexes2>\r\n\r\n"]
[81.323589, "o", " pair(tuple<_Args1...>&, tuple<_Args2...>&,\r\n      _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);\r\n"]
[81.323776, "o", "    public:\r\n# 719 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n      template <typename _U1 = _T1,\r\n                typename _U2 = _T2,\r\n                typename enable_if<__and_<\r\n                                     __is_implicitly_default_constructible<_U1>,\r\n"]
[81.323809, "o", "                                     __is_implicitly_default_constructible<_U2>>\r\n                                   ::value, bool>::type = true>\r\n      constexpr pair()\r\n      : first(), second() { }\r\n\r\n      template <typename _U1 = _T1,\r\n                typename _U2 = _T2,\r\n                typename enable_if<__and_<\r\n"]
[81.323843, "o", "                       is_default_constructible<_U1>,\r\n                       is_default_constructible<_U2>,\r\n                       __not_<\r\n                         __and_<__is_implicitly_default_constructible<_U1>,\r\n                                __is_implicitly_default_constructible<_U2>>>>\r\n                                   ::value, bool>::type = false>\r\n"]
[81.323875, "o", "      explicit constexpr pair()\r\n      : first(), second() { }\r\n\r\n\r\n\r\n      using _PCCP = _PCC<true, _T1, _T2>;\r\n\r\n\r\n\r\n      template<typename _U1 = _T1, typename _U2=_T2, typename\r\n"]
[81.323914, "o", "        enable_if<_PCCP::template\r\n      _ConstructiblePair<_U1, _U2>()\r\n                  && _PCCP::template\r\n      _ImplicitlyConvertiblePair<_U1, _U2>(),\r\n                         bool>::type=true>\r\n      constexpr pair(const _T1& __a, const _T2& __b)\r\n"]
[81.323945, "o", "      : first(__a), second(__b) { }\r\n\r\n\r\n       template<typename _U1 = _T1, typename _U2=_T2, typename\r\n  enable_if<_PCCP::template\r\n       _ConstructiblePair<_U1, _U2>()\r\n                   && !_PCCP::template\r\n       _ImplicitlyConvertiblePair<_U1, _U2>(),\r\n                         bool>::type=false>\r\n"]
[81.32398, "o", "      explicit constexpr pair(const _T1& __a, const _T2& __b)\r\n      : first(__a), second(__b) { }\r\n\r\n\r\n\r\n      template <typename _U1, typename _U2>\r\n        using _PCCFP = _PCC<!is_same<_T1, _U1>::value\r\n"]
[81.32401, "o", "       || !is_same<_T2, _U2>::value,\r\n       _T1, _T2>;\r\n\r\n\r\n      template<typename _U1, typename _U2, typename\r\n        enable_if<_PCCFP<_U1, _U2>::template\r\n      _ConstructiblePair<_U1, _U2>()\r\n                  && _PCCFP<_U1, _U2>::template\r\n"]
[81.324042, "o", "      _ImplicitlyConvertiblePair<_U1, _U2>(),\r\n     bool>::type=true>\r\n constexpr pair(const pair<_U1, _U2>& __p)\r\n : first(__p.first), second(__p.second)\r\n { ; }\r\n\r\n"]
[81.324078, "o", "      template<typename _U1, typename _U2, typename\r\n        enable_if<_PCCFP<_U1, _U2>::template\r\n      _ConstructiblePair<_U1, _U2>()\r\n    && !_PCCFP<_U1, _U2>::template\r\n      _ImplicitlyConvertiblePair<_U1, _U2>(),\r\n                         bool>::type=false>\r\n explicit constexpr pair(const pair<_U1, _U2>& __p)\r\n : first(__p.first), second(__p.second)\r\n"]
[81.324113, "o", " { ; }\r\n# 803 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n    private:\r\n\r\n\r\n\r\n      struct __zero_as_null_pointer_constant\r\n      {\r\n __zero_as_null_pointer_constant(int __zero_as_null_pointer_constant::*)\r\n { }\r\n template<typename _Tp,\r\n   typename = __enable_if_t<is_null_pointer<_Tp>::value>>\r\n __zero_as_null_pointer_constant(_Tp) = delete;\r\n      };\r\n"]
[81.324151, "o", "\r\n    public:\r\n\r\n\r\n\r\n\r\n      template<typename _U1,\r\n        __enable_if_t<__and_<__not_<is_reference<_U1>>,\r\n        is_pointer<_T2>,\r\n        is_constructible<_T1, _U1>,\r\n        __not_<is_constructible<_T1, const _U1&>>,\r\n"]
[81.324346, "o", "        is_convertible<_U1, _T1>>::value,\r\n        bool> = true>\r\n __attribute__ ((__deprecated__ (\"use 'nullptr' instead of '0' to \" \"initialize std::pair of move-only \" \"type and pointer\")))\r\n constexpr\r\n pair(_U1&& __x, __zero_as_null_pointer_constant, ...)\r\n : first(std::forward<_U1>(__x)), second(nullptr)\r\n { ; }\r\n\r\n      template<typename _U1,\r\n        __enable_if_t<__and_<__not_<is_reference<_U1>>,\r\n        is_pointer<_T2>,\r\n        is_constructible<_T1, _U1>,\r\n"]
[81.324626, "o", "        __not_<is_constructible<_T1, const _U1&>>,\r\n        __not_<is_convertible<_U1, _T1>>>::value,\r\n        bool> = false>\r\n __attribute__ ((__deprecated__ (\"use 'nullptr' instead of '0' to \" \"initialize std::pair of move-only \" \"type and pointer\")))\r\n explicit constexpr\r\n pair(_U1&& __x, __zero_as_null_pointer_constant, ...)\r\n : first(std::forward<_U1>(__x)), second(nullptr)\r\n { ; }\r\n\r\n      template<typename _U2,\r\n        __enable_if_t<__and_<is_pointer<_T1>,\r\n        __not_<is_reference<_U2>>,\r\n        is_constructible<_T2, _U2>,\r\n        __not_<is_constructible<_T2, const _U2&>>,\r\n        is_convertible<_U2, _T2>>::value,\r\n        bool> = true>\r\n __attribute__ ((__deprecated__ (\"use 'nullptr' instead of '0' to \" \"initialize std::pair of move-only \" \"type and pointer\")))\r\n constexpr\r\n pair(__zero_as_null_pointer_constant, _U2&& __y, ...)\r\n : first(nullptr), second(std::forward<_U2>(__y))\r\n { ; }\r\n\r\n      template<typename _U2,\r\n        __enable_if_t<__and_<is_pointer<_T1>,\r\n        __not_<is_reference<_U2>>,\r\n        is_constructible<_T2, _U2>,\r\n        __not_<is_constructible<_T2, const _U2&>>,\r\n        __not_<is_convertible<_U2, _T2>>>::value,\r\n        bool> = false>\r\n __attribute__ ((__deprecated__ (\"use 'nullptr' instead of '0' to \" \"initialize std::pair of move-only \" \"type and pointer\")))\r\n explicit constexpr\r\n pair(__zero_as_null_pointer_constant, _U2&& __y, ...)\r\n : first(nullptr), second(std::forward<_U2>(__y))\r\n { ; }\r\n\r\n\r\n\r\n      template<typename _U1, typename _U2, typename\r\n        enable_if<_PCCP::template\r\n      _MoveConstructiblePair<_U1, _U2>()\r\n     && _PCCP::template\r\n      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),\r\n                         bool>::type=true>\r\n constexpr pair(_U1&& __x, _U2&& __y)\r\n : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))\r\n { ; }\r\n\r\n"]
[81.324712, "o", "      template<typename _U1, typename _U2, typename\r\n        enable_if<_PCCP::template\r\n      _MoveConstructiblePair<_U1, _U2>()\r\n     && !_PCCP::template\r\n      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),\r\n                         bool>::type=false>\r\n explicit constexpr pair(_U1&& __x, _U2&& __y)\r\n : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))\r\n { ; }\r\n\r\n\r\n      template<typename _U1, typename _U2, typename\r\n        enable_if<_PCCFP<_U1, _U2>::template\r\n      _MoveConstructiblePair<_U1, _U2>()\r\n     && _PCCFP<_U1, _U2>::template\r\n      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),\r\n                         bool>::type=true>\r\n constexpr pair(pair<_U1, _U2>&& __p)\r\n : first(std::forward<_U1>(__p.first)),\r\n   second(std::forward<_U2>(__p.second))\r\n { ; }\r\n\r\n      template<typename _U1, typename _U2, typename\r\n        enable_if<_PCCFP<_U1, _U2>::template\r\n      _MoveConstructiblePair<_U1, _U2>()\r\n     && !_PCCFP<_U1, _U2>::template\r\n      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),\r\n                         bool>::type=false>\r\n explicit constexpr pair(pair<_U1, _U2>&& __p)\r\n : first(std::forward<_U1>(__p.first)),\r\n   second(std::forward<_U2>(__p.second))\r\n { ; }\r\n\r\n\r\n\r\n      pair&\r\n      operator=(__conditional_t<__and_<is_copy_assignable<_T1>,\r\n           is_copy_assignable<_T2>>::value,\r\n    const pair&, const __nonesuch&> __p)\r\n      {\r\n first = __p.first;\r\n second = __p.second;\r\n return *this;\r\n      }\r\n\r\n      pair&\r\n      operator=(__conditional_t<__and_<is_move_assignable<_T1>,\r\n           is_move_assignable<_T2>>::value,\r\n    pair&&, __nonesuch&&> __p)\r\n      noexcept(__and_<is_nothrow_move_assignable<_T1>,\r\n        is_nothrow_move_assignable<_T2>>::value)\r\n      {\r\n first = std::forward<first_type>(__p.first);\r\n second = std::forward<second_type>(__p.second);\r\n return *this;\r\n      }\r\n\r\n      template<typename _U1, typename _U2>\r\n typename enable_if<__and_<is_assignable<_T1&, const _U1&>,\r\n      is_assignable<_T2&, const _U2&>>::value,\r\n      pair&>::type\r\n operator=(const pair<_U1, _U2>& __p)\r\n {\r\n   first = __p.first;\r\n   second = __p.second;\r\n   return *this;\r\n }\r\n\r\n      template<typename _U1, typename _U2>\r\n typename enable_if<__and_<is_assignable<_T1&, _U1&&>,\r\n      is_assignable<_T2&, _U2&&>>::value,\r\n      pair&>::type\r\n operator=(pair<_U1, _U2>&& __p)\r\n {\r\n   first = std::forward<_U1>(__p.first);\r\n   second = std::forward<_U2>(__p.second);\r\n   return *this;\r\n }\r\n# 995 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n"]
[81.324746, "o", "    };\r\n\r\n\r\n\r\n\r\n  template<typename _T1, typename _T2> pair(_T1, _T2) -> pair<_T1, _T2>;\r\n# 1031 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n  template<typename _T1, typename _T2>\r\n"]
[81.324849, "o", "    inline constexpr bool\r\n    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\r\n    { return __x.first == __y.first && __x.second == __y.second; }\r\n# 1043 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n  template<typename _T1, typename _T2>\r\n    inline constexpr bool\r\n    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\r\n    { return __x.first < __y.first\r\n      || (!(__y.first < __x.first) && __x.second < __y.second); }\r\n\r\n\r\n  template<typename _T1, typename _T2>\r\n    inline constexpr bool\r\n    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\r\n    { return !(__x == __y); }\r\n\r\n\r\n  template<typename _T1, typename _T2>\r\n    inline constexpr bool\r\n"]
[81.324924, "o", "    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\r\n    { return __y < __x; }\r\n\r\n\r\n  template<typename _T1, typename _T2>\r\n    inline constexpr bool\r\n    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\r\n    { return !(__y < __x); }\r\n\r\n\r\n  template<typename _T1, typename _T2>\r\n    inline constexpr bool\r\n    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\r\n    { return !(__x < __y); }\r\n# 1080 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n  template<typename _T1, typename _T2>\r\n    inline\r\n\r\n"]
[81.324957, "o", "\r\n    typename enable_if<__and_<__is_swappable<_T1>,\r\n                              __is_swappable<_T2>>::value>::type\r\n\r\n\r\n\r\n    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)\r\n    noexcept(noexcept(__x.swap(__y)))\r\n"]
[81.324994, "o", "    { __x.swap(__y); }\r\n# 1103 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n  template<typename _T1, typename _T2>\r\n    typename enable_if<!__and_<__is_swappable<_T1>,\r\n          __is_swappable<_T2>>::value>::type\r\n    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;\r\n# 1129 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n"]
[81.325022, "o", "  template<typename _T1, typename _T2>\r\n    constexpr pair<typename __decay_and_strip<_T1>::__type,\r\n                   typename __decay_and_strip<_T2>::__type>\r\n    make_pair(_T1&& __x, _T2&& __y)\r\n    {\r\n      typedef typename __decay_and_strip<_T1>::__type __ds_type1;\r\n      typedef typename __decay_and_strip<_T2>::__type __ds_type2;\r\n      typedef pair<__ds_type1, __ds_type2> __pair_type;\r\n"]
[81.325166, "o", "      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));\r\n    }\r\n# 1152 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n  template<typename _T1, typename _T2>\r\n    struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type\r\n    { };\r\n\r\n\r\n\r\n  template<class _Tp1, class _Tp2>\r\n    struct tuple_size<pair<_Tp1, _Tp2>>\r\n    : public integral_constant<size_t, 2> { };\r\n\r\n\r\n  template<class _Tp1, class _Tp2>\r\n    struct tuple_element<0, pair<_Tp1, _Tp2>>\r\n    { typedef _Tp1 type; };\r\n\r\n\r\n  template<class _Tp1, class _Tp2>\r\n    struct tuple_element<1, pair<_Tp1, _Tp2>>\r\n    { typedef _Tp2 type; };\r\n\r\n\r\n\r\n  template<size_t __i, typename... _Types>\r\n    struct tuple_element<__i, tuple<_Types...>>;\r\n\r\n\r\n  template<typename _Tp1, typename _Tp2>\r\n    inline constexpr size_t tuple_size_v<pair<_Tp1, _Tp2>> = 2;\r\n\r\n"]
[81.325247, "o", "  template<typename _Tp1, typename _Tp2>\r\n    inline constexpr size_t tuple_size_v<const pair<_Tp1, _Tp2>> = 2;\r\n\r\n  template<typename _Tp>\r\n    inline constexpr bool __is_pair = false;\r\n\r\n  template<typename _Tp, typename _Up>\r\n    inline constexpr bool __is_pair<pair<_Tp, _Up>> = true;\r\n\r\n\r\n\r\n  template<size_t _Int>\r\n    struct __pair_get;\r\n\r\n  template<>\r\n    struct __pair_get<0>\r\n    {\r\n      template<typename _Tp1, typename _Tp2>\r\n static constexpr _Tp1&\r\n __get(pair<_Tp1, _Tp2>& __pair) noexcept\r\n { return __pair.first; }\r\n\r\n      template<typename _Tp1, typename _Tp2>\r\n static constexpr _Tp1&&\r\n"]
[81.325288, "o", " __move_get(pair<_Tp1, _Tp2>&& __pair) noexcept\r\n { return std::forward<_Tp1>(__pair.first); }\r\n\r\n      template<typename _Tp1, typename _Tp2>\r\n static constexpr const _Tp1&\r\n __const_get(const pair<_Tp1, _Tp2>& __pair) noexcept\r\n { return __pair.first; }\r\n\r\n      template<typename _Tp1, typename _Tp2>\r\n"]
[81.325322, "o", " static constexpr const _Tp1&&\r\n __const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept\r\n { return std::forward<const _Tp1>(__pair.first); }\r\n    };\r\n\r\n  template<>\r\n    struct __pair_get<1>\r\n    {\r\n      template<typename _Tp1, typename _Tp2>\r\n static constexpr _Tp2&\r\n"]
[81.325356, "o", " __get(pair<_Tp1, _Tp2>& __pair) noexcept\r\n { return __pair.second; }\r\n\r\n      template<typename _Tp1, typename _Tp2>\r\n static constexpr _Tp2&&\r\n __move_get(pair<_Tp1, _Tp2>&& __pair) noexcept\r\n { return std::forward<_Tp2>(__pair.second); }\r\n\r\n"]
[81.325387, "o", "      template<typename _Tp1, typename _Tp2>\r\n static constexpr const _Tp2&\r\n __const_get(const pair<_Tp1, _Tp2>& __pair) noexcept\r\n { return __pair.second; }\r\n\r\n      template<typename _Tp1, typename _Tp2>\r\n static constexpr const _Tp2&&\r\n"]
[81.325427, "o", " __const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept\r\n { return std::forward<const _Tp2>(__pair.second); }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<size_t _Int, class _Tp1, class _Tp2>\r\n    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&\r\n"]
[81.325458, "o", "    get(pair<_Tp1, _Tp2>& __in) noexcept\r\n    { return __pair_get<_Int>::__get(__in); }\r\n\r\n  template<size_t _Int, class _Tp1, class _Tp2>\r\n    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&\r\n    get(pair<_Tp1, _Tp2>&& __in) noexcept\r\n    { return __pair_get<_Int>::__move_get(std::move(__in)); }\r\n\r\n  template<size_t _Int, class _Tp1, class _Tp2>\r\n"]
[81.325496, "o", "    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&\r\n    get(const pair<_Tp1, _Tp2>& __in) noexcept\r\n    { return __pair_get<_Int>::__const_get(__in); }\r\n\r\n  template<size_t _Int, class _Tp1, class _Tp2>\r\n    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&\r\n    get(const pair<_Tp1, _Tp2>&& __in) noexcept\r\n    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }\r\n\r\n\r\n"]
[81.325526, "o", "\r\n  template <typename _Tp, typename _Up>\r\n    constexpr _Tp&\r\n    get(pair<_Tp, _Up>& __p) noexcept\r\n    { return __p.first; }\r\n\r\n  template <typename _Tp, typename _Up>\r\n    constexpr const _Tp&\r\n    get(const pair<_Tp, _Up>& __p) noexcept\r\n    { return __p.first; }\r\n\r\n"]
[81.325734, "o", "  template <typename _Tp, typename _Up>\r\n    constexpr _Tp&&\r\n    get(pair<_Tp, _Up>&& __p) noexcept\r\n    { return std::move(__p.first); }\r\n\r\n  template <typename _Tp, typename _Up>\r\n    constexpr const _Tp&&\r\n    get(const pair<_Tp, _Up>&& __p) noexcept\r\n    { return std::move(__p.first); }\r\n\r\n  template <typename _Tp, typename _Up>\r\n    constexpr _Tp&\r\n    get(pair<_Up, _Tp>& __p) noexcept\r\n    { return __p.second; }\r\n\r\n  template <typename _Tp, typename _Up>\r\n    constexpr const _Tp&\r\n    get(const pair<_Up, _Tp>& __p) noexcept\r\n    { return __p.second; }\r\n\r\n  template <typename _Tp, typename _Up>\r\n    constexpr _Tp&&\r\n    get(pair<_Up, _Tp>&& __p) noexcept\r\n    { return std::move(__p.second); }\r\n\r\n  template <typename _Tp, typename _Up>\r\n    constexpr const _Tp&&\r\n    get(const pair<_Up, _Tp>&& __p) noexcept\r\n    { return std::move(__p.second); }\r\n# 1332 \"/usr/include/c++/14.2.1/bits/stl_pair.h\" 3\r\n\r\n}\r\n# 65 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 2 3\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/debug/debug.h\" 1 3\r\n"]
[81.3258, "o", "# 48 \"/usr/include/c++/14.2.1/debug/debug.h\" 3\r\nnamespace std\r\n{\r\n  namespace __debug { }\r\n}\r\n\r\n\r\n\r\n\r\nnamespace __gnu_debug\r\n{\r\n  using namespace std::__debug;\r\n\r\n  template<typename _Ite, typename _Seq, typename _Cat>\r\n    struct _Safe_iterator;\r\n"]
[81.325863, "o", "}\r\n# 70 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 2 3\r\n"]
[81.325898, "o", "\r\n# 1 \"/usr/include/c++/14.2.1/bits/predefined_ops.h\" 1 3\r\n# 35 \"/usr/include/c++/14.2.1/bits/predefined_ops.h\" 3\r\nnamespace __gnu_cxx\r\n{\r\nnamespace __ops\r\n{\r\n"]
[81.325931, "o", "  struct _Iter_less_iter\r\n  {\r\n    template<typename _Iterator1, typename _Iterator2>\r\n      constexpr\r\n      bool\r\n      operator()(_Iterator1 __it1, _Iterator2 __it2) const\r\n"]
[81.325966, "o", "      { return *__it1 < *__it2; }\r\n  };\r\n\r\n  constexpr\r\n  inline _Iter_less_iter\r\n  __iter_less_iter()\r\n  { return _Iter_less_iter(); }\r\n\r\n  struct _Iter_less_val\r\n  {\r\n\r\n"]
[81.326, "o", "    constexpr _Iter_less_val() = default;\r\n\r\n\r\n\r\n\r\n   \r\n    explicit\r\n    _Iter_less_val(_Iter_less_iter) { }\r\n\r\n    template<typename _Iterator, typename _Value>\r\n     \r\n"]
[81.326034, "o", "      bool\r\n      operator()(_Iterator __it, _Value& __val) const\r\n      { return *__it < __val; }\r\n  };\r\n\r\n \r\n  inline _Iter_less_val\r\n  __iter_less_val()\r\n  { return _Iter_less_val(); }\r\n\r\n \r\n  inline _Iter_less_val\r\n"]
[81.326069, "o", "  __iter_comp_val(_Iter_less_iter)\r\n  { return _Iter_less_val(); }\r\n\r\n  struct _Val_less_iter\r\n  {\r\n\r\n    constexpr _Val_less_iter() = default;\r\n\r\n\r\n\r\n\r\n   \r\n"]
[81.326107, "o", "    explicit\r\n    _Val_less_iter(_Iter_less_iter) { }\r\n\r\n    template<typename _Value, typename _Iterator>\r\n     \r\n      bool\r\n      operator()(_Value& __val, _Iterator __it) const\r\n      { return __val < *__it; }\r\n  };\r\n\r\n"]
[81.326135, "o", " \r\n  inline _Val_less_iter\r\n  __val_less_iter()\r\n  { return _Val_less_iter(); }\r\n\r\n \r\n  inline _Val_less_iter\r\n  __val_comp_iter(_Iter_less_iter)\r\n  { return _Val_less_iter(); }\r\n\r\n"]
[81.326175, "o", "  struct _Iter_equal_to_iter\r\n  {\r\n    template<typename _Iterator1, typename _Iterator2>\r\n     \r\n      bool\r\n      operator()(_Iterator1 __it1, _Iterator2 __it2) const\r\n      { return *__it1 == *__it2; }\r\n  };\r\n\r\n \r\n  inline _Iter_equal_to_iter\r\n  __iter_equal_to_iter()\r\n"]
[81.326205, "o", "  { return _Iter_equal_to_iter(); }\r\n\r\n  struct _Iter_equal_to_val\r\n  {\r\n    template<typename _Iterator, typename _Value>\r\n     \r\n      bool\r\n      operator()(_Iterator __it, _Value& __val) const\r\n      { return *__it == __val; }\r\n"]
[81.326242, "o", "  };\r\n\r\n \r\n  inline _Iter_equal_to_val\r\n  __iter_equal_to_val()\r\n  { return _Iter_equal_to_val(); }\r\n\r\n \r\n  inline _Iter_equal_to_val\r\n  __iter_comp_val(_Iter_equal_to_iter)\r\n"]
[81.326284, "o", "  { return _Iter_equal_to_val(); }\r\n\r\n  template<typename _Compare>\r\n    struct _Iter_comp_iter\r\n    {\r\n      _Compare _M_comp;\r\n\r\n      explicit constexpr\r\n      _Iter_comp_iter(_Compare __comp)\r\n : _M_comp(std::move(__comp))\r\n      { }\r\n"]
[81.326316, "o", "\r\n      template<typename _Iterator1, typename _Iterator2>\r\n        constexpr\r\n        bool\r\n        operator()(_Iterator1 __it1, _Iterator2 __it2)\r\n        { return bool(_M_comp(*__it1, *__it2)); }\r\n    };\r\n\r\n  template<typename _Compare>\r\n    constexpr\r\n    inline _Iter_comp_iter<_Compare>\r\n"]
[81.326349, "o", "    __iter_comp_iter(_Compare __comp)\r\n    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }\r\n\r\n  template<typename _Compare>\r\n    struct _Iter_comp_val\r\n    {\r\n      _Compare _M_comp;\r\n\r\n     \r\n      explicit\r\n"]
[81.326383, "o", "      _Iter_comp_val(_Compare __comp)\r\n : _M_comp(std::move(__comp))\r\n      { }\r\n\r\n     \r\n      explicit\r\n      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)\r\n : _M_comp(__comp._M_comp)\r\n"]
[81.326411, "o", "      { }\r\n\r\n\r\n     \r\n      explicit\r\n      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)\r\n : _M_comp(std::move(__comp._M_comp))\r\n      { }\r\n\r\n\r\n      template<typename _Iterator, typename _Value>\r\n"]
[81.326442, "o", "\r\n bool\r\n operator()(_Iterator __it, _Value& __val)\r\n { return bool(_M_comp(*__it, __val)); }\r\n    };\r\n\r\n  template<typename _Compare>\r\n   \r\n"]
[81.326477, "o", "    inline _Iter_comp_val<_Compare>\r\n    __iter_comp_val(_Compare __comp)\r\n    { return _Iter_comp_val<_Compare>(std::move(__comp)); }\r\n\r\n  template<typename _Compare>\r\n   \r\n    inline _Iter_comp_val<_Compare>\r\n"]
[81.326512, "o", "    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)\r\n"]
[81.326793, "o", "    { return _Iter_comp_val<_Compare>(std::move(__comp)); }\r\n\r\n  template<typename _Compare>\r\n    struct _Val_comp_iter\r\n    {\r\n      _Compare _M_comp;\r\n\r\n     \r\n      explicit\r\n"]
[81.326835, "o", "      _Val_comp_iter(_Compare __comp)\r\n : _M_comp(std::move(__comp))\r\n      { }\r\n\r\n     \r\n      explicit\r\n      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)\r\n : _M_comp(__comp._M_comp)\r\n      { }\r\n\r\n\r\n     \r\n      explicit\r\n"]
[81.326868, "o", "      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)\r\n : _M_comp(std::move(__comp._M_comp))\r\n      { }\r\n\r\n\r\n      template<typename _Value, typename _Iterator>\r\n\r\n bool\r\n operator()(_Value& __val, _Iterator __it)\r\n { return bool(_M_comp(__val, *__it)); }\r\n    };\r\n\r\n  template<typename _Compare>\r\n   \r\n"]
[81.326899, "o", "    inline _Val_comp_iter<_Compare>\r\n    __val_comp_iter(_Compare __comp)\r\n    { return _Val_comp_iter<_Compare>(std::move(__comp)); }\r\n\r\n  template<typename _Compare>\r\n   \r\n"]
[81.326937, "o", "    inline _Val_comp_iter<_Compare>\r\n    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)\r\n    { return _Val_comp_iter<_Compare>(std::move(__comp)); }\r\n\r\n  template<typename _Value>\r\n    struct _Iter_equals_val\r\n    {\r\n      _Value& _M_value;\r\n\r\n"]
[81.326968, "o", "     \r\n      explicit\r\n      _Iter_equals_val(_Value& __value)\r\n : _M_value(__value)\r\n      { }\r\n\r\n      template<typename _Iterator>\r\n\r\n bool\r\n"]
[81.326998, "o", " operator()(_Iterator __it)\r\n { return *__it == _M_value; }\r\n    };\r\n\r\n  template<typename _Value>\r\n   \r\n    inline _Iter_equals_val<_Value>\r\n    __iter_equals_val(_Value& __val)\r\n    { return _Iter_equals_val<_Value>(__val); }\r\n\r\n"]
[81.327034, "o", "  template<typename _Iterator1>\r\n    struct _Iter_equals_iter\r\n    {\r\n      _Iterator1 _M_it1;\r\n\r\n     \r\n      explicit\r\n      _Iter_equals_iter(_Iterator1 __it1)\r\n"]
[81.32707, "o", " : _M_it1(__it1)\r\n      { }\r\n\r\n      template<typename _Iterator2>\r\n\r\n bool\r\n operator()(_Iterator2 __it2)\r\n { return *__it2 == *_M_it1; }\r\n    };\r\n\r\n  template<typename _Iterator>\r\n"]
[81.327105, "o", "   \r\n    inline _Iter_equals_iter<_Iterator>\r\n    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)\r\n    { return _Iter_equals_iter<_Iterator>(__it); }\r\n\r\n  template<typename _Predicate>\r\n    struct _Iter_pred\r\n    {\r\n      _Predicate _M_pred;\r\n\r\n"]
[81.327137, "o", "     \r\n      explicit\r\n      _Iter_pred(_Predicate __pred)\r\n : _M_pred(std::move(__pred))\r\n      { }\r\n\r\n      template<typename _Iterator>\r\n\r\n bool\r\n"]
[81.327173, "o", " operator()(_Iterator __it)\r\n { return bool(_M_pred(*__it)); }\r\n    };\r\n\r\n  template<typename _Predicate>\r\n   \r\n    inline _Iter_pred<_Predicate>\r\n    __pred_iter(_Predicate __pred)\r\n"]
[81.327203, "o", "    { return _Iter_pred<_Predicate>(std::move(__pred)); }\r\n\r\n  template<typename _Compare, typename _Value>\r\n    struct _Iter_comp_to_val\r\n    {\r\n      _Compare _M_comp;\r\n      _Value& _M_value;\r\n\r\n     \r\n"]
[81.327501, "o", "      _Iter_comp_to_val(_Compare __comp, _Value& __value)\r\n : _M_comp(std::move(__comp)), _M_value(__value)\r\n      { }\r\n\r\n      template<typename _Iterator>\r\n\r\n bool\r\n operator()(_Iterator __it)\r\n { return bool(_M_comp(*__it, _M_value)); }\r\n    };\r\n\r\n  template<typename _Compare, typename _Value>\r\n    _Iter_comp_to_val<_Compare, _Value>\r\n   \r\n    __iter_comp_val(_Compare __comp, _Value &__val)\r\n    {\r\n      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);\r\n    }\r\n\r\n  template<typename _Compare, typename _Iterator1>\r\n    struct _Iter_comp_to_iter\r\n    {\r\n      _Compare _M_comp;\r\n      _Iterator1 _M_it1;\r\n\r\n     \r\n      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)\r\n : _M_comp(std::move(__comp)), _M_it1(__it1)\r\n      { }\r\n\r\n      template<typename _Iterator2>\r\n\r\n bool\r\n operator()(_Iterator2 __it2)\r\n { return bool(_M_comp(*__it2, *_M_it1)); }\r\n    };\r\n\r\n  template<typename _Compare, typename _Iterator>\r\n   \r\n    inline _Iter_comp_to_iter<_Compare, _Iterator>\r\n    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)\r\n    {\r\n      return _Iter_comp_to_iter<_Compare, _Iterator>(\r\n   std::move(__comp._M_comp), __it);\r\n    }\r\n\r\n  template<typename _Predicate>\r\n    struct _Iter_negate\r\n    {\r\n      _Predicate _M_pred;\r\n\r\n     \r\n      explicit\r\n      _Iter_negate(_Predicate __pred)\r\n : _M_pred(std::move(__pred))\r\n      { }\r\n\r\n      template<typename _Iterator>\r\n\r\n bool\r\n operator()(_Iterator __it)\r\n { return !bool(_M_pred(*__it)); }\r\n    };\r\n\r\n  template<typename _Predicate>\r\n   \r\n    inline _Iter_negate<_Predicate>\r\n    __negate(_Iter_pred<_Predicate> __pred)\r\n    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }\r\n\r\n}\r\n}\r\n# 72 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 2 3\r\n"]
[81.327578, "o", "\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bit\" 1 3\r\n# 32 \"/usr/include/c++/14.2.1/bit\" 3\r\n       \r\n# 33 \"/usr/include/c++/14.2.1/bit\" 3\r\n"]
[81.327607, "o", "\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/concepts\" 1 3\r\n"]
[81.327636, "o", "# 33 \"/usr/include/c++/14.2.1/concepts\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/concepts\" 3\r\n"]
[81.327697, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.328806, "o", "# 37 \"/usr/include/c++/14.2.1/concepts\" 2 3\r\n"]
[81.328979, "o", "# 37 \"/usr/include/c++/14.2.1/bit\" 2 3\r\n"]
[81.32905, "o", "# 61 \"/usr/include/c++/14.2.1/bit\" 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.330045, "o", "# 62 \"/usr/include/c++/14.2.1/bit\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n"]
[81.330124, "o", "\r\n# 155 \"/usr/include/c++/14.2.1/bit\" 3\r\n  template<typename _Tp>\r\n    constexpr _Tp\r\n    __rotl(_Tp __x, int __s) noexcept\r\n    {\r\n      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;\r\n      if constexpr ((_Nd & (_Nd - 1)) == 0)\r\n {\r\n\r\n\r\n   constexpr unsigned __uNd = _Nd;\r\n   const unsigned __r = __s;\r\n   return (__x << (__r % __uNd)) | (__x >> ((-__r) % __uNd));\r\n }\r\n      const int __r = __s % _Nd;\r\n"]
[81.330166, "o", "      if (__r == 0)\r\n return __x;\r\n      else if (__r > 0)\r\n return (__x << __r) | (__x >> ((_Nd - __r) % _Nd));\r\n      else\r\n return (__x >> -__r) | (__x << ((_Nd + __r) % _Nd));\r\n    }\r\n\r\n  template<typename _Tp>\r\n    constexpr _Tp\r\n    __rotr(_Tp __x, int __s) noexcept\r\n    {\r\n"]
[81.330195, "o", "      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;\r\n      if constexpr ((_Nd & (_Nd - 1)) == 0)\r\n {\r\n\r\n\r\n   constexpr unsigned __uNd = _Nd;\r\n   const unsigned __r = __s;\r\n"]
[81.33023, "o", "   return (__x >> (__r % __uNd)) | (__x << ((-__r) % __uNd));\r\n }\r\n      const int __r = __s % _Nd;\r\n      if (__r == 0)\r\n return __x;\r\n      else if (__r > 0)\r\n return (__x >> __r) | (__x << ((_Nd - __r) % _Nd));\r\n      else\r\n return (__x << -__r) | (__x >> ((_Nd + __r) % _Nd));\r\n    }\r\n\r\n"]
[81.330266, "o", "  template<typename _Tp>\r\n    constexpr int\r\n    __countl_zero(_Tp __x) noexcept\r\n    {\r\n      using __gnu_cxx::__int_traits;\r\n      constexpr auto _Nd = __int_traits<_Tp>::__digits;\r\n\r\n      if (__x == 0)\r\n        return _Nd;\r\n\r\n"]
[81.330307, "o", "      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;\r\n      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;\r\n      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;\r\n\r\n      if constexpr (_Nd <= _Nd_u)\r\n {\r\n   constexpr int __diff = _Nd_u - _Nd;\r\n   return __builtin_clz(__x) - __diff;\r\n }\r\n"]
[81.330346, "o", "      else if constexpr (_Nd <= _Nd_ul)\r\n {\r\n   constexpr int __diff = _Nd_ul - _Nd;\r\n   return __builtin_clzl(__x) - __diff;\r\n }\r\n      else if constexpr (_Nd <= _Nd_ull)\r\n {\r\n   constexpr int __diff = _Nd_ull - _Nd;\r\n   return __builtin_clzll(__x) - __diff;\r\n }\r\n      else\r\n {\r\n   static_assert(_Nd <= (2 * _Nd_ull),\r\n"]
[81.330379, "o", "   \"Maximum supported integer size is 128-bit\");\r\n\r\n   unsigned long long __high = __x >> _Nd_ull;\r\n   if (__high != 0)\r\n     {\r\n       constexpr int __diff = (2 * _Nd_ull) - _Nd;\r\n       return __builtin_clzll(__high) - __diff;\r\n     }\r\n   constexpr auto __max_ull = __int_traits<unsigned long long>::__max;\r\n   unsigned long long __low = __x & __max_ull;\r\n   return (_Nd - _Nd_ull) + __builtin_clzll(__low);\r\n"]
[81.330409, "o", " }\r\n    }\r\n\r\n  template<typename _Tp>\r\n    constexpr int\r\n    __countl_one(_Tp __x) noexcept\r\n    {\r\n      return std::__countl_zero<_Tp>((_Tp)~__x);\r\n    }\r\n\r\n"]
[81.330443, "o", "  template<typename _Tp>\r\n    constexpr int\r\n    __countr_zero(_Tp __x) noexcept\r\n    {\r\n      using __gnu_cxx::__int_traits;\r\n      constexpr auto _Nd = __int_traits<_Tp>::__digits;\r\n\r\n      if (__x == 0)\r\n"]
[81.330477, "o", "        return _Nd;\r\n\r\n      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;\r\n      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;\r\n      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;\r\n\r\n      if constexpr (_Nd <= _Nd_u)\r\n return __builtin_ctz(__x);\r\n      else if constexpr (_Nd <= _Nd_ul)\r\n return __builtin_ctzl(__x);\r\n"]
[81.330509, "o", "      else if constexpr (_Nd <= _Nd_ull)\r\n return __builtin_ctzll(__x);\r\n      else\r\n {\r\n   static_assert(_Nd <= (2 * _Nd_ull),\r\n   \"Maximum supported integer size is 128-bit\");\r\n\r\n"]
[81.330549, "o", "   constexpr auto __max_ull = __int_traits<unsigned long long>::__max;\r\n   unsigned long long __low = __x & __max_ull;\r\n   if (__low != 0)\r\n     return __builtin_ctzll(__low);\r\n   unsigned long long __high = __x >> _Nd_ull;\r\n   return __builtin_ctzll(__high) + _Nd_ull;\r\n }\r\n    }\r\n\r\n  template<typename _Tp>\r\n    constexpr int\r\n"]
[81.330593, "o", "    __countr_one(_Tp __x) noexcept\r\n    {\r\n      return std::__countr_zero((_Tp)~__x);\r\n    }\r\n\r\n  template<typename _Tp>\r\n    constexpr int\r\n    __popcount(_Tp __x) noexcept\r\n    {\r\n      using __gnu_cxx::__int_traits;\r\n      constexpr auto _Nd = __int_traits<_Tp>::__digits;\r\n\r\n"]
[81.33063, "o", "      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;\r\n      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;\r\n      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;\r\n\r\n      if constexpr (_Nd <= _Nd_u)\r\n return __builtin_popcount(__x);\r\n      else if constexpr (_Nd <= _Nd_ul)\r\n return __builtin_popcountl(__x);\r\n      else if constexpr (_Nd <= _Nd_ull)\r\n return __builtin_popcountll(__x);\r\n      else\r\n {\r\n   static_assert(_Nd <= (2 * _Nd_ull),\r\n   \"Maximum supported integer size is 128-bit\");\r\n\r\n"]
[81.330664, "o", "   constexpr auto __max_ull = __int_traits<unsigned long long>::__max;\r\n   unsigned long long __low = __x & __max_ull;\r\n   unsigned long long __high = __x >> _Nd_ull;\r\n   return __builtin_popcountll(__low) + __builtin_popcountll(__high);\r\n }\r\n    }\r\n\r\n  template<typename _Tp>\r\n    constexpr bool\r\n    __has_single_bit(_Tp __x) noexcept\r\n"]
[81.330698, "o", "    { return std::__popcount(__x) == 1; }\r\n\r\n  template<typename _Tp>\r\n    constexpr _Tp\r\n    __bit_ceil(_Tp __x) noexcept\r\n    {\r\n      using __gnu_cxx::__int_traits;\r\n      constexpr auto _Nd = __int_traits<_Tp>::__digits;\r\n      if (__x == 0 || __x == 1)\r\n        return 1;\r\n"]
[81.330728, "o", "      auto __shift_exponent = _Nd - std::__countl_zero((_Tp)(__x - 1u));\r\n\r\n\r\n\r\n\r\n      if (!std::__is_constant_evaluated())\r\n {\r\n   do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(__shift_exponent != __int_traits<_Tp>::__digits), false)) std::__glibcxx_assert_fail(); } while (false);\r\n"]
[81.330763, "o", " }\r\n\r\n      using __promoted_type = decltype(__x << 1);\r\n      if constexpr (!is_same<__promoted_type, _Tp>::value)\r\n {\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.3308, "o", "   const int __extra_exp = sizeof(__promoted_type) / sizeof(_Tp) / 2;\r\n   __shift_exponent |= (__shift_exponent & _Nd) << __extra_exp;\r\n }\r\n      return (_Tp)1u << __shift_exponent;\r\n    }\r\n\r\n  template<typename _Tp>\r\n    constexpr _Tp\r\n    __bit_floor(_Tp __x) noexcept\r\n"]
[81.331321, "o", "    {\r\n      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;\r\n      if (__x == 0)\r\n        return 0;\r\n      return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));\r\n    }\r\n\r\n  template<typename _Tp>\r\n    constexpr int\r\n    __bit_width(_Tp __x) noexcept\r\n    {\r\n      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;\r\n      return _Nd - std::__countl_zero(__x);\r\n    }\r\n# 482 \"/usr/include/c++/14.2.1/bit\" 3\r\n\r\n}\r\n# 77 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 2 3\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Up>\r\n    constexpr\r\n    inline int\r\n    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)\r\n    {\r\n\r\n      static_assert(sizeof(_Tp) == sizeof(_Up), \"can be compared with memcmp\");\r\n# 108 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);\r\n    }\r\n# 152 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _ForwardIterator1, typename _ForwardIterator2>\r\n   \r\n    inline void\r\n    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\r\n    {\r\n\r\n     \r\n\r\n     \r\n# 185 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n      swap(*__a, *__b);\r\n\r\n    }\r\n# 201 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _ForwardIterator1, typename _ForwardIterator2>\r\n   \r\n    _ForwardIterator2\r\n    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\r\n  _ForwardIterator2 __first2)\r\n    {\r\n\r\n     \r\n\r\n     \r\n\r\n      ;\r\n\r\n      for (; __first1 != __last1; ++__first1, (void)++__first2)\r\n std::iter_swap(__first1, __first2);\r\n      return __first2;\r\n    }\r\n# 230 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _Tp>\r\n    [[__nodiscard__]] constexpr\r\n    inline const _Tp&\r\n    min(const _Tp& __a, const _Tp& __b)\r\n    {\r\n\r\n     \r\n\r\n      if (__b < __a)\r\n return __b;\r\n      return __a;\r\n    }\r\n# 254 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _Tp>\r\n    [[__nodiscard__]] constexpr\r\n    inline const _Tp&\r\n    max(const _Tp& __a, const _Tp& __b)\r\n    {\r\n\r\n     \r\n\r\n      if (__a < __b)\r\n return __b;\r\n      return __a;\r\n    }\r\n# 278 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _Tp, typename _Compare>\r\n    [[__nodiscard__]] constexpr\r\n    inline const _Tp&\r\n    min(const _Tp& __a, const _Tp& __b, _Compare __comp)\r\n    {\r\n\r\n      if (__comp(__b, __a))\r\n return __b;\r\n      return __a;\r\n    }\r\n# 300 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _Tp, typename _Compare>\r\n    [[__nodiscard__]] constexpr\r\n"]
[81.331396, "o", "    inline const _Tp&\r\n    max(const _Tp& __a, const _Tp& __b, _Compare __comp)\r\n    {\r\n\r\n      if (__comp(__a, __b))\r\n return __b;\r\n      return __a;\r\n    }\r\n\r\n\r\n\r\n  template<typename _Iterator>\r\n   \r\n    inline _Iterator\r\n    __niter_base(_Iterator __it)\r\n    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)\r\n    { return __it; }\r\n# 332 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _Ite, typename _Seq>\r\n"]
[81.331429, "o", "   \r\n    decltype(std::__niter_base(std::declval<_Ite>()))\r\n    __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,\r\n   std::random_access_iterator_tag>&)\r\n    noexcept(std::is_nothrow_copy_constructible<_Ite>::value);\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.331457, "o", "  template<typename _From, typename _To>\r\n   \r\n    inline _From\r\n    __niter_wrap(_From __from, _To __res)\r\n    { return __from + (std::__niter_base(__res) - std::__niter_base(__from)); }\r\n\r\n"]
[81.331492, "o", "\r\n  template<typename _Iterator>\r\n   \r\n    inline _Iterator\r\n    __niter_wrap(const _Iterator&, _Iterator __res)\r\n    { return __res; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.331525, "o", "\r\n  template<bool _IsMove, bool _IsSimple, typename _Category>\r\n    struct __copy_move\r\n    {\r\n      template<typename _II, typename _OI>\r\n\r\n static _OI\r\n"]
[81.33156, "o", " __copy_m(_II __first, _II __last, _OI __result)\r\n {\r\n   for (; __first != __last; ++__result, (void)++__first)\r\n     *__result = *__first;\r\n   return __result;\r\n }\r\n    };\r\n\r\n\r\n  template<typename _Category>\r\n"]
[81.331592, "o", "    struct __copy_move<true, false, _Category>\r\n    {\r\n      template<typename _II, typename _OI>\r\n\r\n static _OI\r\n __copy_m(_II __first, _II __last, _OI __result)\r\n {\r\n   for (; __first != __last; ++__result, (void)++__first)\r\n"]
[81.331624, "o", "     *__result = std::move(*__first);\r\n   return __result;\r\n }\r\n    };\r\n\r\n\r\n  template<>\r\n    struct __copy_move<false, false, random_access_iterator_tag>\r\n    {\r\n      template<typename _II, typename _OI>\r\n"]
[81.331655, "o", "\r\n static _OI\r\n __copy_m(_II __first, _II __last, _OI __result)\r\n {\r\n   typedef typename iterator_traits<_II>::difference_type _Distance;\r\n   for(_Distance __n = __last - __first; __n > 0; --__n)\r\n     {\r\n"]
[81.331688, "o", "       *__result = *__first;\r\n       ++__first;\r\n       ++__result;\r\n     }\r\n   return __result;\r\n }\r\n\r\n      template<typename _Tp, typename _Up>\r\n static void\r\n __assign_one(_Tp* __to, _Up* __from)\r\n"]
[81.331724, "o", " { *__to = *__from; }\r\n    };\r\n\r\n\r\n  template<>\r\n    struct __copy_move<true, false, random_access_iterator_tag>\r\n    {\r\n      template<typename _II, typename _OI>\r\n"]
[81.331753, "o", "\r\n static _OI\r\n __copy_m(_II __first, _II __last, _OI __result)\r\n {\r\n   typedef typename iterator_traits<_II>::difference_type _Distance;\r\n   for(_Distance __n = __last - __first; __n > 0; --__n)\r\n     {\r\n"]
[81.331794, "o", "       *__result = std::move(*__first);\r\n       ++__first;\r\n       ++__result;\r\n     }\r\n   return __result;\r\n }\r\n\r\n      template<typename _Tp, typename _Up>\r\n static void\r\n __assign_one(_Tp* __to, _Up* __from)\r\n"]
[81.331832, "o", " { *__to = std::move(*__from); }\r\n    };\r\n\r\n\r\n  template<bool _IsMove>\r\n    struct __copy_move<_IsMove, true, random_access_iterator_tag>\r\n    {\r\n      template<typename _Tp, typename _Up>\r\n\r\n static _Up*\r\n"]
[81.331861, "o", " __copy_m(_Tp* __first, _Tp* __last, _Up* __result)\r\n {\r\n   const ptrdiff_t _Num = __last - __first;\r\n   if (__builtin_expect(_Num > 1, true))\r\n     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);\r\n   else if (_Num == 1)\r\n     std::__copy_move<_IsMove, false, random_access_iterator_tag>::\r\n"]
[81.331896, "o", "       __assign_one(__result, __first);\r\n   return __result + _Num;\r\n }\r\n    };\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Ref, typename _Ptr>\r\n    struct _Deque_iterator;\r\n\r\n"]
[81.331926, "o", "  struct _Bit_iterator;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT>\r\n    struct char_traits;\r\n\r\n"]
[81.331963, "o", "  template<typename _CharT, typename _Traits>\r\n    class istreambuf_iterator;\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    class ostreambuf_iterator;\r\n\r\n  template<bool _IsMove, typename _CharT>\r\n    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\r\n      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type\r\n    __copy_move_a2(_CharT*, _CharT*,\r\n"]
[81.331996, "o", "     ostreambuf_iterator<_CharT, char_traits<_CharT> >);\r\n\r\n  template<bool _IsMove, typename _CharT>\r\n    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\r\n      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type\r\n    __copy_move_a2(const _CharT*, const _CharT*,\r\n     ostreambuf_iterator<_CharT, char_traits<_CharT> >);\r\n\r\n  template<bool _IsMove, typename _CharT>\r\n    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\r\n"]
[81.332038, "o", "        _CharT*>::__type\r\n    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,\r\n     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);\r\n\r\n  template<bool _IsMove, typename _CharT>\r\n    typename __gnu_cxx::__enable_if<\r\n      __is_char<_CharT>::__value,\r\n      std::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type\r\n    __copy_move_a2(\r\n"]
[81.33207, "o", " istreambuf_iterator<_CharT, char_traits<_CharT> >,\r\n istreambuf_iterator<_CharT, char_traits<_CharT> >,\r\n std::_Deque_iterator<_CharT, _CharT&, _CharT*>);\r\n\r\n\r\n  template<bool _IsMove, typename _II, typename _OI>\r\n   \r\n    inline _OI\r\n    __copy_move_a2(_II __first, _II __last, _OI __result)\r\n    {\r\n"]
[81.332101, "o", "      typedef typename iterator_traits<_II>::iterator_category _Category;\r\n\r\n\r\n\r\n\r\n\r\n      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,\r\n         _Category>::__copy_m(__first, __last, __result);\r\n    }\r\n\r\n  template<bool _IsMove,\r\n"]
[81.332135, "o", "    typename _Tp, typename _Ref, typename _Ptr, typename _OI>\r\n    _OI\r\n    __copy_move_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,\r\n     std::_Deque_iterator<_Tp, _Ref, _Ptr>,\r\n     _OI);\r\n\r\n  template<bool _IsMove,\r\n"]
[81.332546, "o", "    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>\r\n    std::_Deque_iterator<_OTp, _OTp&, _OTp*>\r\n    __copy_move_a1(std::_Deque_iterator<_ITp, _IRef, _IPtr>,\r\n     std::_Deque_iterator<_ITp, _IRef, _IPtr>,\r\n     std::_Deque_iterator<_OTp, _OTp&, _OTp*>);\r\n\r\n  template<bool _IsMove, typename _II, typename _Tp>\r\n    typename __gnu_cxx::__enable_if<\r\n      __is_random_access_iter<_II>::__value,\r\n      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type\r\n    __copy_move_a1(_II, _II, std::_Deque_iterator<_Tp, _Tp&, _Tp*>);\r\n\r\n  template<bool _IsMove, typename _II, typename _OI>\r\n   \r\n    inline _OI\r\n    __copy_move_a1(_II __first, _II __last, _OI __result)\r\n    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }\r\n\r\n  template<bool _IsMove, typename _II, typename _OI>\r\n   \r\n    inline _OI\r\n    __copy_move_a(_II __first, _II __last, _OI __result)\r\n    {\r\n      return std::__niter_wrap(__result,\r\n  std::__copy_move_a1<_IsMove>(std::__niter_base(__first),\r\n          std::__niter_base(__last),\r\n          std::__niter_base(__result)));\r\n    }\r\n\r\n  template<bool _IsMove,\r\n    typename _Ite, typename _Seq, typename _Cat, typename _OI>\r\n   \r\n    _OI\r\n    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,\r\n    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,\r\n    _OI);\r\n\r\n  template<bool _IsMove,\r\n    typename _II, typename _Ite, typename _Seq, typename _Cat>\r\n   \r\n    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>\r\n    __copy_move_a(_II, _II,\r\n    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);\r\n\r\n  template<bool _IsMove,\r\n    typename _IIte, typename _ISeq, typename _ICat,\r\n    typename _OIte, typename _OSeq, typename _OCat>\r\n   \r\n    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>\r\n    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,\r\n    const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,\r\n    const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);\r\n\r\n  template<typename _InputIterator, typename _Size, typename _OutputIterator>\r\n   \r\n    _OutputIterator\r\n    __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result,\r\n        bool)\r\n    {\r\n      if (__n > 0)\r\n {\r\n   while (true)\r\n     {\r\n       *__result = *__first;\r\n       ++__result;\r\n       if (--__n > 0)\r\n  ++__first;\r\n       else\r\n  break;\r\n     }\r\n }\r\n      return __result;\r\n    }\r\n\r\n\r\n  template<typename _CharT, typename _Size>\r\n    typename __gnu_cxx::__enable_if<\r\n      __is_char<_CharT>::__value, _CharT*>::__type\r\n    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,\r\n        _Size, _CharT*, bool);\r\n\r\n  template<typename _CharT, typename _Size>\r\n    typename __gnu_cxx::__enable_if<\r\n      __is_char<_CharT>::__value,\r\n      std::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type\r\n    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >, _Size,\r\n        std::_Deque_iterator<_CharT, _CharT&, _CharT*>,\r\n        bool);\r\n# 639 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _II, typename _OI>\r\n   \r\n    inline _OI\r\n"]
[81.332628, "o", "    copy(_II __first, _II __last, _OI __result)\r\n    {\r\n\r\n     \r\n     \r\n\r\n      ;\r\n\r\n      return std::__copy_move_a<__is_move_iterator<_II>::__value>\r\n      (std::__miter_base(__first), std::__miter_base(__last), __result);\r\n    }\r\n# 672 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _II, typename _OI>\r\n   \r\n    inline _OI\r\n    move(_II __first, _II __last, _OI __result)\r\n    {\r\n\r\n     \r\n     \r\n\r\n      ;\r\n\r\n      return std::__copy_move_a<true>(std::__miter_base(__first),\r\n          std::__miter_base(__last), __result);\r\n"]
[81.332666, "o", "    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<bool _IsMove, bool _IsSimple, typename _Category>\r\n    struct __copy_move_backward\r\n    {\r\n      template<typename _BI1, typename _BI2>\r\n\r\n static _BI2\r\n __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\r\n {\r\n"]
[81.332699, "o", "   while (__first != __last)\r\n     *--__result = *--__last;\r\n   return __result;\r\n }\r\n    };\r\n\r\n\r\n  template<typename _Category>\r\n"]
[81.332733, "o", "    struct __copy_move_backward<true, false, _Category>\r\n    {\r\n      template<typename _BI1, typename _BI2>\r\n\r\n static _BI2\r\n __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\r\n {\r\n   while (__first != __last)\r\n     *--__result = std::move(*--__last);\r\n   return __result;\r\n }\r\n"]
[81.332774, "o", "    };\r\n\r\n\r\n  template<>\r\n    struct __copy_move_backward<false, false, random_access_iterator_tag>\r\n    {\r\n      template<typename _BI1, typename _BI2>\r\n\r\n static _BI2\r\n __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\r\n {\r\n   typename iterator_traits<_BI1>::difference_type\r\n"]
[81.332807, "o", "     __n = __last - __first;\r\n   for (; __n > 0; --__n)\r\n     *--__result = *--__last;\r\n   return __result;\r\n }\r\n    };\r\n\r\n\r\n  template<>\r\n    struct __copy_move_backward<true, false, random_access_iterator_tag>\r\n    {\r\n"]
[81.332844, "o", "      template<typename _BI1, typename _BI2>\r\n\r\n static _BI2\r\n __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\r\n {\r\n   typename iterator_traits<_BI1>::difference_type\r\n     __n = __last - __first;\r\n   for (; __n > 0; --__n)\r\n"]
[81.332881, "o", "     *--__result = std::move(*--__last);\r\n   return __result;\r\n }\r\n    };\r\n\r\n\r\n  template<bool _IsMove>\r\n    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>\r\n    {\r\n      template<typename _Tp, typename _Up>\r\n"]
[81.332917, "o", "\r\n static _Up*\r\n __copy_move_b(_Tp* __first, _Tp* __last, _Up* __result)\r\n {\r\n   const ptrdiff_t _Num = __last - __first;\r\n   if (__builtin_expect(_Num > 1, true))\r\n     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);\r\n   else if (_Num == 1)\r\n     std::__copy_move<_IsMove, false, random_access_iterator_tag>::\r\n"]
[81.332953, "o", "       __assign_one(__result - 1, __first);\r\n   return __result - _Num;\r\n }\r\n    };\r\n\r\n  template<bool _IsMove, typename _BI1, typename _BI2>\r\n   \r\n    inline _BI2\r\n    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)\r\n    {\r\n      typedef typename iterator_traits<_BI1>::iterator_category _Category;\r\n\r\n\r\n\r\n\r\n"]
[81.332987, "o", "\r\n      return std::__copy_move_backward<_IsMove,\r\n           __memcpyable<_BI2, _BI1>::__value,\r\n           _Category>::__copy_move_b(__first,\r\n         __last,\r\n         __result);\r\n    }\r\n\r\n  template<bool _IsMove, typename _BI1, typename _BI2>\r\n   \r\n    inline _BI2\r\n"]
[81.333023, "o", "    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)\r\n    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }\r\n\r\n  template<bool _IsMove,\r\n    typename _Tp, typename _Ref, typename _Ptr, typename _OI>\r\n    _OI\r\n    __copy_move_backward_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,\r\n"]
[81.333065, "o", "       std::_Deque_iterator<_Tp, _Ref, _Ptr>,\r\n       _OI);\r\n\r\n  template<bool _IsMove,\r\n    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>\r\n    std::_Deque_iterator<_OTp, _OTp&, _OTp*>\r\n    __copy_move_backward_a1(\r\n   std::_Deque_iterator<_ITp, _IRef, _IPtr>,\r\n"]
[81.333103, "o", "   std::_Deque_iterator<_ITp, _IRef, _IPtr>,\r\n   std::_Deque_iterator<_OTp, _OTp&, _OTp*>);\r\n\r\n  template<bool _IsMove, typename _II, typename _Tp>\r\n    typename __gnu_cxx::__enable_if<\r\n      __is_random_access_iter<_II>::__value,\r\n      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type\r\n    __copy_move_backward_a1(_II, _II,\r\n"]
[81.333135, "o", "       std::_Deque_iterator<_Tp, _Tp&, _Tp*>);\r\n\r\n  template<bool _IsMove, typename _II, typename _OI>\r\n   \r\n    inline _OI\r\n    __copy_move_backward_a(_II __first, _II __last, _OI __result)\r\n    {\r\n      return std::__niter_wrap(__result,\r\n  std::__copy_move_backward_a1<_IsMove>\r\n"]
[81.333165, "o", "    (std::__niter_base(__first), std::__niter_base(__last),\r\n     std::__niter_base(__result)));\r\n    }\r\n\r\n  template<bool _IsMove,\r\n    typename _Ite, typename _Seq, typename _Cat, typename _OI>\r\n   \r\n"]
[81.333196, "o", "    _OI\r\n    __copy_move_backward_a(\r\n  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,\r\n  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,\r\n  _OI);\r\n\r\n  template<bool _IsMove,\r\n"]
[81.333231, "o", "    typename _II, typename _Ite, typename _Seq, typename _Cat>\r\n   \r\n    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>\r\n    __copy_move_backward_a(_II, _II,\r\n  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);\r\n\r\n  template<bool _IsMove,\r\n"]
[81.333266, "o", "    typename _IIte, typename _ISeq, typename _ICat,\r\n    typename _OIte, typename _OSeq, typename _OCat>\r\n   \r\n    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>\r\n    __copy_move_backward_a(\r\n  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,\r\n  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,\r\n  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);\r\n# 875 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n"]
[81.333307, "o", "  template<typename _BI1, typename _BI2>\r\n   \r\n    inline _BI2\r\n    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)\r\n    {\r\n\r\n     \r\n     \r\n"]
[81.333342, "o", "     \r\n\r\n      ;\r\n\r\n      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>\r\n      (std::__miter_base(__first), std::__miter_base(__last), __result);\r\n    }\r\n# 910 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _BI1, typename _BI2>\r\n   \r\n"]
[81.333378, "o", "    inline _BI2\r\n    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)\r\n    {\r\n\r\n     \r\n     \r\n     \r\n\r\n      ;\r\n\r\n"]
[81.333407, "o", "      return std::__copy_move_backward_a<true>(std::__miter_base(__first),\r\n            std::__miter_base(__last),\r\n            __result);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _ForwardIterator, typename _Tp>\r\n   \r\n"]
[81.333441, "o", "    inline typename\r\n    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type\r\n    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,\r\n       const _Tp& __value)\r\n    {\r\n      for (; __first != __last; ++__first)\r\n *__first = __value;\r\n    }\r\n\r\n"]
[81.333474, "o", "  template<typename _ForwardIterator, typename _Tp>\r\n   \r\n    inline typename\r\n    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type\r\n    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,\r\n       const _Tp& __value)\r\n    {\r\n      const _Tp __tmp = __value;\r\n      for (; __first != __last; ++__first)\r\n *__first = __tmp;\r\n"]
[81.333507, "o", "    }\r\n\r\n\r\n  template<typename _Tp>\r\n   \r\n    inline typename\r\n    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type\r\n    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)\r\n"]
[81.333538, "o", "    {\r\n      const _Tp __tmp = __c;\r\n# 971 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n      if (const size_t __len = __last - __first)\r\n __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);\r\n    }\r\n\r\n"]
[81.333577, "o", "  template<typename _Ite, typename _Cont, typename _Tp>\r\n   \r\n    inline void\r\n    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,\r\n       ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,\r\n       const _Tp& __value)\r\n"]
[81.333609, "o", "    { std::__fill_a1(__first.base(), __last.base(), __value); }\r\n\r\n  template<typename _Tp, typename _VTp>\r\n    void\r\n    __fill_a1(const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,\r\n       const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,\r\n       const _VTp&);\r\n\r\n \r\n"]
[81.333638, "o", "  void\r\n  __fill_a1(std::_Bit_iterator, std::_Bit_iterator,\r\n     const bool&);\r\n\r\n  template<typename _FIte, typename _Tp>\r\n   \r\n    inline void\r\n"]
[81.333671, "o", "    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)\r\n    { std::__fill_a1(__first, __last, __value); }\r\n\r\n  template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>\r\n   \r\n    void\r\n    __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,\r\n"]
[81.333701, "o", "      const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,\r\n      const _Tp&);\r\n# 1019 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _ForwardIterator, typename _Tp>\r\n   \r\n    inline void\r\n"]
[81.333734, "o", "    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)\r\n    {\r\n\r\n     \r\n\r\n      ;\r\n\r\n      std::__fill_a(__first, __last, __value);\r\n    }\r\n\r\n"]
[81.333778, "o", "\r\n  inline constexpr int\r\n  __size_to_integer(int __n) { return __n; }\r\n  inline constexpr unsigned\r\n  __size_to_integer(unsigned __n) { return __n; }\r\n  inline constexpr long\r\n  __size_to_integer(long __n) { return __n; }\r\n"]
[81.333816, "o", "  inline constexpr unsigned long\r\n  __size_to_integer(unsigned long __n) { return __n; }\r\n  inline constexpr long long\r\n  __size_to_integer(long long __n) { return __n; }\r\n  inline constexpr unsigned long long\r\n  __size_to_integer(unsigned long long __n) { return __n; }\r\n\r\n\r\n  __extension__ inline constexpr __int128\r\n"]
[81.33385, "o", "  __size_to_integer(__int128 __n) { return __n; }\r\n  __extension__ inline constexpr unsigned __int128\r\n  __size_to_integer(unsigned __int128 __n) { return __n; }\r\n# 1071 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n"]
[81.333882, "o", "  inline constexpr long long\r\n  __size_to_integer(float __n) { return (long long)__n; }\r\n  inline constexpr long long\r\n  __size_to_integer(double __n) { return (long long)__n; }\r\n  inline constexpr long long\r\n"]
[81.33391, "o", "  __size_to_integer(long double __n) { return (long long)__n; }\r\n\r\n  __extension__ inline constexpr long long\r\n  __size_to_integer(__float128 __n) { return (long long)__n; }\r\n\r\n\r\n  template<typename _OutputIterator, typename _Size, typename _Tp>\r\n   \r\n    inline typename\r\n"]
[81.333946, "o", "    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type\r\n    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)\r\n    {\r\n      for (; __n > 0; --__n, (void) ++__first)\r\n *__first = __value;\r\n      return __first;\r\n    }\r\n\r\n  template<typename _OutputIterator, typename _Size, typename _Tp>\r\n   \r\n"]
[81.333982, "o", "    inline typename\r\n    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type\r\n    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)\r\n    {\r\n      const _Tp __tmp = __value;\r\n      for (; __n > 0; --__n, (void) ++__first)\r\n *__first = __tmp;\r\n      return __first;\r\n    }\r\n\r\n"]
[81.334027, "o", "  template<typename _Ite, typename _Seq, typename _Cat, typename _Size,\r\n    typename _Tp>\r\n   \r\n    ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>\r\n    __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,\r\n        _Size __n, const _Tp& __value,\r\n        std::input_iterator_tag);\r\n\r\n  template<typename _OutputIterator, typename _Size, typename _Tp>\r\n   \r\n"]
[81.334065, "o", "    inline _OutputIterator\r\n    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,\r\n        std::output_iterator_tag)\r\n    {\r\n\r\n      static_assert(is_integral<_Size>{}, \"fill_n must pass integral size\");\r\n\r\n      return __fill_n_a1(__first, __n, __value);\r\n    }\r\n\r\n  template<typename _OutputIterator, typename _Size, typename _Tp>\r\n   \r\n    inline _OutputIterator\r\n    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,\r\n"]
[81.334099, "o", "        std::input_iterator_tag)\r\n    {\r\n\r\n      static_assert(is_integral<_Size>{}, \"fill_n must pass integral size\");\r\n\r\n      return __fill_n_a1(__first, __n, __value);\r\n    }\r\n\r\n  template<typename _OutputIterator, typename _Size, typename _Tp>\r\n   \r\n"]
[81.334133, "o", "    inline _OutputIterator\r\n    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,\r\n        std::random_access_iterator_tag)\r\n    {\r\n\r\n      static_assert(is_integral<_Size>{}, \"fill_n must pass integral size\");\r\n\r\n      if (__n <= 0)\r\n"]
[81.334169, "o", " return __first;\r\n\r\n      ;\r\n\r\n      std::__fill_a(__first, __first + __n, __value);\r\n      return __first + __n;\r\n    }\r\n# 1172 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _OI, typename _Size, typename _Tp>\r\n   \r\n"]
[81.334207, "o", "    inline _OI\r\n    fill_n(_OI __first, _Size __n, const _Tp& __value)\r\n    {\r\n\r\n     \r\n\r\n      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,\r\n          std::__iterator_category(__first));\r\n"]
[81.334242, "o", "    }\r\n\r\n  template<bool _BoolType>\r\n    struct __equal\r\n    {\r\n      template<typename _II1, typename _II2>\r\n\r\n static bool\r\n equal(_II1 __first1, _II1 __last1, _II2 __first2)\r\n {\r\n"]
[81.334286, "o", "   for (; __first1 != __last1; ++__first1, (void) ++__first2)\r\n     if (!(*__first1 == *__first2))\r\n       return false;\r\n   return true;\r\n }\r\n    };\r\n\r\n  template<>\r\n    struct __equal<true>\r\n    {\r\n      template<typename _Tp>\r\n\r\n"]
[81.334319, "o", " static bool\r\n equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)\r\n {\r\n   if (const size_t __len = (__last1 - __first1))\r\n     return !std::__memcmp(__first1, __first2, __len);\r\n   return true;\r\n }\r\n    };\r\n\r\n  template<typename _Tp, typename _Ref, typename _Ptr, typename _II>\r\n    typename __gnu_cxx::__enable_if<\r\n      __is_random_access_iter<_II>::__value, bool>::__type\r\n"]
[81.334357, "o", "    __equal_aux1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,\r\n   std::_Deque_iterator<_Tp, _Ref, _Ptr>,\r\n   _II);\r\n\r\n  template<typename _Tp1, typename _Ref1, typename _Ptr1,\r\n    typename _Tp2, typename _Ref2, typename _Ptr2>\r\n    bool\r\n    __equal_aux1(std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,\r\n"]
[81.334391, "o", "   std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,\r\n   std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);\r\n\r\n  template<typename _II, typename _Tp, typename _Ref, typename _Ptr>\r\n    typename __gnu_cxx::__enable_if<\r\n      __is_random_access_iter<_II>::__value, bool>::__type\r\n    __equal_aux1(_II, _II,\r\n  std::_Deque_iterator<_Tp, _Ref, _Ptr>);\r\n\r\n  template<typename _II1, typename _II2>\r\n   \r\n"]
[81.334427, "o", "    inline bool\r\n    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)\r\n    {\r\n      typedef typename iterator_traits<_II1>::value_type _ValueType1;\r\n      const bool __simple = ((__is_integer<_ValueType1>::__value\r\n         || __is_pointer<_ValueType1>::__value)\r\n        && __memcmpable<_II1, _II2>::__value);\r\n      return std::__equal<__simple>::equal(__first1, __last1, __first2);\r\n    }\r\n"]
[81.334456, "o", "\r\n  template<typename _II1, typename _II2>\r\n   \r\n    inline bool\r\n    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)\r\n    {\r\n      return std::__equal_aux1(std::__niter_base(__first1),\r\n          std::__niter_base(__last1),\r\n          std::__niter_base(__first2));\r\n"]
[81.334495, "o", "    }\r\n\r\n  template<typename _II1, typename _Seq1, typename _Cat1, typename _II2>\r\n   \r\n    bool\r\n    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,\r\n  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,\r\n  _II2);\r\n\r\n  template<typename _II1, typename _II2, typename _Seq2, typename _Cat2>\r\n   \r\n"]
[81.334528, "o", "    bool\r\n    __equal_aux(_II1, _II1,\r\n  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);\r\n\r\n  template<typename _II1, typename _Seq1, typename _Cat1,\r\n    typename _II2, typename _Seq2, typename _Cat2>\r\n   \r\n    bool\r\n    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,\r\n  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,\r\n"]
[81.334563, "o", "  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);\r\n\r\n  template<typename, typename>\r\n    struct __lc_rai\r\n    {\r\n      template<typename _II1, typename _II2>\r\n\r\n static _II1\r\n"]
[81.334601, "o", " __newlast1(_II1, _II1 __last1, _II2, _II2)\r\n { return __last1; }\r\n\r\n      template<typename _II>\r\n\r\n static bool\r\n __cnd2(_II __first, _II __last)\r\n { return __first != __last; }\r\n    };\r\n\r\n  template<>\r\n"]
[81.334632, "o", "    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>\r\n    {\r\n      template<typename _RAI1, typename _RAI2>\r\n\r\n static _RAI1\r\n __newlast1(_RAI1 __first1, _RAI1 __last1,\r\n     _RAI2 __first2, _RAI2 __last2)\r\n {\r\n   const typename iterator_traits<_RAI1>::difference_type\r\n"]
[81.334666, "o", "     __diff1 = __last1 - __first1;\r\n   const typename iterator_traits<_RAI2>::difference_type\r\n     __diff2 = __last2 - __first2;\r\n   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;\r\n }\r\n\r\n      template<typename _RAI>\r\n static bool\r\n"]
[81.334694, "o", " __cnd2(_RAI, _RAI)\r\n { return true; }\r\n    };\r\n\r\n  template<typename _II1, typename _II2, typename _Compare>\r\n   \r\n    bool\r\n    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,\r\n"]
[81.335646, "o", "       _II2 __first2, _II2 __last2,\r\n       _Compare __comp)\r\n    {\r\n      typedef typename iterator_traits<_II1>::iterator_category _Category1;\r\n      typedef typename iterator_traits<_II2>::iterator_category _Category2;\r\n      typedef std::__lc_rai<_Category1, _Category2> __rai_type;\r\n\r\n      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);\r\n      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);\r\n    ++__first1, (void)++__first2)\r\n {\r\n   if (__comp(__first1, __first2))\r\n     return true;\r\n   if (__comp(__first2, __first1))\r\n     return false;\r\n }\r\n      return __first1 == __last1 && __first2 != __last2;\r\n    }\r\n\r\n  template<bool _BoolType>\r\n    struct __lexicographical_compare\r\n    {\r\n      template<typename _II1, typename _II2>\r\n\r\n static bool\r\n __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\r\n {\r\n   using __gnu_cxx::__ops::__iter_less_iter;\r\n   return std::__lexicographical_compare_impl(__first1, __last1,\r\n           __first2, __last2,\r\n           __iter_less_iter());\r\n }\r\n\r\n      template<typename _II1, typename _II2>\r\n\r\n static int\r\n __3way(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\r\n {\r\n   while (__first1 != __last1)\r\n     {\r\n       if (__first2 == __last2)\r\n  return +1;\r\n       if (*__first1 < *__first2)\r\n  return -1;\r\n       if (*__first2 < *__first1)\r\n  return +1;\r\n       ++__first1;\r\n       ++__first2;\r\n     }\r\n   return int(__first2 == __last2) - 1;\r\n }\r\n    };\r\n\r\n  template<>\r\n    struct __lexicographical_compare<true>\r\n    {\r\n      template<typename _Tp, typename _Up>\r\n\r\n static bool\r\n __lc(const _Tp* __first1, const _Tp* __last1,\r\n      const _Up* __first2, const _Up* __last2)\r\n { return __3way(__first1, __last1, __first2, __last2) < 0; }\r\n\r\n      template<typename _Tp, typename _Up>\r\n\r\n static ptrdiff_t\r\n __3way(const _Tp* __first1, const _Tp* __last1,\r\n        const _Up* __first2, const _Up* __last2)\r\n {\r\n   const size_t __len1 = __last1 - __first1;\r\n   const size_t __len2 = __last2 - __first2;\r\n   if (const size_t __len = std::min(__len1, __len2))\r\n     if (int __result = std::__memcmp(__first1, __first2, __len))\r\n       return __result;\r\n   return ptrdiff_t(__len1 - __len2);\r\n }\r\n    };\r\n\r\n  template<typename _II1, typename _II2>\r\n   \r\n    inline bool\r\n    __lexicographical_compare_aux1(_II1 __first1, _II1 __last1,\r\n       _II2 __first2, _II2 __last2)\r\n    {\r\n      typedef typename iterator_traits<_II1>::value_type _ValueType1;\r\n      typedef typename iterator_traits<_II2>::value_type _ValueType2;\r\n      const bool __simple =\r\n (__is_memcmp_ordered_with<_ValueType1, _ValueType2>::__value\r\n  && __is_pointer<_II1>::__value\r\n  && __is_pointer<_II2>::__value\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  );\r\n\r\n      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,\r\n           __first2, __last2);\r\n    }\r\n\r\n  template<typename _Tp1, typename _Ref1, typename _Ptr1,\r\n    typename _Tp2>\r\n    bool\r\n    __lexicographical_compare_aux1(\r\n std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,\r\n std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,\r\n _Tp2*, _Tp2*);\r\n\r\n  template<typename _Tp1,\r\n    typename _Tp2, typename _Ref2, typename _Ptr2>\r\n    bool\r\n    __lexicographical_compare_aux1(_Tp1*, _Tp1*,\r\n std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>,\r\n std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);\r\n\r\n  template<typename _Tp1, typename _Ref1, typename _Ptr1,\r\n    typename _Tp2, typename _Ref2, typename _Ptr2>\r\n    bool\r\n    __lexicographical_compare_aux1(\r\n std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,\r\n std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,\r\n std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>,\r\n std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);\r\n\r\n  template<typename _II1, typename _II2>\r\n   \r\n    inline bool\r\n    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,\r\n      _II2 __first2, _II2 __last2)\r\n    {\r\n      return std::__lexicographical_compare_aux1(std::__niter_base(__first1),\r\n       std::__niter_base(__last1),\r\n       std::__niter_base(__first2),\r\n       std::__niter_base(__last2));\r\n    }\r\n\r\n  template<typename _Iter1, typename _Seq1, typename _Cat1,\r\n    typename _II2>\r\n   \r\n    bool\r\n    __lexicographical_compare_aux(\r\n  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,\r\n  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,\r\n  _II2, _II2);\r\n\r\n  template<typename _II1,\r\n    typename _Iter2, typename _Seq2, typename _Cat2>\r\n   \r\n    bool\r\n    __lexicographical_compare_aux(\r\n  _II1, _II1,\r\n  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&,\r\n  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&);\r\n\r\n  template<typename _Iter1, typename _Seq1, typename _Cat1,\r\n    typename _Iter2, typename _Seq2, typename _Cat2>\r\n   \r\n    bool\r\n    __lexicographical_compare_aux(\r\n  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,\r\n  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,\r\n  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&,\r\n  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&);\r\n\r\n  template<typename _ForwardIterator, typename _Tp, typename _Compare>\r\n   \r\n    _ForwardIterator\r\n    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,\r\n    const _Tp& __val, _Compare __comp)\r\n    {\r\n      typedef typename iterator_traits<_ForwardIterator>::difference_type\r\n _DistanceType;\r\n\r\n      _DistanceType __len = std::distance(__first, __last);\r\n\r\n      while (__len > 0)\r\n {\r\n   _DistanceType __half = __len >> 1;\r\n   _ForwardIterator __middle = __first;\r\n   std::advance(__middle, __half);\r\n   if (__comp(__middle, __val))\r\n     {\r\n       __first = __middle;\r\n       ++__first;\r\n       __len = __len - __half - 1;\r\n     }\r\n   else\r\n     __len = __half;\r\n }\r\n      return __first;\r\n    }\r\n# 1524 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _ForwardIterator, typename _Tp>\r\n    [[__nodiscard__]]\r\n    inline _ForwardIterator\r\n    lower_bound(_ForwardIterator __first, _ForwardIterator __last,\r\n  const _Tp& __val)\r\n    {\r\n\r\n     \r\n     \r\n\r\n      ;\r\n\r\n      return std::__lower_bound(__first, __last, __val,\r\n    __gnu_cxx::__ops::__iter_less_val());\r\n    }\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    inline constexpr _Tp\r\n    __lg(_Tp __n)\r\n    {\r\n\r\n      return std::__bit_width(make_unsigned_t<_Tp>(__n)) - 1;\r\n# 1557 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n    }\r\n\r\n\r\n# 1573 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _II1, typename _II2>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    equal(_II1 __first1, _II1 __last1, _II2 __first2)\r\n    {\r\n\r\n     \r\n     \r\n     \r\n\r\n\r\n"]
[81.335765, "o", "      ;\r\n\r\n      return std::__equal_aux(__first1, __last1, __first2);\r\n    }\r\n# 1604 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    equal(_IIter1 __first1, _IIter1 __last1,\r\n   _IIter2 __first2, _BinaryPredicate __binary_pred)\r\n    {\r\n\r\n     \r\n     \r\n      ;\r\n\r\n      for (; __first1 != __last1; ++__first1, (void)++__first2)\r\n if (!bool(__binary_pred(*__first1, *__first2)))\r\n   return false;\r\n      return true;\r\n    }\r\n\r\n\r\n\r\n  template<typename _II1, typename _II2>\r\n   \r\n    inline bool\r\n    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\r\n    {\r\n      using _RATag = random_access_iterator_tag;\r\n      using _Cat1 = typename iterator_traits<_II1>::iterator_category;\r\n      using _Cat2 = typename iterator_traits<_II2>::iterator_category;\r\n      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;\r\n      if (_RAIters())\r\n {\r\n   auto __d1 = std::distance(__first1, __last1);\r\n   auto __d2 = std::distance(__first2, __last2);\r\n   if (__d1 != __d2)\r\n     return false;\r\n   return std::equal(__first1, __last1, __first2);\r\n }\r\n\r\n      for (; __first1 != __last1 && __first2 != __last2;\r\n   ++__first1, (void)++__first2)\r\n"]
[81.335806, "o", " if (!(*__first1 == *__first2))\r\n   return false;\r\n      return __first1 == __last1 && __first2 == __last2;\r\n    }\r\n\r\n\r\n  template<typename _II1, typename _II2, typename _BinaryPredicate>\r\n   \r\n    inline bool\r\n    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,\r\n      _BinaryPredicate __binary_pred)\r\n    {\r\n      using _RATag = random_access_iterator_tag;\r\n      using _Cat1 = typename iterator_traits<_II1>::iterator_category;\r\n      using _Cat2 = typename iterator_traits<_II2>::iterator_category;\r\n      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;\r\n"]
[81.335843, "o", "      if (_RAIters())\r\n {\r\n   auto __d1 = std::distance(__first1, __last1);\r\n   auto __d2 = std::distance(__first2, __last2);\r\n   if (__d1 != __d2)\r\n     return false;\r\n   return std::equal(__first1, __last1, __first2,\r\n           __binary_pred);\r\n }\r\n\r\n      for (; __first1 != __last1 && __first2 != __last2;\r\n   ++__first1, (void)++__first2)\r\n"]
[81.335875, "o", " if (!bool(__binary_pred(*__first1, *__first2)))\r\n   return false;\r\n      return __first1 == __last1 && __first2 == __last2;\r\n    }\r\n# 1691 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _II1, typename _II2>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\r\n    {\r\n"]
[81.335917, "o", "\r\n     \r\n     \r\n     \r\n\r\n\r\n      ;\r\n      ;\r\n\r\n      return std::__equal4(__first1, __last1, __first2, __last2);\r\n    }\r\n# 1724 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n"]
[81.335953, "o", "  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    equal(_IIter1 __first1, _IIter1 __last1,\r\n   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)\r\n    {\r\n\r\n     \r\n     \r\n      ;\r\n      ;\r\n\r\n      return std::__equal4(__first1, __last1, __first2, __last2,\r\n          __binary_pred);\r\n    }\r\n# 1756 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n"]
[81.335992, "o", "  template<typename _II1, typename _II2>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    lexicographical_compare(_II1 __first1, _II1 __last1,\r\n       _II2 __first2, _II2 __last2)\r\n    {\r\n\r\n\r\n\r\n\r\n\r\n     \r\n     \r\n     \r\n"]
[81.336025, "o", "     \r\n      ;\r\n      ;\r\n\r\n      return std::__lexicographical_compare_aux(__first1, __last1,\r\n      __first2, __last2);\r\n    }\r\n# 1791 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _II1, typename _II2, typename _Compare>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    lexicographical_compare(_II1 __first1, _II1 __last1,\r\n       _II2 __first2, _II2 __last2, _Compare __comp)\r\n"]
[81.336057, "o", "    {\r\n\r\n     \r\n     \r\n      ;\r\n      ;\r\n\r\n      return std::__lexicographical_compare_impl\r\n (__first1, __last1, __first2, __last2,\r\n  __gnu_cxx::__ops::__iter_comp_iter(__comp));\r\n"]
[81.336396, "o", "    }\r\n# 1906 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _InputIterator1, typename _InputIterator2,\r\n    typename _BinaryPredicate>\r\n   \r\n    pair<_InputIterator1, _InputIterator2>\r\n    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\r\n        _InputIterator2 __first2, _BinaryPredicate __binary_pred)\r\n    {\r\n      while (__first1 != __last1 && __binary_pred(__first1, __first2))\r\n {\r\n   ++__first1;\r\n   ++__first2;\r\n }\r\n      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\r\n    }\r\n# 1934 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _InputIterator1, typename _InputIterator2>\r\n    [[__nodiscard__]]\r\n    inline pair<_InputIterator1, _InputIterator2>\r\n    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\r\n      _InputIterator2 __first2)\r\n    {\r\n\r\n     \r\n     \r\n     \r\n\r\n\r\n      ;\r\n\r\n      return std::__mismatch(__first1, __last1, __first2,\r\n        __gnu_cxx::__ops::__iter_equal_to_iter());\r\n    }\r\n# 1968 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _InputIterator1, typename _InputIterator2,\r\n    typename _BinaryPredicate>\r\n    [[__nodiscard__]]\r\n    inline pair<_InputIterator1, _InputIterator2>\r\n    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\r\n      _InputIterator2 __first2, _BinaryPredicate __binary_pred)\r\n    {\r\n\r\n     \r\n     \r\n      ;\r\n\r\n      return std::__mismatch(__first1, __last1, __first2,\r\n __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));\r\n    }\r\n\r\n\r\n  template<typename _InputIterator1, typename _InputIterator2,\r\n    typename _BinaryPredicate>\r\n   \r\n    pair<_InputIterator1, _InputIterator2>\r\n    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\r\n        _InputIterator2 __first2, _InputIterator2 __last2,\r\n        _BinaryPredicate __binary_pred)\r\n    {\r\n      while (__first1 != __last1 && __first2 != __last2\r\n      && __binary_pred(__first1, __first2))\r\n {\r\n   ++__first1;\r\n   ++__first2;\r\n }\r\n      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\r\n    }\r\n# 2016 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _InputIterator1, typename _InputIterator2>\r\n    [[__nodiscard__]]\r\n    inline pair<_InputIterator1, _InputIterator2>\r\n"]
[81.336487, "o", "    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\r\n      _InputIterator2 __first2, _InputIterator2 __last2)\r\n    {\r\n\r\n     \r\n     \r\n     \r\n\r\n\r\n      ;\r\n      ;\r\n\r\n"]
[81.336521, "o", "      return std::__mismatch(__first1, __last1, __first2, __last2,\r\n        __gnu_cxx::__ops::__iter_equal_to_iter());\r\n    }\r\n# 2052 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _InputIterator1, typename _InputIterator2,\r\n    typename _BinaryPredicate>\r\n    [[__nodiscard__]]\r\n    inline pair<_InputIterator1, _InputIterator2>\r\n    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\r\n      _InputIterator2 __first2, _InputIterator2 __last2,\r\n      _BinaryPredicate __binary_pred)\r\n    {\r\n\r\n     \r\n     \r\n      ;\r\n      ;\r\n\r\n      return std::__mismatch(__first1, __last1, __first2, __last2,\r\n        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));\r\n"]
[81.336613, "o", "    }\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _InputIterator, typename _Predicate>\r\n   \r\n    inline _InputIterator\r\n    __find_if(_InputIterator __first, _InputIterator __last,\r\n       _Predicate __pred, input_iterator_tag)\r\n    {\r\n      while (__first != __last && !__pred(__first))\r\n ++__first;\r\n      return __first;\r\n    }\r\n\r\n\r\n  template<typename _RandomAccessIterator, typename _Predicate>\r\n   \r\n    _RandomAccessIterator\r\n    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,\r\n       _Predicate __pred, random_access_iterator_tag)\r\n    {\r\n      typename iterator_traits<_RandomAccessIterator>::difference_type\r\n __trip_count = (__last - __first) >> 2;\r\n\r\n"]
[81.336642, "o", "      for (; __trip_count > 0; --__trip_count)\r\n {\r\n   if (__pred(__first))\r\n     return __first;\r\n   ++__first;\r\n\r\n   if (__pred(__first))\r\n"]
[81.336669, "o", "     return __first;\r\n   ++__first;\r\n\r\n   if (__pred(__first))\r\n     return __first;\r\n   ++__first;\r\n\r\n   if (__pred(__first))\r\n     return __first;\r\n"]
[81.336697, "o", "   ++__first;\r\n }\r\n\r\n      switch (__last - __first)\r\n {\r\n case 3:\r\n   if (__pred(__first))\r\n     return __first;\r\n   ++__first;\r\n\r\n"]
[81.336839, "o", " case 2:\r\n   if (__pred(__first))\r\n     return __first;\r\n   ++__first;\r\n\r\n case 1:\r\n   if (__pred(__first))\r\n     return __first;\r\n   ++__first;\r\n\r\n case 0:\r\n default:\r\n   return __last;\r\n }\r\n    }\r\n\r\n  template<typename _Iterator, typename _Predicate>\r\n   \r\n    inline _Iterator\r\n    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)\r\n    {\r\n      return __find_if(__first, __last, __pred,\r\n         std::__iterator_category(__first));\r\n    }\r\n\r\n  template<typename _InputIterator, typename _Predicate>\r\n   \r\n    typename iterator_traits<_InputIterator>::difference_type\r\n    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\r\n    {\r\n      typename iterator_traits<_InputIterator>::difference_type __n = 0;\r\n      for (; __first != __last; ++__first)\r\n if (__pred(__first))\r\n   ++__n;\r\n      return __n;\r\n    }\r\n\r\n"]
[81.336868, "o", "  template<typename _ForwardIterator, typename _Predicate>\r\n   \r\n    _ForwardIterator\r\n    __remove_if(_ForwardIterator __first, _ForwardIterator __last,\r\n  _Predicate __pred)\r\n    {\r\n      __first = std::__find_if(__first, __last, __pred);\r\n      if (__first == __last)\r\n"]
[81.336895, "o", " return __first;\r\n      _ForwardIterator __result = __first;\r\n      ++__first;\r\n      for (; __first != __last; ++__first)\r\n if (!__pred(__first))\r\n   {\r\n"]
[81.337015, "o", "     *__result = std::move(*__first);\r\n     ++__result;\r\n   }\r\n      return __result;\r\n    }\r\n\r\n  template<typename _ForwardIterator1, typename _ForwardIterator2,\r\n    typename _BinaryPredicate>\r\n   \r\n    _ForwardIterator1\r\n    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\r\n      _ForwardIterator2 __first2, _ForwardIterator2 __last2,\r\n      _BinaryPredicate __predicate)\r\n    {\r\n\r\n      if (__first1 == __last1 || __first2 == __last2)\r\n return __first1;\r\n\r\n\r\n      _ForwardIterator2 __p1(__first2);\r\n      if (++__p1 == __last2)\r\n return std::__find_if(__first1, __last1,\r\n  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));\r\n\r\n\r\n      _ForwardIterator1 __current = __first1;\r\n\r\n      for (;;)\r\n {\r\n   __first1 =\r\n"]
[81.337046, "o", "     std::__find_if(__first1, __last1,\r\n  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));\r\n\r\n   if (__first1 == __last1)\r\n     return __last1;\r\n\r\n   _ForwardIterator2 __p = __p1;\r\n   __current = __first1;\r\n   if (++__current == __last1)\r\n     return __last1;\r\n\r\n"]
[81.33707, "o", "   while (__predicate(__current, __p))\r\n     {\r\n       if (++__p == __last2)\r\n  return __first1;\r\n       if (++__current == __last1)\r\n  return __last1;\r\n     }\r\n"]
[81.337097, "o", "   ++__first1;\r\n }\r\n      return __first1;\r\n    }\r\n\r\n\r\n  template<typename _ForwardIterator1, typename _ForwardIterator2,\r\n    typename _BinaryPredicate>\r\n"]
[81.337235, "o", "   \r\n    bool\r\n    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\r\n       _ForwardIterator2 __first2, _BinaryPredicate __pred)\r\n    {\r\n\r\n\r\n      for (; __first1 != __last1; ++__first1, (void)++__first2)\r\n if (!__pred(__first1, __first2))\r\n   break;\r\n\r\n      if (__first1 == __last1)\r\n return true;\r\n\r\n\r\n\r\n      _ForwardIterator2 __last2 = __first2;\r\n      std::advance(__last2, std::distance(__first1, __last1));\r\n      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)\r\n {\r\n   if (__scan != std::__find_if(__first1, __scan,\r\n     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))\r\n     continue;\r\n\r\n   auto __matches\r\n     = std::__count_if(__first2, __last2,\r\n   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));\r\n   if (0 == __matches ||\r\n       std::__count_if(__scan, __last1,\r\n   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))\r\n       != __matches)\r\n     return false;\r\n }\r\n      return true;\r\n    }\r\n# 2276 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _ForwardIterator1, typename _ForwardIterator2>\r\n   \r\n"]
[81.337268, "o", "    inline bool\r\n    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\r\n     _ForwardIterator2 __first2)\r\n    {\r\n\r\n     \r\n     \r\n"]
[81.337387, "o", "     \r\n\r\n\r\n      ;\r\n\r\n      return std::__is_permutation(__first1, __last1, __first2,\r\n       __gnu_cxx::__ops::__iter_equal_to_iter());\r\n    }\r\n\r\n\r\n\r\n# 2318 \"/usr/include/c++/14.2.1/bits/stl_algobase.h\" 3\r\n  template<typename _ForwardIterator1, typename _ForwardIterator2,\r\n    typename _BinaryPredicate>\r\n   \r\n    inline _ForwardIterator1\r\n    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\r\n    _ForwardIterator2 __first2, _ForwardIterator2 __last2,\r\n    _BinaryPredicate __predicate)\r\n    {\r\n\r\n     \r\n     \r\n     \r\n\r\n\r\n      ;\r\n      ;\r\n\r\n"]
[81.337416, "o", "      return std::__search(__first1, __last1, __first2, __last2,\r\n      __gnu_cxx::__ops::__iter_comp_iter(__predicate));\r\n    }\r\n\r\n\r\n\r\n}\r\n"]
[81.33744, "o", "# 52 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.337521, "o", "# 1 \"/usr/include/c++/14.2.1/bits/refwrap.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/refwrap.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/refwrap.h\" 3\r\n"]
[81.337659, "o", "\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/invoke.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/invoke.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/invoke.h\" 3\r\n# 42 \"/usr/include/c++/14.2.1/bits/invoke.h\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 53 \"/usr/include/c++/14.2.1/bits/invoke.h\" 3\r\n"]
[81.33769, "o", "  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>\r\n    constexpr _Up&&\r\n    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept\r\n    { return static_cast<_Up&&>(__t); }\r\n\r\n  template<typename _Res, typename _Fn, typename... _Args>\r\n    constexpr _Res\r\n"]
[81.337716, "o", "    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)\r\n    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }\r\n\r\n"]
[81.338757, "o", "  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\r\n    constexpr _Res\r\n    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,\r\n    _Args&&... __args)\r\n    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }\r\n\r\n  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\r\n    constexpr _Res\r\n    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,\r\n    _Args&&... __args)\r\n    {\r\n      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);\r\n    }\r\n\r\n  template<typename _Res, typename _MemPtr, typename _Tp>\r\n    constexpr _Res\r\n    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)\r\n    { return __invfwd<_Tp>(__t).*__f; }\r\n\r\n  template<typename _Res, typename _MemPtr, typename _Tp>\r\n    constexpr _Res\r\n    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)\r\n    { return (*std::forward<_Tp>(__t)).*__f; }\r\n\r\n"]
[81.338889, "o", "\r\n  template<typename _Callable, typename... _Args>\r\n    constexpr typename __invoke_result<_Callable, _Args...>::type\r\n    __invoke(_Callable&& __fn, _Args&&... __args)\r\n    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)\r\n    {\r\n      using __result = __invoke_result<_Callable, _Args...>;\r\n      using __type = typename __result::type;\r\n      using __tag = typename __result::__invoke_type;\r\n      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),\r\n     std::forward<_Args>(__args)...);\r\n    }\r\n\r\n\r\n\r\n  template<typename _Res, typename _Callable, typename... _Args>\r\n    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>\r\n    __invoke_r(_Callable&& __fn, _Args&&... __args)\r\n    noexcept(is_nothrow_invocable_r_v<_Res, _Callable, _Args...>)\r\n    {\r\n      using __result = __invoke_result<_Callable, _Args...>;\r\n      using __type = typename __result::type;\r\n      using __tag = typename __result::__invoke_type;\r\n      if constexpr (is_void_v<_Res>)\r\n std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),\r\n     std::forward<_Args>(__args)...);\r\n      else\r\n return std::__invoke_impl<__type>(__tag{},\r\n       std::forward<_Callable>(__fn),\r\n       std::forward<_Args>(__args)...);\r\n    }\r\n# 155 \"/usr/include/c++/14.2.1/bits/invoke.h\" 3\r\n\r\n}\r\n# 39 \"/usr/include/c++/14.2.1/bits/refwrap.h\" 2 3\r\n\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 56 \"/usr/include/c++/14.2.1/bits/refwrap.h\" 3\r\n  template<typename _Res, typename... _ArgTypes>\r\n    struct _Maybe_unary_or_binary_function { };\r\n\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n\r\n\r\n  template<typename _Res, typename _T1>\r\n    struct _Maybe_unary_or_binary_function<_Res, _T1>\r\n    : std::unary_function<_T1, _Res> { };\r\n\r\n\r\n  template<typename _Res, typename _T1, typename _T2>\r\n    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>\r\n    : std::binary_function<_T1, _T2, _Res> { };\r\n\r\n#pragma GCC diagnostic pop\r\n\r\n  template<typename _Signature>\r\n    struct _Mem_fn_traits;\r\n\r\n  template<typename _Res, typename _Class, typename... _ArgTypes>\r\n    struct _Mem_fn_traits_base\r\n    {\r\n      using __result_type = _Res;\r\n      using __maybe_type\r\n = _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>;\r\n      using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;\r\n    };\r\n# 107 \"/usr/include/c++/14.2.1/bits/refwrap.h\" 3\r\ntemplate<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ."]
[81.339514, "o", "..) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };\r\ntemplate<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };\r\ntemplate<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };\r\n\r\n\r\ntemplate<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };\r\ntemplate<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) & noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) & noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const & noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const & noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile & noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile & noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile & noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile & noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };\r\ntemplate<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) && noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) && noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const && noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const && noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile && noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile && noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile && noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile && noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Functor, typename = __void_t<>>\r\n    struct _Maybe_get_result_type\r\n    { };\r\n\r\n  template<typename _Functor>\r\n    struct _Maybe_get_result_type<_Functor,\r\n      __void_t<typename _Functor::result_type>>\r\n    { typedef typename _Functor::result_type result_type; };\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Functor>\r\n    struct _Weak_result_type_impl\r\n    : _Maybe_get_result_type<_Functor>\r\n    { };\r\n\r\n\r\n  template<typename _Res, typename... _ArgTypes , bool _NE>\r\n    struct _Weak_result_type_impl<_Res(_ArgTypes...) noexcept (_NE)>\r\n    { typedef _Res result_type; };\r\n\r\n\r\n  template<typename _Res, typename... _ArgTypes , bool _NE>\r\n    struct _Weak_result_type_impl<_Res(_ArgTypes......) noexcept (_NE)>\r\n    { typedef _Res result_type; };\r\n\r\n\r\n  template<typename _Res, typename... _ArgTypes , bool _NE>\r\n    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...) noexcept (_NE)>\r\n    { typedef _Res result_type; };\r\n\r\n\r\n  template<typename _Res, typename... _ArgTypes , bool _NE>\r\n    struct\r\n    _Weak_result_type_impl<_Res(*)(_ArgTypes......) noexcept (_NE)>\r\n    { typedef _Res result_type; };\r\n\r\n\r\n  template<typename _Functor,\r\n    bool = is_member_function_pointer<_Functor>::value>\r\n    struct _Weak_result_type_memfun\r\n    : _Weak_result_type_impl<_Functor>\r\n    { };\r\n\r\n\r\n  template<typename _MemFunPtr>\r\n    struct _Weak_result_type_memfun<_MemFunPtr, true>\r\n    {\r\n      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;\r\n    };\r\n\r\n\r\n  template<typename _Func, typename _Class>\r\n    struct _Weak_result_type_memfun<_Func _Class::*, false>\r\n    { };\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Functor>\r\n    struct _Weak_result_type\r\n    : _Weak_result_type_memfun<typename remove_cv<_Functor>::type>\r\n    { };\r\n\r\n\r\n\r\n  template<typename _Tp, typename = __void_t<>>\r\n    struct _Refwrap_base_arg1\r\n    { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct _Refwrap_base_arg1<_Tp,\r\n         __void_t<typename _Tp::argument_type>>\r\n    {\r\n      typedef typename _Tp::argument_type argument_type;\r\n    };\r\n\r\n\r\n  template<typename _Tp, typename = __void_t<>>\r\n    struct _Refwrap_base_arg2\r\n    { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct _Refwrap_base_arg2<_Tp,\r\n         __void_t<typename _Tp::first_argument_type,\r\n           typename _Tp::second_argument_type>>\r\n    {\r\n      typedef typename _Tp::first_argument_type first_argument_type;\r\n      typedef typename _Tp::second_argument_type second_argument_type;\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct _Reference_wrapper_base\r\n    : _Weak_result_type<_Tp>, _Refwrap_base_arg1<_Tp>, _Refwrap_base_arg2<_Tp>\r\n    { };\r\n\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n\r\n\r\n  template<typename _Res, typename _T1 , bool _NE>\r\n    struct _Reference_wrapper_base<_Res(_T1) noexcept (_NE)>\r\n    : unary_function<_T1, _Res>\r\n    { };\r\n\r\n  template<typename _Res, typename _T1>\r\n    struct _Reference_wrapper_base<_Res(_T1) const>\r\n    : unary_function<_T1, _Res>\r\n    { };\r\n\r\n  template<typename _Res, typename _T1>\r\n    struct _Reference_wrapper_base<_Res(_T1) volatile>\r\n    : unary_function<_T1, _Res>\r\n    { };\r\n\r\n  template<typename _Res, typename _T1>\r\n    struct _Reference_wrapper_base<_Res(_T1) const volatile>\r\n    : unary_function<_T1, _Res>\r\n    { };\r\n\r\n\r\n  template<typename _Res, typename _T1, typename _T2 , bool _NE>\r\n    struct _Reference_wrapper_base<_Res(_T1, _T2) noexcept (_NE)>\r\n    : binary_function<_T1, _T2, _Res>\r\n    { };\r\n\r\n  template<typename _Res, typename _T1, typename _T2>\r\n    struct _Reference_wrapper_base<_Res(_T1, _T2) const>\r\n    : binary_function<_T1, _T2, _Res>\r\n    { };\r\n\r\n  template<typename _Res, typename _T1, typename _T2>\r\n"]
[81.339775, "o", "    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>\r\n    : binary_function<_T1, _T2, _Res>\r\n    { };\r\n\r\n  template<typename _Res, typename _T1, typename _T2>\r\n    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>\r\n    : binary_function<_T1, _T2, _Res>\r\n    { };\r\n\r\n\r\n  template<typename _Res, typename _T1 , bool _NE>\r\n    struct _Reference_wrapper_base<_Res(*)(_T1) noexcept (_NE)>\r\n    : unary_function<_T1, _Res>\r\n    { };\r\n\r\n\r\n  template<typename _Res, typename _T1, typename _T2 , bool _NE>\r\n    struct _Reference_wrapper_base<_Res(*)(_T1, _T2) noexcept (_NE)>\r\n    : binary_function<_T1, _T2, _Res>\r\n    { };\r\n\r\n  template<typename _Tp, bool = is_member_function_pointer<_Tp>::value>\r\n    struct _Reference_wrapper_base_memfun\r\n    : _Reference_wrapper_base<_Tp>\r\n    { };\r\n\r\n  template<typename _MemFunPtr>\r\n    struct _Reference_wrapper_base_memfun<_MemFunPtr, true>\r\n    : _Mem_fn_traits<_MemFunPtr>::__maybe_type\r\n    {\r\n      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;\r\n    };\r\n#pragma GCC diagnostic pop\r\n# 306 \"/usr/include/c++/14.2.1/bits/refwrap.h\" 3\r\n  template<typename _Tp>\r\n    class reference_wrapper\r\n\r\n\r\n\r\n    : public _Reference_wrapper_base_memfun<typename remove_cv<_Tp>::type>\r\n\r\n    {\r\n      _Tp* _M_data;\r\n\r\n     \r\n      static _Tp* _S_fun(_Tp& __r) noexcept { return std::__addressof(__r); }\r\n\r\n      static void _S_fun(_Tp&&) = delete;\r\n\r\n      template<typename _Up, typename _Up2 = __remove_cvref_t<_Up>>\r\n using __not_same\r\n   = typename enable_if<!is_same<reference_wrapper, _Up2>::value>::type;\r\n\r\n    public:\r\n      typedef _Tp type;\r\n\r\n\r\n\r\n\r\n      template<typename _Up, typename = __not_same<_Up>, typename\r\n  = decltype(reference_wrapper::_S_fun(std::declval<_Up>()))>\r\n\r\n reference_wrapper(_Up&& __uref)\r\n noexcept(noexcept(reference_wrapper::_S_fun(std::declval<_Up>())))\r\n : _M_data(reference_wrapper::_S_fun(std::forward<_Up>(__uref)))\r\n { }\r\n\r\n      reference_wrapper(const reference_wrapper&) = default;\r\n\r\n      reference_wrapper&\r\n      operator=(const reference_wrapper&) = default;\r\n\r\n     \r\n      operator _Tp&() const noexcept\r\n      { return this->get(); }\r\n\r\n     \r\n      _Tp&\r\n      get() const noexcept\r\n      { return *_M_data; }\r\n\r\n      template<typename... _Args>\r\n\r\n typename __invoke_result<_Tp&, _Args...>::type\r\n operator()(_Args&&... __args) const\r\n noexcept(__is_nothrow_invocable<_Tp&, _Args...>::value)\r\n {\r\n\r\n\r\n\r\n\r\n   return std::__invoke(get(), std::forward<_Args>(__args)...);\r\n }\r\n# 412 \"/usr/include/c++/14.2.1/bits/refwrap.h\" 3\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    reference_wrapper(_Tp&) -> reference_wrapper<_Tp>;\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n   \r\n    inline reference_wrapper<_Tp>\r\n    ref(_Tp& __t) noexcept\r\n    { return reference_wrapper<_Tp>(__t); }\r\n\r\n\r\n  template<typename _Tp>\r\n   \r\n    inline reference_wrapper<const _Tp>\r\n    cref(const _Tp& __t) noexcept\r\n    { return reference_wrapper<const _Tp>(__t); }\r\n\r\n  template<typename _Tp>\r\n    void ref(const _Tp&&) = delete;\r\n\r\n  template<typename _Tp>\r\n    void cref(const _Tp&&) = delete;\r\n\r\n\r\n  template<typename _Tp>\r\n   \r\n    inline reference_wrapper<_Tp>\r\n    ref(reference_wrapper<_Tp> __t) noexcept\r\n    { return __t; }\r\n\r\n\r\n  template<typename _Tp>\r\n   \r\n    inline reference_wrapper<const _Tp>\r\n    cref(reference_wrapper<_Tp> __t) noexcept\r\n    { return { __t.get() }; }\r\n\r\n\r\n\r\n\r\n}\r\n# 53 \"/usr/include/c++/14.2.1/string\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/range_access.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/range_access.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/range_access.h\" 3\r\n"]
[81.339881, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/initializer_list\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/initializer_list\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/initializer_list\" 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n  template<class _E>\r\n    class initializer_list\r\n    {\r\n    public:\r\n      typedef _E value_type;\r\n      typedef const _E& reference;\r\n      typedef const _E& const_reference;\r\n      typedef size_t size_type;\r\n      typedef const _E* iterator;\r\n      typedef const _E* const_iterator;\r\n\r\n    private:\r\n      iterator _M_array;\r\n      size_type _M_len;\r\n\r\n\r\n      constexpr initializer_list(const_iterator __a, size_type __l)\r\n      : _M_array(__a), _M_len(__l) { }\r\n\r\n    public:\r\n      constexpr initializer_list() noexcept\r\n      : _M_array(0), _M_len(0) { }\r\n\r\n\r\n      constexpr size_type\r\n      size() const noexcept { return _M_len; }\r\n\r\n\r\n      constexpr const_iterator\r\n      begin() const noexcept { return _M_array; }\r\n\r\n\r\n      constexpr const_iterator\r\n      end() const noexcept { return begin() + size(); }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<class _Tp>\r\n    constexpr const _Tp*\r\n"]
[81.339971, "o", "    begin(initializer_list<_Tp> __ils) noexcept\r\n    { return __ils.begin(); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<class _Tp>\r\n    constexpr const _Tp*\r\n    end(initializer_list<_Tp> __ils) noexcept\r\n    { return __ils.end(); }\r\n}\r\n# 37 \"/usr/include/c++/14.2.1/bits/range_access.h\" 2 3\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr auto\r\n    begin(_Container& __cont) -> decltype(__cont.begin())\r\n"]
[81.34006, "o", "    { return __cont.begin(); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr auto\r\n    begin(const _Container& __cont) -> decltype(__cont.begin())\r\n    { return __cont.begin(); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr auto\r\n    end(_Container& __cont) -> decltype(__cont.end())\r\n    { return __cont.end(); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n"]
[81.340147, "o", "    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr auto\r\n    end(const _Container& __cont) -> decltype(__cont.end())\r\n    { return __cont.end(); }\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, size_t _Nm>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr _Tp*\r\n    begin(_Tp (&__arr)[_Nm]) noexcept\r\n    { return __arr; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, size_t _Nm>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr _Tp*\r\n    end(_Tp (&__arr)[_Nm]) noexcept\r\n    { return __arr + _Nm; }\r\n\r\n\r\n\r\n"]
[81.340229, "o", "  template<typename _Tp> class valarray;\r\n\r\n  template<typename _Tp> _Tp* begin(valarray<_Tp>&) noexcept;\r\n  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&) noexcept;\r\n  template<typename _Tp> _Tp* end(valarray<_Tp>&) noexcept;\r\n  template<typename _Tp> const _Tp* end(const valarray<_Tp>&) noexcept;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    constexpr auto\r\n    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))\r\n      -> decltype(std::begin(__cont))\r\n    { return std::begin(__cont); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n"]
[81.340305, "o", "    constexpr auto\r\n    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))\r\n      -> decltype(std::end(__cont))\r\n    { return std::end(__cont); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr auto\r\n    rbegin(_Container& __cont) -> decltype(__cont.rbegin())\r\n    { return __cont.rbegin(); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr auto\r\n    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())\r\n"]
[81.340387, "o", "    { return __cont.rbegin(); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr auto\r\n    rend(_Container& __cont) -> decltype(__cont.rend())\r\n    { return __cont.rend(); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr auto\r\n    rend(const _Container& __cont) -> decltype(__cont.rend())\r\n    { return __cont.rend(); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.340467, "o", "  template<typename _Tp, size_t _Nm>\r\n    [[__nodiscard__]]\r\n    inline constexpr reverse_iterator<_Tp*>\r\n    rbegin(_Tp (&__arr)[_Nm]) noexcept\r\n    { return reverse_iterator<_Tp*>(__arr + _Nm); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp, size_t _Nm>\r\n    [[__nodiscard__]]\r\n    inline constexpr reverse_iterator<_Tp*>\r\n    rend(_Tp (&__arr)[_Nm]) noexcept\r\n    { return reverse_iterator<_Tp*>(__arr); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    [[__nodiscard__]]\r\n    inline constexpr reverse_iterator<const _Tp*>\r\n    rbegin(initializer_list<_Tp> __il) noexcept\r\n"]
[81.340548, "o", "    { return reverse_iterator<const _Tp*>(__il.end()); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    [[__nodiscard__]]\r\n    inline constexpr reverse_iterator<const _Tp*>\r\n    rend(initializer_list<_Tp> __il) noexcept\r\n    { return reverse_iterator<const _Tp*>(__il.begin()); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr auto\r\n    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))\r\n    { return std::rbegin(__cont); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.340629, "o", "  template<typename _Container>\r\n    [[__nodiscard__, __gnu__::__always_inline__]]\r\n    inline constexpr auto\r\n    crend(const _Container& __cont) -> decltype(std::rend(__cont))\r\n    { return std::rend(__cont); }\r\n# 259 \"/usr/include/c++/14.2.1/bits/range_access.h\" 3\r\n  template <typename _Container>\r\n    [[nodiscard, __gnu__::__always_inline__]]\r\n    constexpr auto\r\n    size(const _Container& __cont) noexcept(noexcept(__cont.size()))\r\n    -> decltype(__cont.size())\r\n    { return __cont.size(); }\r\n\r\n\r\n\r\n\r\n  template <typename _Tp, size_t _Nm>\r\n    [[nodiscard, __gnu__::__always_inline__]]\r\n    constexpr size_t\r\n    size(const _Tp (&)[_Nm]) noexcept\r\n    { return _Nm; }\r\n\r\n\r\n\r\n"]
[81.340711, "o", "\r\n\r\n  template <typename _Container>\r\n    [[nodiscard, __gnu__::__always_inline__]]\r\n    constexpr auto\r\n    empty(const _Container& __cont) noexcept(noexcept(__cont.empty()))\r\n    -> decltype(__cont.empty())\r\n    { return __cont.empty(); }\r\n\r\n\r\n\r\n\r\n  template <typename _Tp, size_t _Nm>\r\n    [[nodiscard, __gnu__::__always_inline__]]\r\n    constexpr bool\r\n    empty(const _Tp (&)[_Nm]) noexcept\r\n    { return false; }\r\n\r\n\r\n\r\n\r\n\r\n  template <typename _Tp>\r\n    [[nodiscard, __gnu__::__always_inline__]]\r\n    constexpr bool\r\n"]
[81.340791, "o", "    empty(initializer_list<_Tp> __il) noexcept\r\n    { return __il.size() == 0;}\r\n\r\n\r\n\r\n\r\n\r\n  template <typename _Container>\r\n    [[nodiscard, __gnu__::__always_inline__]]\r\n    constexpr auto\r\n    data(_Container& __cont) noexcept(noexcept(__cont.data()))\r\n    -> decltype(__cont.data())\r\n    { return __cont.data(); }\r\n\r\n\r\n\r\n\r\n\r\n  template <typename _Container>\r\n    [[nodiscard, __gnu__::__always_inline__]]\r\n    constexpr auto\r\n    data(const _Container& __cont) noexcept(noexcept(__cont.data()))\r\n    -> decltype(__cont.data())\r\n    { return __cont.data(); }\r\n\r\n\r\n\r\n\r\n\r\n  template <typename _Tp, size_t _Nm>\r\n"]
[81.341089, "o", "    [[nodiscard, __gnu__::__always_inline__]]\r\n    constexpr _Tp*\r\n    data(_Tp (&__array)[_Nm]) noexcept\r\n    { return __array; }\r\n\r\n\r\n\r\n\r\n\r\n  template <typename _Tp>\r\n    [[nodiscard, __gnu__::__always_inline__]]\r\n    constexpr const _Tp*\r\n    data(initializer_list<_Tp> __il) noexcept\r\n    { return __il.begin(); }\r\n# 366 \"/usr/include/c++/14.2.1/bits/range_access.h\" 3\r\n\r\n}\r\n# 54 \"/usr/include/c++/14.2.1/string\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n\r\n# 1 \"/usr/include/c++/14.2.1/ext/alloc_traits.h\" 1 3\r\n# 32 \"/usr/include/c++/14.2.1/ext/alloc_traits.h\" 3\r\n       \r\n# 33 \"/usr/include/c++/14.2.1/ext/alloc_traits.h\" 3\r\n"]
[81.341138, "o", "\r\n# 1 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 1 3\r\n"]
[81.341174, "o", "# 33 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/stl_construct.h\" 1 3\r\n# 73 \"/usr/include/c++/14.2.1/bits/stl_construct.h\" 3\r\n"]
[81.34121, "o", "namespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n  template <typename _Tp>\r\n    inline void\r\n"]
[81.341255, "o", "    destroy_at(_Tp* __location)\r\n    {\r\n      if constexpr (201703L > 201703L && is_array_v<_Tp>)\r\n {\r\n   for (auto& __x : *__location)\r\n     std::destroy_at(std::__addressof(__x));\r\n }\r\n"]
[81.341293, "o", "      else\r\n __location->~_Tp();\r\n    }\r\n# 106 \"/usr/include/c++/14.2.1/bits/stl_construct.h\" 3\r\n  template<typename _Tp, typename... _Args>\r\n   \r\n    inline void\r\n"]
[81.341331, "o", "    _Construct(_Tp* __p, _Args&&... __args)\r\n    {\r\n# 119 \"/usr/include/c++/14.2.1/bits/stl_construct.h\" 3\r\n      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);\r\n    }\r\n# 132 \"/usr/include/c++/14.2.1/bits/stl_construct.h\" 3\r\n"]
[81.341367, "o", "  template<typename _T1>\r\n    inline void\r\n    _Construct_novalue(_T1* __p)\r\n    { ::new((void*)__p) _T1; }\r\n\r\n  template<typename _ForwardIterator>\r\n    void\r\n    _Destroy(_ForwardIterator __first, _ForwardIterator __last);\r\n\r\n\r\n\r\n"]
[81.3414, "o", "\r\n  template<typename _Tp>\r\n    constexpr inline void\r\n    _Destroy(_Tp* __pointer)\r\n    {\r\n\r\n\r\n\r\n      __pointer->~_Tp();\r\n\r\n"]
[81.341435, "o", "    }\r\n\r\n  template<bool>\r\n    struct _Destroy_aux\r\n    {\r\n      template<typename _ForwardIterator>\r\n static void\r\n __destroy(_ForwardIterator __first, _ForwardIterator __last)\r\n {\r\n"]
[81.341473, "o", "   for (; __first != __last; ++__first)\r\n     std::_Destroy(std::__addressof(*__first));\r\n }\r\n    };\r\n\r\n  template<>\r\n    struct _Destroy_aux<true>\r\n    {\r\n      template<typename _ForwardIterator>\r\n"]
[81.341516, "o", "        static void\r\n        __destroy(_ForwardIterator, _ForwardIterator) { }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _ForwardIterator>\r\n    inline void\r\n    _Destroy(_ForwardIterator __first, _ForwardIterator __last)\r\n    {\r\n"]
[81.34156, "o", "      typedef typename iterator_traits<_ForwardIterator>::value_type\r\n                       _Value_type;\r\n\r\n\r\n      static_assert(is_destructible<_Value_type>::value,\r\n      \"value type is destructible\");\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.3416, "o", "      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::\r\n __destroy(__first, __last);\r\n    }\r\n\r\n  template<bool>\r\n    struct _Destroy_n_aux\r\n    {\r\n      template<typename _ForwardIterator, typename _Size>\r\n static _ForwardIterator\r\n __destroy_n(_ForwardIterator __first, _Size __count)\r\n {\r\n   for (; __count > 0; (void)++__first, --__count)\r\n"]
[81.341636, "o", "     std::_Destroy(std::__addressof(*__first));\r\n   return __first;\r\n }\r\n    };\r\n\r\n  template<>\r\n    struct _Destroy_n_aux<true>\r\n    {\r\n      template<typename _ForwardIterator, typename _Size>\r\n        static _ForwardIterator\r\n        __destroy_n(_ForwardIterator __first, _Size __count)\r\n {\r\n"]
[81.341671, "o", "   std::advance(__first, __count);\r\n   return __first;\r\n }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _ForwardIterator, typename _Size>\r\n    inline _ForwardIterator\r\n"]
[81.341704, "o", "    _Destroy_n(_ForwardIterator __first, _Size __count)\r\n    {\r\n      typedef typename iterator_traits<_ForwardIterator>::value_type\r\n                       _Value_type;\r\n\r\n\r\n      static_assert(is_destructible<_Value_type>::value,\r\n"]
[81.341739, "o", "      \"value type is destructible\");\r\n\r\n\r\n\r\n\r\n\r\n      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::\r\n __destroy_n(__first, __count);\r\n    }\r\n\r\n"]
[81.341776, "o", "\r\n  template <typename _ForwardIterator>\r\n    inline void\r\n    destroy(_ForwardIterator __first, _ForwardIterator __last)\r\n    {\r\n      std::_Destroy(__first, __last);\r\n    }\r\n\r\n  template <typename _ForwardIterator, typename _Size>\r\n"]
[81.34182, "o", "    inline _ForwardIterator\r\n    destroy_n(_ForwardIterator __first, _Size __count)\r\n    {\r\n      return std::_Destroy_n(__first, __count);\r\n    }\r\n\r\n\r\n\r\n}\r\n# 34 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 2 3\r\n"]
[81.341863, "o", "# 46 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n  struct __allocator_traits_base\r\n  {\r\n"]
[81.342264, "o", "    template<typename _Tp, typename _Up, typename = void>\r\n      struct __rebind : __replace_first_arg<_Tp, _Up>\r\n      {\r\n static_assert(is_same<\r\n   typename __replace_first_arg<_Tp, typename _Tp::value_type>::type,\r\n   _Tp>::value,\r\n   \"allocator_traits<A>::rebind_alloc<A::value_type> must be A\");\r\n      };\r\n\r\n    template<typename _Tp, typename _Up>\r\n      struct __rebind<_Tp, _Up,\r\n"]
[81.34234, "o", "        __void_t<typename _Tp::template rebind<_Up>::other>>\r\n      {\r\n using type = typename _Tp::template rebind<_Up>::other;\r\n\r\n static_assert(is_same<\r\n   typename _Tp::template rebind<typename _Tp::value_type>::other,\r\n   _Tp>::value,\r\n   \"allocator_traits<A>::rebind_alloc<A::value_type> must be A\");\r\n      };\r\n\r\n  protected:\r\n    template<typename _Tp>\r\n      using __pointer = typename _Tp::pointer;\r\n    template<typename _Tp>\r\n      using __c_pointer = typename _Tp::const_pointer;\r\n    template<typename _Tp>\r\n      using __v_pointer = typename _Tp::void_pointer;\r\n    template<typename _Tp>\r\n      using __cv_pointer = typename _Tp::const_void_pointer;\r\n    template<typename _Tp>\r\n      using __pocca = typename _Tp::propagate_on_container_copy_assignment;\r\n    template<typename _Tp>\r\n      using __pocma = typename _Tp::propagate_on_container_move_assignment;\r\n    template<typename _Tp>\r\n      using __pocs = typename _Tp::propagate_on_container_swap;\r\n    template<typename _Tp>\r\n      using __equal = __type_identity<typename _Tp::is_always_equal>;\r\n  };\r\n\r\n  template<typename _Alloc, typename _Up>\r\n    using __alloc_rebind\r\n      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;\r\n# 105 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n  template<typename _Alloc>\r\n    struct allocator_traits : __allocator_traits_base\r\n    {\r\n\r\n      typedef _Alloc allocator_type;\r\n\r\n      typedef typename _Alloc::value_type value_type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;\r\n\r\n    private:\r\n\r\n      template<template<typename> class _Func, typename _Tp, typename = void>\r\n struct _Ptr\r\n {\r\n   using type = typename pointer_traits<pointer>::template rebind<_Tp>;\r\n };\r\n\r\n      template<template<typename> class _Func, typename _Tp>\r\n struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>\r\n {\r\n   using type = _Func<_Alloc>;\r\n };\r\n\r\n\r\n      template<typename _A2, typename _PtrT, typename = void>\r\n struct _Diff\r\n { using type = typename pointer_traits<_PtrT>::difference_type; };\r\n\r\n      template<typename _A2, typename _PtrT>\r\n struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>\r\n { using type = typename _A2::difference_type; };\r\n\r\n\r\n      template<typename _A2, typename _DiffT, typename = void>\r\n struct _Size : make_unsigned<_DiffT> { };\r\n\r\n      template<typename _A2, typename _DiffT>\r\n struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>\r\n { using type = typename _A2::size_type; };\r\n\r\n    public:\r\n\r\n\r\n\r\n\r\n\r\n\r\n      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      using void_pointer = typename _Ptr<__v_pointer, void>::type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      using difference_type = typename _Diff<_Alloc, pointer>::type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      using size_type = typename _Size<_Alloc, difference_type>::type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      using propagate_on_container_copy_assignment\r\n = __detected_or_t<false_type, __pocca, _Alloc>;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      using propagate_on_container_move_assignment\r\n = __detected_or_t<false_type, __pocma, _Alloc>;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      using propagate_on_container_swap\r\n = __detected_or_t<false_type, __pocs, _Alloc>;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      using is_always_equal\r\n = typename __detected_or_t<is_empty<_Alloc>, __equal, _Alloc>::type;\r\n\r\n"]
[81.342408, "o", "      template<typename _Tp>\r\n using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;\r\n      template<typename _Tp>\r\n using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;\r\n\r\n    private:\r\n      template<typename _Alloc2>\r\n static constexpr auto\r\n _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)\r\n -> decltype(__a.allocate(__n, __hint))\r\n { return __a.allocate(__n, __hint); }\r\n\r\n      template<typename _Alloc2>\r\n static constexpr pointer\r\n _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)\r\n { return __a.allocate(__n); }\r\n\r\n      template<typename _Tp, typename... _Args>\r\n"]
[81.342469, "o", " struct __construct_helper\r\n {\r\n   template<typename _Alloc2,\r\n     typename = decltype(std::declval<_Alloc2*>()->construct(\r\n    std::declval<_Tp*>(), std::declval<_Args>()...))>\r\n     static true_type __test(int);\r\n\r\n   template<typename>\r\n     static false_type __test(...);\r\n\r\n   using type = decltype(__test<_Alloc>(0));\r\n };\r\n\r\n      template<typename _Tp, typename... _Args>\r\n using __has_construct\r\n   = typename __construct_helper<_Tp, _Args...>::type;\r\n\r\n      template<typename _Tp, typename... _Args>\r\n"]
[81.342527, "o", " static constexpr _Require<__has_construct<_Tp, _Args...>>\r\n _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)\r\n noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))\r\n { __a.construct(__p, std::forward<_Args>(__args)...); }\r\n\r\n      template<typename _Tp, typename... _Args>\r\n static constexpr\r\n _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,\r\n          is_constructible<_Tp, _Args...>>>\r\n _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)\r\n"]
[81.342602, "o", " noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)\r\n {\r\n\r\n   ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);\r\n\r\n\r\n\r\n }\r\n\r\n      template<typename _Alloc2, typename _Tp>\r\n static constexpr auto\r\n _S_destroy(_Alloc2& __a, _Tp* __p, int)\r\n noexcept(noexcept(__a.destroy(__p)))\r\n -> decltype(__a.destroy(__p))\r\n { __a.destroy(__p); }\r\n\r\n      template<typename _Alloc2, typename _Tp>\r\n static constexpr void\r\n _S_destroy(_Alloc2&, _Tp* __p, ...)\r\n noexcept(std::is_nothrow_destructible<_Tp>::value)\r\n"]
[81.342672, "o", " { std::_Destroy(__p); }\r\n\r\n      template<typename _Alloc2>\r\n static constexpr auto\r\n _S_max_size(_Alloc2& __a, int)\r\n -> decltype(__a.max_size())\r\n { return __a.max_size(); }\r\n\r\n      template<typename _Alloc2>\r\n static constexpr size_type\r\n _S_max_size(_Alloc2&, ...)\r\n {\r\n\r\n\r\n   return __gnu_cxx::__numeric_traits<size_type>::__max\r\n     / sizeof(value_type);\r\n }\r\n\r\n      template<typename _Alloc2>\r\n static constexpr auto\r\n _S_select(_Alloc2& __a, int)\r\n -> decltype(__a.select_on_container_copy_construction())\r\n"]
[81.342736, "o", " { return __a.select_on_container_copy_construction(); }\r\n\r\n      template<typename _Alloc2>\r\n static constexpr _Alloc2\r\n _S_select(_Alloc2& __a, ...)\r\n { return __a; }\r\n\r\n    public:\r\n# 332 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      [[__nodiscard__]] static pointer\r\n      allocate(_Alloc& __a, size_type __n)\r\n      { return __a.allocate(__n); }\r\n# 347 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      [[__nodiscard__]] static pointer\r\n      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)\r\n"]
[81.342797, "o", "      { return _S_allocate(__a, __n, __hint, 0); }\r\n# 359 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      static void\r\n      deallocate(_Alloc& __a, pointer __p, size_type __n)\r\n      { __a.deallocate(__p, __n); }\r\n# 374 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      template<typename _Tp, typename... _Args>\r\n static auto\r\n construct(_Alloc& __a, _Tp* __p, _Args&&... __args)\r\n noexcept(noexcept(_S_construct(__a, __p,\r\n           std::forward<_Args>(__args)...)))\r\n -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))\r\n"]
[81.342872, "o", " { _S_construct(__a, __p, std::forward<_Args>(__args)...); }\r\n# 390 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      template<typename _Tp>\r\n static void\r\n destroy(_Alloc& __a, _Tp* __p)\r\n noexcept(noexcept(_S_destroy(__a, __p, 0)))\r\n { _S_destroy(__a, __p, 0); }\r\n# 404 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      static size_type\r\n      max_size(const _Alloc& __a) noexcept\r\n      { return _S_max_size(__a, 0); }\r\n# 416 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      static _Alloc\r\n      select_on_container_copy_construction(const _Alloc& __rhs)\r\n"]
[81.342942, "o", "      { return _S_select(__rhs, 0); }\r\n    };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct allocator_traits<allocator<_Tp>>\r\n    {\r\n\r\n      using allocator_type = allocator<_Tp>;\r\n\r\n\r\n      using value_type = _Tp;\r\n\r\n\r\n      using pointer = _Tp*;\r\n\r\n\r\n      using const_pointer = const _Tp*;\r\n\r\n\r\n      using void_pointer = void*;\r\n\r\n\r\n      using const_void_pointer = const void*;\r\n\r\n"]
[81.343006, "o", "\r\n      using difference_type = std::ptrdiff_t;\r\n\r\n\r\n      using size_type = std::size_t;\r\n\r\n\r\n      using propagate_on_container_copy_assignment = false_type;\r\n\r\n\r\n      using propagate_on_container_move_assignment = true_type;\r\n\r\n\r\n      using propagate_on_container_swap = false_type;\r\n\r\n\r\n      using is_always_equal = true_type;\r\n\r\n      template<typename _Up>\r\n using rebind_alloc = allocator<_Up>;\r\n\r\n      template<typename _Up>\r\n"]
[81.343067, "o", " using rebind_traits = allocator_traits<allocator<_Up>>;\r\n# 475 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      [[__nodiscard__,__gnu__::__always_inline__]]\r\n      static pointer\r\n      allocate(allocator_type& __a, size_type __n)\r\n      { return __a.allocate(__n); }\r\n# 490 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      [[__nodiscard__,__gnu__::__always_inline__]]\r\n      static pointer\r\n      allocate(allocator_type& __a, size_type __n,\r\n        [[maybe_unused]] const_void_pointer __hint)\r\n      {\r\n\r\n return __a.allocate(__n, __hint);\r\n\r\n\r\n\r\n      }\r\n"]
[81.343129, "o", "# 510 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      [[__gnu__::__always_inline__]]\r\n      static void\r\n      deallocate(allocator_type& __a, pointer __p, size_type __n)\r\n      { __a.deallocate(__p, __n); }\r\n# 526 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      template<typename _Up, typename... _Args>\r\n [[__gnu__::__always_inline__]]\r\n static void\r\n construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,\r\n    _Args&&... __args)\r\n noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)\r\n"]
[81.343187, "o", " {\r\n\r\n   __a.construct(__p, std::forward<_Args>(__args)...);\r\n\r\n\r\n\r\n }\r\n# 547 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      template<typename _Up>\r\n [[__gnu__::__always_inline__]]\r\n static void\r\n destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)\r\n noexcept(is_nothrow_destructible<_Up>::value)\r\n {\r\n\r\n   __a.destroy(__p);\r\n"]
[81.343262, "o", "\r\n\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__gnu__::__always_inline__]]\r\n      static size_type\r\n      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept\r\n      {\r\n\r\n return __a.max_size();\r\n\r\n\r\n\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__gnu__::__always_inline__]]\r\n      static allocator_type\r\n      select_on_container_copy_construction(const allocator_type& __rhs)\r\n      { return __rhs; }\r\n    };\r\n\r\n"]
[81.343336, "o", "\r\n  template<>\r\n    struct allocator_traits<allocator<void>>\r\n    {\r\n\r\n      using allocator_type = allocator<void>;\r\n\r\n\r\n      using value_type = void;\r\n\r\n\r\n      using pointer = void*;\r\n\r\n\r\n      using const_pointer = const void*;\r\n\r\n\r\n      using void_pointer = void*;\r\n\r\n\r\n      using const_void_pointer = const void*;\r\n\r\n\r\n      using difference_type = std::ptrdiff_t;\r\n\r\n\r\n      using size_type = std::size_t;\r\n\r\n\r\n"]
[81.343409, "o", "      using propagate_on_container_copy_assignment = false_type;\r\n\r\n\r\n      using propagate_on_container_move_assignment = true_type;\r\n\r\n\r\n      using propagate_on_container_swap = false_type;\r\n\r\n\r\n      using is_always_equal = true_type;\r\n\r\n      template<typename _Up>\r\n using rebind_alloc = allocator<_Up>;\r\n\r\n      template<typename _Up>\r\n using rebind_traits = allocator_traits<allocator<_Up>>;\r\n\r\n\r\n      static void*\r\n      allocate(allocator_type&, size_type, const void* = nullptr) = delete;\r\n\r\n\r\n"]
[81.343482, "o", "      static void\r\n      deallocate(allocator_type&, void*, size_type) = delete;\r\n# 652 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      template<typename _Up, typename... _Args>\r\n [[__gnu__::__always_inline__]]\r\n static void\r\n construct(allocator_type&, _Up* __p, _Args&&... __args)\r\n noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)\r\n { std::_Construct(__p, std::forward<_Args>(__args)...); }\r\n# 666 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n      template<typename _Up>\r\n [[__gnu__::__always_inline__]]\r\n static void\r\n destroy(allocator_type&, _Up* __p)\r\n noexcept(is_nothrow_destructible<_Up>::value)\r\n { std::_Destroy(__p); }\r\n\r\n\r\n      static size_type\r\n      max_size(const allocator_type&) = delete;\r\n\r\n\r\n\r\n\r\n"]
[81.343548, "o", "\r\n\r\n      [[__gnu__::__always_inline__]]\r\n      static allocator_type\r\n      select_on_container_copy_construction(const allocator_type& __rhs)\r\n      { return __rhs; }\r\n    };\r\n# 704 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n  template<typename _Alloc>\r\n    [[__gnu__::__always_inline__]]\r\n    constexpr inline void\r\n    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)\r\n    {\r\n"]
[81.34362, "o", "      using __traits = allocator_traits<_Alloc>;\r\n      using __pocca =\r\n typename __traits::propagate_on_container_copy_assignment::type;\r\n\r\n      if constexpr (__pocca::value)\r\n __one = __two;\r\n\r\n\r\n\r\n    }\r\n\r\n  template<typename _Alloc>\r\n    [[__gnu__::__always_inline__]]\r\n    constexpr _Alloc\r\n    __alloc_on_copy(const _Alloc& __a)\r\n    {\r\n      typedef allocator_traits<_Alloc> __traits;\r\n      return __traits::select_on_container_copy_construction(__a);\r\n    }\r\n# 741 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n"]
[81.3437, "o", "  template<typename _Alloc>\r\n    [[__gnu__::__always_inline__]]\r\n    constexpr inline void\r\n    __alloc_on_move(_Alloc& __one, _Alloc& __two)\r\n    {\r\n      using __traits = allocator_traits<_Alloc>;\r\n      using __pocma\r\n = typename __traits::propagate_on_container_move_assignment::type;\r\n\r\n      if constexpr (__pocma::value)\r\n __one = std::move(__two);\r\n\r\n\r\n\r\n    }\r\n# 772 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n"]
[81.343758, "o", "  template<typename _Alloc>\r\n    [[__gnu__::__always_inline__]]\r\n    constexpr inline void\r\n    __alloc_on_swap(_Alloc& __one, _Alloc& __two)\r\n    {\r\n      using __traits = allocator_traits<_Alloc>;\r\n      using __pocs = typename __traits::propagate_on_container_swap::type;\r\n\r\n      if constexpr (__pocs::value)\r\n {\r\n   using std::swap;\r\n   swap(__one, __two);\r\n }\r\n\r\n\r\n\r\n    }\r\n\r\n"]
[81.343822, "o", "  template<typename _Alloc, typename _Tp,\r\n    typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,\r\n    typename = void>\r\n    struct __is_alloc_insertable_impl\r\n    : false_type\r\n    { };\r\n\r\n  template<typename _Alloc, typename _Tp, typename _ValueT>\r\n    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,\r\n      __void_t<decltype(allocator_traits<_Alloc>::construct(\r\n     std::declval<_Alloc&>(), std::declval<_ValueT*>(),\r\n     std::declval<_Tp>()))>>\r\n    : true_type\r\n    { };\r\n\r\n\r\n\r\n\r\n"]
[81.343889, "o", "  template<typename _Alloc>\r\n    struct __is_copy_insertable\r\n    : __is_alloc_insertable_impl<_Alloc,\r\n     typename _Alloc::value_type const&>::type\r\n    { };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_copy_insertable<allocator<_Tp>>\r\n    : is_copy_constructible<_Tp>\r\n    { };\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _Alloc>\r\n    struct __is_move_insertable\r\n    : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type\r\n"]
[81.343953, "o", "    { };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct __is_move_insertable<allocator<_Tp>>\r\n    : is_move_constructible<_Tp>\r\n    { };\r\n\r\n\r\n\r\n  template<typename _Alloc, typename = void>\r\n    struct __is_allocator : false_type { };\r\n\r\n  template<typename _Alloc>\r\n    struct __is_allocator<_Alloc,\r\n      __void_t<typename _Alloc::value_type,\r\n"]
[81.344016, "o", "        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>\r\n    : true_type { };\r\n\r\n  template<typename _Alloc>\r\n    using _RequireAllocator\r\n      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;\r\n\r\n  template<typename _Alloc>\r\n    using _RequireNotAllocator\r\n      = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;\r\n# 869 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n  template<typename _Alloc, bool = __is_empty(_Alloc)>\r\n    struct __alloc_swap\r\n"]
[81.34409, "o", "    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };\r\n\r\n  template<typename _Alloc>\r\n    struct __alloc_swap<_Alloc, false>\r\n    {\r\n      static void\r\n      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept\r\n      {\r\n\r\n if (__one != __two)\r\n   swap(__one, __two);\r\n      }\r\n    };\r\n\r\n\r\n  template<typename _Tp, bool\r\n    = __or_<is_copy_constructible<typename _Tp::value_type>,\r\n            is_nothrow_move_constructible<typename _Tp::value_type>>::value>\r\n    struct __shrink_to_fit_aux\r\n"]
[81.344163, "o", "    { static bool _S_do_it(_Tp&) noexcept { return false; } };\r\n\r\n  template<typename _Tp>\r\n    struct __shrink_to_fit_aux<_Tp, true>\r\n    {\r\n     \r\n      static bool\r\n      _S_do_it(_Tp& __c) noexcept\r\n      {\r\n\r\n try\r\n   {\r\n     _Tp(__make_move_if_noexcept_iterator(__c.begin()),\r\n  __make_move_if_noexcept_iterator(__c.end()),\r\n  __c.get_allocator()).swap(__c);\r\n     return true;\r\n   }\r\n catch(...)\r\n   { return false; }\r\n"]
[81.344254, "o", "\r\n\r\n\r\n      }\r\n    };\r\n# 922 \"/usr/include/c++/14.2.1/bits/alloc_traits.h\" 3\r\n  template<typename _ForwardIterator, typename _Allocator>\r\n   \r\n    void\r\n    _Destroy(_ForwardIterator __first, _ForwardIterator __last,\r\n      _Allocator& __alloc)\r\n    {\r\n      for (; __first != __last; ++__first)\r\n\r\n\r\n\r\n allocator_traits<_Allocator>::destroy(__alloc,\r\n"]
[81.344295, "o", "           std::__addressof(*__first));\r\n\r\n    }\r\n\r\n\r\n  template<typename _ForwardIterator, typename _Tp>\r\n    __attribute__((__always_inline__))\r\n    inline void\r\n    _Destroy(_ForwardIterator __first, _ForwardIterator __last,\r\n      allocator<_Tp>&)\r\n    {\r\n      std::_Destroy(__first, __last);\r\n    }\r\n\r\n\r\n"]
[81.344331, "o", "\r\n\r\n}\r\n# 35 \"/usr/include/c++/14.2.1/ext/alloc_traits.h\" 2 3\r\n\r\nnamespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n"]
[81.344366, "o", "\r\n\r\n\r\n\r\ntemplate<typename _Alloc, typename = typename _Alloc::value_type>\r\n  struct __alloc_traits\r\n\r\n  : std::allocator_traits<_Alloc>\r\n\r\n  {\r\n"]
[81.344411, "o", "    typedef _Alloc allocator_type;\r\n\r\n    typedef std::allocator_traits<_Alloc> _Base_type;\r\n    typedef typename _Base_type::value_type value_type;\r\n    typedef typename _Base_type::pointer pointer;\r\n    typedef typename _Base_type::const_pointer const_pointer;\r\n    typedef typename _Base_type::size_type size_type;\r\n"]
[81.344448, "o", "    typedef typename _Base_type::difference_type difference_type;\r\n\r\n    typedef value_type& reference;\r\n    typedef const value_type& const_reference;\r\n    using _Base_type::allocate;\r\n    using _Base_type::deallocate;\r\n    using _Base_type::construct;\r\n    using _Base_type::destroy;\r\n    using _Base_type::max_size;\r\n\r\n  private:\r\n    template<typename _Ptr>\r\n      using __is_custom_pointer\r\n"]
[81.344478, "o", " = std::__and_<std::is_same<pointer, _Ptr>,\r\n        std::__not_<std::is_pointer<_Ptr>>>;\r\n\r\n  public:\r\n\r\n    template<typename _Ptr, typename... _Args>\r\n      [[__gnu__::__always_inline__]]\r\n"]
[81.344516, "o", "      static constexpr\r\n      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>\r\n      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)\r\n      noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),\r\n           std::forward<_Args>(__args)...)))\r\n      {\r\n"]
[81.344545, "o", " _Base_type::construct(__a, std::__to_address(__p),\r\n         std::forward<_Args>(__args)...);\r\n      }\r\n\r\n\r\n    template<typename _Ptr>\r\n      [[__gnu__::__always_inline__]]\r\n      static constexpr\r\n      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>\r\n"]
[81.344581, "o", "      destroy(_Alloc& __a, _Ptr __p)\r\n      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))\r\n      { _Base_type::destroy(__a, std::__to_address(__p)); }\r\n\r\n    [[__gnu__::__always_inline__]]\r\n    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)\r\n"]
[81.344615, "o", "    { return _Base_type::select_on_container_copy_construction(__a); }\r\n\r\n    [[__gnu__::__always_inline__]]\r\n    static constexpr void _S_on_swap(_Alloc& __a, _Alloc& __b)\r\n    { std::__alloc_on_swap(__a, __b); }\r\n\r\n    [[__gnu__::__always_inline__]]\r\n"]
[81.344652, "o", "    static constexpr bool _S_propagate_on_copy_assign()\r\n    { return _Base_type::propagate_on_container_copy_assignment::value; }\r\n\r\n    [[__gnu__::__always_inline__]]\r\n    static constexpr bool _S_propagate_on_move_assign()\r\n    { return _Base_type::propagate_on_container_move_assignment::value; }\r\n\r\n"]
[81.344698, "o", "    [[__gnu__::__always_inline__]]\r\n    static constexpr bool _S_propagate_on_swap()\r\n    { return _Base_type::propagate_on_container_swap::value; }\r\n\r\n    [[__gnu__::__always_inline__]]\r\n    static constexpr bool _S_always_equal()\r\n    { return _Base_type::is_always_equal::value; }\r\n\r\n    __attribute__((__always_inline__))\r\n    static constexpr bool _S_nothrow_move()\r\n"]
[81.344734, "o", "    { return _S_propagate_on_move_assign() || _S_always_equal(); }\r\n\r\n    template<typename _Tp>\r\n      struct rebind\r\n"]
[81.344767, "o", "      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };\r\n# 180 \"/usr/include/c++/14.2.1/ext/alloc_traits.h\" 3\r\n  };\r\n\r\n\r\n}\r\n# 40 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 2 3\r\n"]
[81.344859, "o", "\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/string_view\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/string_view\" 3\r\n       \r\n# 37 \"/usr/include/c++/14.2.1/string_view\" 3\r\n"]
[81.345285, "o", "\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.346224, "o", "# 45 \"/usr/include/c++/14.2.1/string_view\" 2 3\r\n"]
[81.346305, "o", "\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/functional_hash.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/functional_hash.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/functional_hash.h\" 3\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n"]
[81.346344, "o", "\r\n# 50 \"/usr/include/c++/14.2.1/bits/functional_hash.h\" 3\r\n  template<typename _Result, typename _Arg>\r\n    struct __hash_base\r\n    {\r\n      typedef _Result result_type [[__deprecated__]];\r\n      typedef _Arg argument_type [[__deprecated__]];\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct hash;\r\n\r\n"]
[81.346379, "o", "  template<typename _Tp, typename = void>\r\n    struct __poison_hash\r\n    {\r\n      static constexpr bool __enable_hash_call = false;\r\n    private:\r\n\r\n      __poison_hash(__poison_hash&&);\r\n      ~__poison_hash();\r\n    };\r\n"]
[81.346414, "o", "\r\n  template<typename _Tp>\r\n    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>\r\n    {\r\n      static constexpr bool __enable_hash_call = true;\r\n    };\r\n\r\n\r\n"]
[81.346455, "o", "  template<typename _Tp, bool = is_enum<_Tp>::value>\r\n    struct __hash_enum\r\n    {\r\n    private:\r\n\r\n      __hash_enum(__hash_enum&&);\r\n      ~__hash_enum();\r\n    };\r\n\r\n\r\n  template<typename _Tp>\r\n"]
[81.346492, "o", "    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>\r\n    {\r\n      size_t\r\n      operator()(_Tp __val) const noexcept\r\n      {\r\n       using __type = typename underlying_type<_Tp>::type;\r\n       return hash<__type>{}(static_cast<__type>(__val));\r\n      }\r\n"]
[81.346529, "o", "    };\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    struct hash : __hash_enum<_Tp>\r\n    { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>\r\n    {\r\n"]
[81.346563, "o", "      size_t\r\n      operator()(_Tp* __p) const noexcept\r\n      { return reinterpret_cast<size_t>(__p); }\r\n    };\r\n# 125 \"/usr/include/c++/14.2.1/bits/functional_hash.h\" 3\r\n"]
[81.346593, "o", "  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n"]
[81.346626, "o", "  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n"]
[81.346658, "o", "  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n"]
[81.346692, "o", "  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n"]
[81.346734, "o", "  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n"]
[81.34677, "o", "  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n"]
[81.346803, "o", "  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n"]
[81.346833, "o", "  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n"]
[81.346864, "o", "  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };\r\n\r\n\r\n  __extension__\r\n  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };\r\n  __extension__\r\n"]
[81.347412, "o", "  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };\r\n# 201 \"/usr/include/c++/14.2.1/bits/functional_hash.h\" 3\r\n  struct _Hash_impl\r\n  {\r\n    static size_t\r\n    hash(const void* __ptr, size_t __clength,\r\n  size_t __seed = static_cast<size_t>(0xc70f6907UL))\r\n    { return _Hash_bytes(__ptr, __clength, __seed); }\r\n\r\n    template<typename _Tp>\r\n      static size_t\r\n      hash(const _Tp& __val)\r\n      { return hash(&__val, sizeof(__val)); }\r\n\r\n    template<typename _Tp>\r\n      static size_t\r\n      __hash_combine(const _Tp& __val, size_t __hash)\r\n      { return hash(&__val, sizeof(__val), __hash); }\r\n  };\r\n\r\n\r\n  struct _Fnv_hash_impl\r\n  {\r\n    static size_t\r\n    hash(const void* __ptr, size_t __clength,\r\n  size_t __seed = static_cast<size_t>(2166136261UL))\r\n    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }\r\n\r\n    template<typename _Tp>\r\n      static size_t\r\n      hash(const _Tp& __val)\r\n      { return hash(&__val, sizeof(__val)); }\r\n\r\n    template<typename _Tp>\r\n      static size_t\r\n      __hash_combine(const _Tp& __val, size_t __hash)\r\n      { return hash(&__val, sizeof(__val), __hash); }\r\n  };\r\n\r\n\r\n  template<>\r\n    struct hash<float> : public __hash_base<size_t, float>\r\n    {\r\n      size_t\r\n      operator()(float __val) const noexcept\r\n      {\r\n\r\n return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;\r\n      }\r\n    };\r\n\r\n\r\n  template<>\r\n    struct hash<double> : public __hash_base<size_t, double>\r\n    {\r\n      size_t\r\n      operator()(double __val) const noexcept\r\n      {\r\n\r\n return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;\r\n      }\r\n    };\r\n\r\n\r\n  template<>\r\n    struct hash<long double>\r\n    : public __hash_base<size_t, long double>\r\n    {\r\n      __attribute__ ((__pure__)) size_t\r\n      operator()(long double __val) const noexcept;\r\n    };\r\n\r\n\r\n  template<>\r\n    struct hash<nullptr_t> : public __hash_base<size_t, nullptr_t>\r\n    {\r\n      size_t\r\n      operator()(nullptr_t) const noexcept\r\n      { return 0; }\r\n    };\r\n# 294 \"/usr/include/c++/14.2.1/bits/functional_hash.h\" 3\r\n  template<typename _Hash>\r\n    struct __is_fast_hash : public std::true_type\r\n    { };\r\n\r\n  template<>\r\n    struct __is_fast_hash<hash<long double>> : public std::false_type\r\n    { };\r\n\r\n\r\n}\r\n# 51 \"/usr/include/c++/14.2.1/string_view\" 2 3\r\n# 64 \"/usr/include/c++/14.2.1/string_view\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n  constexpr size_t\r\n  __sv_check(size_t __size, size_t __pos, const char* __s)\r\n  {\r\n    if (__pos > __size)\r\n      __throw_out_of_range_fmt((\"%s: __pos (which is %zu) > __size \" \"(which is %zu)\")\r\n                        , __s, __pos, __size);\r\n    return __pos;\r\n  }\r\n\r\n\r\n\r\n  constexpr size_t\r\n  __sv_limit(size_t __size, size_t __pos, size_t __off) noexcept\r\n  {\r\n   const bool __testoff = __off < __size - __pos;\r\n   return __testoff ? __off : __size - __pos;\r\n  }\r\n# 105 \"/usr/include/c++/14.2.1/string_view\" 3\r\n"]
[81.347449, "o", "  template<typename _CharT, typename _Traits = std::char_traits<_CharT>>\r\n    class basic_string_view\r\n    {\r\n      static_assert(!is_array_v<_CharT>);\r\n      static_assert(is_trivial_v<_CharT> && is_standard_layout_v<_CharT>);\r\n      static_assert(is_same_v<_CharT, typename _Traits::char_type>);\r\n\r\n    public:\r\n\r\n\r\n      using traits_type = _Traits;\r\n      using value_type = _CharT;\r\n      using pointer = value_type*;\r\n      using const_pointer = const value_type*;\r\n      using reference = value_type&;\r\n      using const_reference = const value_type&;\r\n      using const_iterator = const value_type*;\r\n"]
[81.347577, "o", "      using iterator = const_iterator;\r\n      using const_reverse_iterator = std::reverse_iterator<const_iterator>;\r\n      using reverse_iterator = const_reverse_iterator;\r\n      using size_type = size_t;\r\n      using difference_type = ptrdiff_t;\r\n      static constexpr size_type npos = size_type(-1);\r\n\r\n\r\n\r\n      constexpr\r\n      basic_string_view() noexcept\r\n      : _M_len{0}, _M_str{nullptr}\r\n      { }\r\n\r\n      constexpr basic_string_view(const basic_string_view&) noexcept = default;\r\n\r\n      [[__gnu__::__nonnull__]]\r\n      constexpr\r\n      basic_string_view(const _CharT* __str) noexcept\r\n      : _M_len{traits_type::length(__str)},\r\n _M_str{__str}\r\n      { }\r\n\r\n      constexpr\r\n"]
[81.347608, "o", "      basic_string_view(const _CharT* __str, size_type __len) noexcept\r\n      : _M_len{__len}, _M_str{__str}\r\n"]
[81.347644, "o", "      { }\r\n# 180 \"/usr/include/c++/14.2.1/string_view\" 3\r\n      constexpr basic_string_view&\r\n      operator=(const basic_string_view&) noexcept = default;\r\n\r\n\r\n\r\n"]
[81.347678, "o", "      [[nodiscard]]\r\n      constexpr const_iterator\r\n      begin() const noexcept\r\n      { return this->_M_str; }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_iterator\r\n      end() const noexcept\r\n      { return this->_M_str + this->_M_len; }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_iterator"]
[81.347831, "o", "\r\n      cbegin() const noexcept\r\n      { return this->_M_str; }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_iterator\r\n      cend() const noexcept\r\n      { return this->_M_str + this->_M_len; }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_reverse_iterator\r\n      rbegin() const noexcept\r\n      { return const_reverse_iterator(this->end()); }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_reverse_iterator\r\n      rend() const noexcept\r\n      { return const_reverse_iterator(this->begin()); }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_reverse_iterator\r\n      crbegin() const noexcept\r\n      { return const_reverse_iterator(this->end()); }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_reverse_iterator\r\n      crend() const noexcept\r\n      { return const_reverse_iterator(this->begin()); }\r\n\r\n\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      size() const noexcept\r\n      { return this->_M_len; }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n"]
[81.347903, "o", "      length() const noexcept\r\n      { return _M_len; }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      max_size() const noexcept\r\n      {\r\n return (npos - sizeof(size_type) - sizeof(void*))\r\n  / sizeof(value_type) / 4;\r\n      }\r\n\r\n      [[nodiscard]]\r\n      constexpr bool\r\n      empty() const noexcept\r\n      { return this->_M_len == 0; }\r\n\r\n\r\n\r\n      [[nodiscard]]\r\n      constexpr const_reference\r\n      operator[](size_type __pos) const noexcept\r\n      {\r\n"]
[81.347972, "o", " do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(__pos < this->_M_len), false)) std::__glibcxx_assert_fail(); } while (false);\r\n return *(this->_M_str + __pos);\r\n      }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_reference\r\n      at(size_type __pos) const\r\n      {\r\n if (__pos >= _M_len)\r\n   __throw_out_of_range_fmt((\"basic_string_view::at: __pos \" \"(which is %zu) >= this->size() \" \"(which is %zu)\")\r\n\r\n                            , __pos, this->size());\r\n return *(this->_M_str + __pos);\r\n      }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_reference\r\n      front() const noexcept\r\n      {\r\n"]
[81.348049, "o", " do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(this->_M_len > 0), false)) std::__glibcxx_assert_fail(); } while (false);\r\n return *this->_M_str;\r\n      }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_reference\r\n      back() const noexcept\r\n      {\r\n do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(this->_M_len > 0), false)) std::__glibcxx_assert_fail(); } while (false);\r\n return *(this->_M_str + this->_M_len - 1);\r\n      }\r\n\r\n      [[nodiscard]]\r\n      constexpr const_pointer\r\n      data() const noexcept\r\n      { return this->_M_str; }\r\n\r\n\r\n\r\n"]
[81.34809, "o", "      constexpr void\r\n      remove_prefix(size_type __n) noexcept\r\n      {\r\n do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(this->_M_len >= __n), false)) std::__glibcxx_assert_fail(); } while (false);\r\n this->_M_str += __n;\r\n this->_M_len -= __n;\r\n      }\r\n\r\n      constexpr void\r\n      remove_suffix(size_type __n) noexcept\r\n      {\r\n"]
[81.348126, "o", " do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(this->_M_len >= __n), false)) std::__glibcxx_assert_fail(); } while (false);\r\n this->_M_len -= __n;\r\n      }\r\n\r\n      constexpr void\r\n      swap(basic_string_view& __sv) noexcept\r\n      {\r\n auto __tmp = *this;\r\n *this = __sv;\r\n"]
[81.34816, "o", " __sv = __tmp;\r\n      }\r\n\r\n\r\n\r\n     \r\n      size_type\r\n      copy(_CharT* __str, size_type __n, size_type __pos = 0) const\r\n      {\r\n"]
[81.348201, "o", " ;\r\n __pos = std::__sv_check(size(), __pos, \"basic_string_view::copy\");\r\n const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);\r\n\r\n\r\n traits_type::copy(__str, data() + __pos, __rlen);\r\n return __rlen;\r\n      }\r\n\r\n"]
[81.348242, "o", "      [[nodiscard]]\r\n      constexpr basic_string_view\r\n      substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)\r\n      {\r\n __pos = std::__sv_check(size(), __pos, \"basic_string_view::substr\");\r\n const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);\r\n return basic_string_view{_M_str + __pos, __rlen};\r\n      }\r\n"]
[81.34828, "o", "\r\n      [[nodiscard]]\r\n      constexpr int\r\n      compare(basic_string_view __str) const noexcept\r\n      {\r\n const size_type __rlen = std::min(this->_M_len, __str._M_len);\r\n int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen);\r\n if (__ret == 0)\r\n"]
[81.348315, "o", "   __ret = _S_compare(this->_M_len, __str._M_len);\r\n return __ret;\r\n      }\r\n\r\n      [[nodiscard]]\r\n      constexpr int\r\n      compare(size_type __pos1, size_type __n1, basic_string_view __str) const\r\n      { return this->substr(__pos1, __n1).compare(__str); }\r\n\r\n"]
[81.348349, "o", "      [[nodiscard]]\r\n      constexpr int\r\n      compare(size_type __pos1, size_type __n1,\r\n       basic_string_view __str, size_type __pos2, size_type __n2) const\r\n      {\r\n return this->substr(__pos1, __n1).compare(__str.substr(__pos2, __n2));\r\n      }\r\n\r\n      [[nodiscard, __gnu__::__nonnull__]]\r\n"]
[81.348385, "o", "      constexpr int\r\n      compare(const _CharT* __str) const noexcept\r\n      { return this->compare(basic_string_view{__str}); }\r\n\r\n      [[nodiscard, __gnu__::__nonnull__]]\r\n      constexpr int\r\n      compare(size_type __pos1, size_type __n1, const _CharT* __str) const\r\n"]
[81.348419, "o", "      { return this->substr(__pos1, __n1).compare(basic_string_view{__str}); }\r\n\r\n      [[nodiscard]]\r\n      constexpr int\r\n      compare(size_type __pos1, size_type __n1,\r\n       const _CharT* __str, size_type __n2) const noexcept(false)\r\n      {\r\n return this->substr(__pos1, __n1)\r\n"]
[81.348451, "o", "     .compare(basic_string_view(__str, __n2));\r\n"]
[81.348826, "o", "      }\r\n# 445 \"/usr/include/c++/14.2.1/string_view\" 3\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find(basic_string_view __str, size_type __pos = 0) const noexcept\r\n      { return this->find(__str._M_str, __pos, __str._M_len); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find(_CharT __c, size_type __pos = 0) const noexcept;\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find(const _CharT* __str, size_type __pos, size_type __n) const noexcept;\r\n\r\n      [[nodiscard, __gnu__::__nonnull__]]\r\n      constexpr size_type\r\n      find(const _CharT* __str, size_type __pos = 0) const noexcept\r\n      { return this->find(__str, __pos, traits_type::length(__str)); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      rfind(basic_string_view __str, size_type __pos = npos) const noexcept\r\n      { return this->rfind(__str._M_str, __pos, __str._M_len); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      rfind(_CharT __c, size_type __pos = npos) const noexcept;\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept;\r\n\r\n      [[nodiscard, __gnu__::__nonnull__]]\r\n      constexpr size_type\r\n      rfind(const _CharT* __str, size_type __pos = npos) const noexcept\r\n      { return this->rfind(__str, __pos, traits_type::length(__str)); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_first_of(basic_string_view __str, size_type __pos = 0) const noexcept\r\n      { return this->find_first_of(__str._M_str, __pos, __str._M_len); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_first_of(_CharT __c, size_type __pos = 0) const noexcept\r\n      { return this->find(__c, __pos); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_first_of(const _CharT* __str, size_type __pos,\r\n      size_type __n) const noexcept;\r\n\r\n      [[nodiscard, __gnu__::__nonnull__]]\r\n      constexpr size_type\r\n      find_first_of(const _CharT* __str, size_type __pos = 0) const noexcept\r\n      { return this->find_first_of(__str, __pos, traits_type::length(__str)); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_last_of(basic_string_view __str,\r\n     size_type __pos = npos) const noexcept\r\n      { return this->find_last_of(__str._M_str, __pos, __str._M_len); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_last_of(_CharT __c, size_type __pos=npos) const noexcept\r\n      { return this->rfind(__c, __pos); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_last_of(const _CharT* __str, size_type __pos,\r\n"]
[81.348862, "o", "     size_type __n) const noexcept;\r\n\r\n      [[nodiscard, __gnu__::__nonnull__]]\r\n      constexpr size_type\r\n      find_last_of(const _CharT* __str, size_type __pos = npos) const noexcept\r\n      { return this->find_last_of(__str, __pos, traits_type::length(__str)); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_first_not_of(basic_string_view __str,\r\n   size_type __pos = 0) const noexcept\r\n"]
[81.348959, "o", "      { return this->find_first_not_of(__str._M_str, __pos, __str._M_len); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept;\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_first_not_of(const _CharT* __str,\r\n   size_type __pos, size_type __n) const noexcept;\r\n\r\n      [[nodiscard, __gnu__::__nonnull__]]\r\n      constexpr size_type\r\n      find_first_not_of(const _CharT* __str, size_type __pos = 0) const noexcept\r\n      {\r\n return this->find_first_not_of(__str, __pos,\r\n           traits_type::length(__str));\r\n      }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_last_not_of(basic_string_view __str,\r\n"]
[81.34904, "o", "         size_type __pos = npos) const noexcept\r\n      { return this->find_last_not_of(__str._M_str, __pos, __str._M_len); }\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept;\r\n\r\n      [[nodiscard]]\r\n      constexpr size_type\r\n      find_last_not_of(const _CharT* __str,\r\n         size_type __pos, size_type __n) const noexcept;\r\n\r\n      [[nodiscard, __gnu__::__nonnull__]]\r\n      constexpr size_type\r\n      find_last_not_of(const _CharT* __str,\r\n         size_type __pos = npos) const noexcept\r\n      {\r\n return this->find_last_not_of(__str, __pos,\r\n          traits_type::length(__str));\r\n      }\r\n\r\n    private:\r\n\r\n      static constexpr int\r\n"]
[81.349073, "o", "      _S_compare(size_type __n1, size_type __n2) noexcept\r\n      {\r\n using __limits = __gnu_cxx::__int_traits<int>;\r\n const difference_type __diff = __n1 - __n2;\r\n if (__diff > __limits::__max)\r\n   return __limits::__max;\r\n if (__diff < __limits::__min)\r\n   return __limits::__min;\r\n return static_cast<int>(__diff);\r\n      }\r\n\r\n      size_t _M_len;\r\n"]
[81.349164, "o", "      const _CharT* _M_str;\r\n    };\r\n# 623 \"/usr/include/c++/14.2.1/string_view\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator==(basic_string_view<_CharT, _Traits> __x,\r\n        __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\r\n    noexcept\r\n    { return __x.size() == __y.size() && __x.compare(__y) == 0; }\r\n\r\n"]
[81.349241, "o", "  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator==(basic_string_view<_CharT, _Traits> __x,\r\n        basic_string_view<_CharT, _Traits> __y) noexcept\r\n    { return __x.size() == __y.size() && __x.compare(__y) == 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator==(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n    { return __x.size() == __y.size() && __x.compare(__y) == 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n"]
[81.349316, "o", "    operator!=(basic_string_view<_CharT, _Traits> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n    { return !(__x == __y); }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator!=(basic_string_view<_CharT, _Traits> __x,\r\n               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\r\n    noexcept\r\n    { return !(__x == __y); }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator!=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n    { return !(__x == __y); }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n"]
[81.349391, "o", "    operator< (basic_string_view<_CharT, _Traits> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n    { return __x.compare(__y) < 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator< (basic_string_view<_CharT, _Traits> __x,\r\n               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\r\n    noexcept\r\n    { return __x.compare(__y) < 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator< (__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n    { return __x.compare(__y) < 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n"]
[81.349456, "o", "    [[nodiscard]]\r\n    constexpr bool\r\n    operator> (basic_string_view<_CharT, _Traits> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n    { return __x.compare(__y) > 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator> (basic_string_view<_CharT, _Traits> __x,\r\n               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\r\n    noexcept\r\n    { return __x.compare(__y) > 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator> (__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n"]
[81.349546, "o", "    { return __x.compare(__y) > 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator<=(basic_string_view<_CharT, _Traits> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n    { return __x.compare(__y) <= 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator<=(basic_string_view<_CharT, _Traits> __x,\r\n               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\r\n    noexcept\r\n    { return __x.compare(__y) <= 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator<=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n"]
[81.349622, "o", "    { return __x.compare(__y) <= 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator>=(basic_string_view<_CharT, _Traits> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n    { return __x.compare(__y) >= 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator>=(basic_string_view<_CharT, _Traits> __x,\r\n               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\r\n    noexcept\r\n    { return __x.compare(__y) >= 0; }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[nodiscard]]\r\n    constexpr bool\r\n    operator>=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\r\n               basic_string_view<_CharT, _Traits> __y) noexcept\r\n"]
[81.349699, "o", "    { return __x.compare(__y) >= 0; }\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    inline basic_ostream<_CharT, _Traits>&\r\n    operator<<(basic_ostream<_CharT, _Traits>& __os,\r\n        basic_string_view<_CharT,_Traits> __str)\r\n    { return __ostream_insert(__os, __str.data(), __str.size()); }\r\n\r\n\r\n\r\n\r\n  using string_view = basic_string_view<char>;\r\n  using wstring_view = basic_string_view<wchar_t>;\r\n\r\n\r\n\r\n  using u16string_view = basic_string_view<char16_t>;\r\n  using u32string_view = basic_string_view<char32_t>;\r\n\r\n\r\n"]
[81.349733, "o", "\r\n  template<typename _Tp>\r\n    struct hash;\r\n\r\n  template<>\r\n    struct hash<string_view>\r\n    : public __hash_base<size_t, string_view>\r\n    {\r\n      [[nodiscard]]\r\n      size_t\r\n      operator()(const string_view& __str) const noexcept\r\n      { return std::_Hash_impl::hash(__str.data(), __str.length()); }\r\n    };\r\n\r\n"]
[81.34977, "o", "  template<>\r\n    struct __is_fast_hash<hash<string_view>> : std::false_type\r\n    { };\r\n\r\n  template<>\r\n    struct hash<wstring_view>\r\n    : public __hash_base<size_t, wstring_view>\r\n    {\r\n"]
[81.349806, "o", "      [[nodiscard]]\r\n      size_t\r\n      operator()(const wstring_view& __s) const noexcept\r\n      { return std::_Hash_impl::hash(__s.data(),\r\n                                     __s.length() * sizeof(wchar_t)); }\r\n    };\r\n\r\n  template<>\r\n    struct __is_fast_hash<hash<wstring_view>> : std::false_type\r\n"]
[81.349844, "o", "    { };\r\n# 825 \"/usr/include/c++/14.2.1/string_view\" 3\r\n  template<>\r\n    struct hash<u16string_view>\r\n    : public __hash_base<size_t, u16string_view>\r\n    {\r\n"]
[81.349874, "o", "      [[nodiscard]]\r\n      size_t\r\n      operator()(const u16string_view& __s) const noexcept\r\n      { return std::_Hash_impl::hash(__s.data(),\r\n                                     __s.length() * sizeof(char16_t)); }\r\n    };\r\n\r\n  template<>\r\n"]
[81.349908, "o", "    struct __is_fast_hash<hash<u16string_view>> : std::false_type\r\n    { };\r\n\r\n  template<>\r\n    struct hash<u32string_view>\r\n    : public __hash_base<size_t, u32string_view>\r\n    {\r\n      [[nodiscard]]\r\n      size_t\r\n"]
[81.349942, "o", "      operator()(const u32string_view& __s) const noexcept\r\n      { return std::_Hash_impl::hash(__s.data(),\r\n                                     __s.length() * sizeof(char32_t)); }\r\n    };\r\n\r\n  template<>\r\n    struct __is_fast_hash<hash<u32string_view>> : std::false_type\r\n    { };\r\n"]
[81.349973, "o", "\r\n  inline namespace literals\r\n  {\r\n  inline namespace string_view_literals\r\n  {\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wliteral-suffix\"\r\n"]
[81.350273, "o", "    inline constexpr basic_string_view<char>\r\n    operator\"\"sv(const char* __str, size_t __len) noexcept\r\n    { return basic_string_view<char>{__str, __len}; }\r\n\r\n    inline constexpr basic_string_view<wchar_t>\r\n    operator\"\"sv(const wchar_t* __str, size_t __len) noexcept\r\n    { return basic_string_view<wchar_t>{__str, __len}; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    inline constexpr basic_string_view<char16_t>\r\n    operator\"\"sv(const char16_t* __str, size_t __len) noexcept\r\n    { return basic_string_view<char16_t>{__str, __len}; }\r\n\r\n    inline constexpr basic_string_view<char32_t>\r\n    operator\"\"sv(const char32_t* __str, size_t __len) noexcept\r\n    { return basic_string_view<char32_t>{__str, __len}; }\r\n\r\n#pragma GCC diagnostic pop\r\n  }\r\n  }\r\n# 901 \"/usr/include/c++/14.2.1/string_view\" 3\r\n\r\n}\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/string_view.tcc\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/string_view.tcc\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/string_view.tcc\" 3\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    constexpr typename basic_string_view<_CharT, _Traits>::size_type\r\n"]
[81.350355, "o", "    basic_string_view<_CharT, _Traits>::\r\n    find(const _CharT* __str, size_type __pos, size_type __n) const noexcept\r\n    {\r\n      ;\r\n\r\n      if (__n == 0)\r\n return __pos <= _M_len ? __pos : npos;\r\n      if (__pos >= _M_len)\r\n return npos;\r\n\r\n      const _CharT __elem0 = __str[0];\r\n      const _CharT* __first = _M_str + __pos;\r\n      const _CharT* const __last = _M_str + _M_len;\r\n      size_type __len = _M_len - __pos;\r\n\r\n      while (__len >= __n)\r\n {\r\n\r\n   __first = traits_type::find(__first, __len - __n + 1, __elem0);\r\n   if (!__first)\r\n     return npos;\r\n\r\n"]
[81.350435, "o", "\r\n\r\n   if (traits_type::compare(__first, __str, __n) == 0)\r\n     return __first - _M_str;\r\n   __len = __last - ++__first;\r\n }\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    constexpr typename basic_string_view<_CharT, _Traits>::size_type\r\n    basic_string_view<_CharT, _Traits>::\r\n    find(_CharT __c, size_type __pos) const noexcept\r\n    {\r\n      size_type __ret = npos;\r\n      if (__pos < this->_M_len)\r\n {\r\n   const size_type __n = this->_M_len - __pos;\r\n   const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);\r\n   if (__p)\r\n     __ret = __p - this->_M_str;\r\n }\r\n"]
[81.350523, "o", "      return __ret;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    constexpr typename basic_string_view<_CharT, _Traits>::size_type\r\n    basic_string_view<_CharT, _Traits>::\r\n    rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept\r\n    {\r\n      ;\r\n\r\n      if (__n <= this->_M_len)\r\n {\r\n   __pos = std::min(size_type(this->_M_len - __n), __pos);\r\n   do\r\n     {\r\n       if (traits_type::compare(this->_M_str + __pos, __str, __n) == 0)\r\n  return __pos;\r\n     }\r\n   while (__pos-- > 0);\r\n }\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    constexpr typename basic_string_view<_CharT, _Traits>::size_type\r\n    basic_string_view<_CharT, _Traits>::\r\n"]
[81.350562, "o", "    rfind(_CharT __c, size_type __pos) const noexcept\r\n    {\r\n      size_type __size = this->_M_len;\r\n      if (__size > 0)\r\n {\r\n   if (--__size > __pos)\r\n     __size = __pos;\r\n   for (++__size; __size-- > 0; )\r\n     if (traits_type::eq(this->_M_str[__size], __c))\r\n       return __size;\r\n }\r\n"]
[81.350598, "o", "      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    constexpr typename basic_string_view<_CharT, _Traits>::size_type\r\n    basic_string_view<_CharT, _Traits>::\r\n    find_first_of(const _CharT* __str, size_type __pos,\r\n    size_type __n) const noexcept\r\n    {\r\n"]
[81.350632, "o", "      ;\r\n      for (; __n && __pos < this->_M_len; ++__pos)\r\n {\r\n   const _CharT* __p = traits_type::find(__str, __n,\r\n      this->_M_str[__pos]);\r\n   if (__p)\r\n     return __pos;\r\n"]
[81.350674, "o", " }\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    constexpr typename basic_string_view<_CharT, _Traits>::size_type\r\n    basic_string_view<_CharT, _Traits>::\r\n    find_last_of(const _CharT* __str, size_type __pos,\r\n"]
[81.350705, "o", "   size_type __n) const noexcept\r\n    {\r\n      ;\r\n      size_type __size = this->size();\r\n      if (__size && __n)\r\n {\r\n   if (--__size > __pos)\r\n     __size = __pos;\r\n   do\r\n     {\r\n       if (traits_type::find(__str, __n, this->_M_str[__size]))\r\n"]
[81.350744, "o", "  return __size;\r\n     }\r\n   while (__size-- != 0);\r\n }\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n"]
[81.350779, "o", "    constexpr typename basic_string_view<_CharT, _Traits>::size_type\r\n    basic_string_view<_CharT, _Traits>::\r\n    find_first_not_of(const _CharT* __str, size_type __pos,\r\n        size_type __n) const noexcept\r\n    {\r\n      ;\r\n      for (; __pos < this->_M_len; ++__pos)\r\n if (!traits_type::find(__str, __n, this->_M_str[__pos]))\r\n   return __pos;\r\n"]
[81.350812, "o", "      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    constexpr typename basic_string_view<_CharT, _Traits>::size_type\r\n    basic_string_view<_CharT, _Traits>::\r\n    find_first_not_of(_CharT __c, size_type __pos) const noexcept\r\n    {\r\n"]
[81.350843, "o", "      for (; __pos < this->_M_len; ++__pos)\r\n if (!traits_type::eq(this->_M_str[__pos], __c))\r\n   return __pos;\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n"]
[81.350885, "o", "    constexpr typename basic_string_view<_CharT, _Traits>::size_type\r\n    basic_string_view<_CharT, _Traits>::\r\n    find_last_not_of(const _CharT* __str, size_type __pos,\r\n       size_type __n) const noexcept\r\n"]
[81.350926, "o", "    {\r\n      ;\r\n      size_type __size = this->_M_len;\r\n      if (__size)\r\n {\r\n   if (--__size > __pos)\r\n     __size = __pos;\r\n   do\r\n"]
[81.350963, "o", "     {\r\n       if (!traits_type::find(__str, __n, this->_M_str[__size]))\r\n  return __size;\r\n     }\r\n   while (__size--);\r\n }\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n"]
[81.351005, "o", "    constexpr typename basic_string_view<_CharT, _Traits>::size_type\r\n    basic_string_view<_CharT, _Traits>::\r\n    find_last_not_of(_CharT __c, size_type __pos) const noexcept\r\n    {\r\n      size_type __size = this->_M_len;\r\n      if (__size)\r\n {\r\n   if (--__size > __pos)\r\n     __size = __pos;\r\n   do\r\n     {\r\n"]
[81.351041, "o", "       if (!traits_type::eq(this->_M_str[__size], __c))\r\n  return __size;\r\n     }\r\n   while (__size--);\r\n }\r\n      return npos;\r\n    }\r\n\r\n\r\n}\r\n# 905 \"/usr/include/c++/14.2.1/string_view\" 2 3\r\n# 48 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 2 3\r\n"]
[81.351351, "o", "\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.352403, "o", "# 55 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 2 3\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n"]
[81.352437, "o", "namespace __cxx11 {\r\n# 85 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    class basic_string\r\n    {\r\n\r\n\r\n\r\n\r\n\r\n      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\r\n"]
[81.352465, "o", " rebind<_CharT>::other _Char_alloc_type;\r\n\r\n\r\n      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;\r\n\r\n\r\n    public:\r\n"]
[81.352501, "o", "      typedef _Traits traits_type;\r\n      typedef typename _Traits::char_type value_type;\r\n      typedef _Char_alloc_type allocator_type;\r\n      typedef typename _Alloc_traits::size_type size_type;\r\n      typedef typename _Alloc_traits::difference_type difference_type;\r\n      typedef typename _Alloc_traits::reference reference;\r\n"]
[81.352533, "o", "      typedef typename _Alloc_traits::const_reference const_reference;\r\n      typedef typename _Alloc_traits::pointer pointer;\r\n      typedef typename _Alloc_traits::const_pointer const_pointer;\r\n      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;\r\n      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>\r\n"]
[81.352568, "o", "       const_iterator;\r\n      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\r\n      typedef std::reverse_iterator<iterator> reverse_iterator;\r\n\r\n\r\n      static const size_type npos = static_cast<size_type>(-1);\r\n\r\n    protected:\r\n\r\n\r\n"]
[81.352605, "o", "\r\n\r\n      typedef const_iterator __const_iterator;\r\n\r\n\r\n    private:\r\n      static pointer\r\n      _S_allocate(_Char_alloc_type& __a, size_type __n)\r\n      {\r\n"]
[81.352641, "o", " pointer __p = _Alloc_traits::allocate(__a, __n);\r\n# 141 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n return __p;\r\n      }\r\n\r\n\r\n\r\n      typedef basic_string_view<_CharT, _Traits> __sv_type;\r\n\r\n"]
[81.35267, "o", "      template<typename _Tp, typename _Res>\r\n using _If_sv = enable_if_t<\r\n   __and_<is_convertible<const _Tp&, __sv_type>,\r\n   __not_<is_convertible<const _Tp*, const basic_string*>>,\r\n   __not_<is_convertible<const _Tp&, const _CharT*>>>::value,\r\n"]
[81.352704, "o", "   _Res>;\r\n\r\n\r\n     \r\n      static __sv_type\r\n      _S_to_string_view(__sv_type __svt) noexcept\r\n      { return __svt; }\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.352737, "o", "      struct __sv_wrapper\r\n      {\r\n explicit\r\n __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }\r\n\r\n __sv_type _M_sv;\r\n      };\r\n\r\n\r\n\r\n"]
[81.352773, "o", "\r\n\r\n\r\n\r\n     \r\n      explicit\r\n      basic_string(__sv_wrapper __svw, const _Alloc& __a)\r\n"]
[81.352816, "o", "      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }\r\n\r\n\r\n\r\n      struct _Alloc_hider : allocator_type\r\n      {\r\n\r\n\r\n\r\n\r\n\r\n _Alloc_hider(pointer __dat, const _Alloc& __a)\r\n"]
[81.352855, "o", " : allocator_type(__a), _M_p(__dat) { }\r\n\r\n\r\n _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())\r\n : allocator_type(std::move(__a)), _M_p(__dat) { }\r\n\r\n\r\n pointer _M_p;\r\n      };\r\n\r\n      _Alloc_hider _M_dataplus;\r\n      size_type _M_string_length;\r\n\r\n"]
[81.352891, "o", "      enum { _S_local_capacity = 15 / sizeof(_CharT) };\r\n\r\n      union\r\n      {\r\n _CharT _M_local_buf[_S_local_capacity + 1];\r\n size_type _M_allocated_capacity;\r\n      };\r\n\r\n     \r\n      void\r\n      _M_data(pointer __p)\r\n      { _M_dataplus._M_p = __p; }\r\n\r\n"]
[81.35292, "o", "     \r\n      void\r\n      _M_length(size_type __length)\r\n      { _M_string_length = __length; }\r\n\r\n     \r\n      pointer\r\n      _M_data() const\r\n      { return _M_dataplus._M_p; }\r\n\r\n"]
[81.353393, "o", "     \r\n      pointer\r\n      _M_local_data()\r\n      {\r\n\r\n return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);\r\n\r\n\r\n\r\n      }\r\n\r\n     \r\n      const_pointer\r\n      _M_local_data() const\r\n      {\r\n\r\n return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);\r\n\r\n\r\n\r\n      }\r\n\r\n     \r\n      void\r\n      _M_capacity(size_type __capacity)\r\n      { _M_allocated_capacity = __capacity; }\r\n\r\n     \r\n      void\r\n      _M_set_length(size_type __n)\r\n      {\r\n _M_length(__n);\r\n traits_type::assign(_M_data()[__n], _CharT());\r\n      }\r\n\r\n     \r\n      bool\r\n      _M_is_local() const\r\n      {\r\n if (_M_data() == _M_local_data())\r\n   {\r\n     if (_M_string_length > _S_local_capacity)\r\n       __builtin_unreachable();\r\n     return true;\r\n   }\r\n return false;\r\n      }\r\n\r\n\r\n     \r\n      pointer\r\n      _M_create(size_type&, size_type);\r\n\r\n     \r\n      void\r\n      _M_dispose()\r\n      {\r\n if (!_M_is_local())\r\n   _M_destroy(_M_allocated_capacity);\r\n      }\r\n\r\n     \r\n      void\r\n      _M_destroy(size_type __size) throw()\r\n      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }\r\n# 321 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _InIterator>\r\n\r\n        void\r\n        _M_construct(_InIterator __beg, _InIterator __end,\r\n       std::input_iterator_tag);\r\n\r\n\r\n\r\n      template<typename _FwdIterator>\r\n\r\n        void\r\n        _M_construct(_FwdIterator __beg, _FwdIterator __end,\r\n       std::forward_iterator_tag);\r\n\r\n     \r\n      void\r\n      _M_construct(size_type __req, _CharT __c);\r\n\r\n     \r\n      allocator_type&\r\n      _M_get_allocator()\r\n      { return _M_dataplus; }\r\n\r\n     \r\n      const allocator_type&\r\n      _M_get_allocator() const\r\n      { return _M_dataplus; }\r\n\r\n\r\n      __attribute__((__always_inline__))\r\n      constexpr\r\n      void\r\n      _M_init_local_buf() noexcept\r\n      {\r\n\r\n\r\n\r\n\r\n\r\n      }\r\n\r\n      __attribute__((__always_inline__))\r\n      constexpr\r\n      pointer\r\n      _M_use_local_data() noexcept\r\n      {\r\n\r\n\r\n\r\n return _M_local_data();\r\n      }\r\n\r\n"]
[81.353434, "o", "    private:\r\n# 389 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      size_type\r\n      _M_check(size_type __pos, const char* __s) const\r\n      {\r\n if (__pos > this->size())\r\n   __throw_out_of_range_fmt((\"%s: __pos (which is %zu) > \" \"this->size() (which is %zu)\")\r\n                                         ,\r\n       __s, __pos, this->size());\r\n return __pos;\r\n      }\r\n\r\n     \r\n"]
[81.353471, "o", "      void\r\n      _M_check_length(size_type __n1, size_type __n2, const char* __s) const\r\n      {\r\n if (this->max_size() - (this->size() - __n1) < __n2)\r\n   __throw_length_error((__s));\r\n      }\r\n"]
[81.353505, "o", "\r\n\r\n\r\n     \r\n      size_type\r\n      _M_limit(size_type __pos, size_type __off) const noexcept\r\n      {\r\n const bool __testoff = __off < this->size() - __pos;\r\n"]
[81.353546, "o", " return __testoff ? __off : this->size() - __pos;\r\n      }\r\n\r\n\r\n      bool\r\n      _M_disjunct(const _CharT* __s) const noexcept\r\n      {\r\n return (less<const _CharT*>()(__s, _M_data())\r\n"]
[81.353582, "o", "  || less<const _CharT*>()(_M_data() + this->size(), __s));\r\n      }\r\n\r\n\r\n\r\n     \r\n      static void\r\n      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)\r\n      {\r\n if (__n == 1)\r\n   traits_type::assign(*__d, *__s);\r\n else\r\n"]
[81.353619, "o", "   traits_type::copy(__d, __s, __n);\r\n      }\r\n\r\n     \r\n      static void\r\n      _S_move(_CharT* __d, const _CharT* __s, size_type __n)\r\n      {\r\n if (__n == 1)\r\n"]
[81.353649, "o", "   traits_type::assign(*__d, *__s);\r\n else\r\n   traits_type::move(__d, __s, __n);\r\n      }\r\n\r\n     \r\n      static void\r\n      _S_assign(_CharT* __d, size_type __n, _CharT __c)\r\n      {\r\n"]
[81.353684, "o", " if (__n == 1)\r\n   traits_type::assign(*__d, __c);\r\n else\r\n   traits_type::assign(__d, __n, __c);\r\n      }\r\n\r\n\r\n\r\n      template<class _Iterator>\r\n\r\n"]
[81.353712, "o", "        static void\r\n        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\r\n        {\r\n   for (; __k1 != __k2; ++__k1, (void)++__p)\r\n     traits_type::assign(*__p, *__k1);\r\n"]
[81.354018, "o", " }\r\n\r\n     \r\n      static void\r\n      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept\r\n      { _S_copy_chars(__p, __k1.base(), __k2.base()); }\r\n\r\n     \r\n      static void\r\n      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)\r\n      noexcept\r\n      { _S_copy_chars(__p, __k1.base(), __k2.base()); }\r\n\r\n     \r\n      static void\r\n      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept\r\n      { _S_copy(__p, __k1, __k2 - __k1); }\r\n\r\n     \r\n      static void\r\n      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)\r\n      noexcept\r\n      { _S_copy(__p, __k1, __k2 - __k1); }\r\n\r\n     \r\n      static int\r\n      _S_compare(size_type __n1, size_type __n2) noexcept\r\n      {\r\n const difference_type __d = difference_type(__n1 - __n2);\r\n\r\n if (__d > __gnu_cxx::__numeric_traits<int>::__max)\r\n   return __gnu_cxx::__numeric_traits<int>::__max;\r\n else if (__d < __gnu_cxx::__numeric_traits<int>::__min)\r\n   return __gnu_cxx::__numeric_traits<int>::__min;\r\n else\r\n   return int(__d);\r\n      }\r\n\r\n     \r\n      void\r\n      _M_assign(const basic_string&);\r\n\r\n     \r\n      void\r\n      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\r\n  size_type __len2);\r\n\r\n     \r\n      void\r\n      _M_erase(size_type __pos, size_type __n);\r\n\r\n    public:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string()\r\n      noexcept(is_nothrow_default_constructible<_Alloc>::value)\r\n      : _M_dataplus(_M_local_data())\r\n      {\r\n _M_init_local_buf();\r\n _M_set_length(0);\r\n      }\r\n\r\n\r\n\r\n\r\n     \r\n      explicit\r\n      basic_string(const _Alloc& __a) noexcept\r\n"]
[81.354088, "o", "      : _M_dataplus(_M_local_data(), __a)\r\n      {\r\n _M_init_local_buf();\r\n _M_set_length(0);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string(const basic_string& __str)\r\n      : _M_dataplus(_M_local_data(),\r\n      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))\r\n      {\r\n _M_construct(__str._M_data(), __str._M_data() + __str.length(),\r\n       std::forward_iterator_tag());\r\n      }\r\n# 568 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string(const basic_string& __str, size_type __pos,\r\n     const _Alloc& __a = _Alloc())\r\n"]
[81.354159, "o", "      : _M_dataplus(_M_local_data(), __a)\r\n      {\r\n const _CharT* __start = __str._M_data()\r\n   + __str._M_check(__pos, \"basic_string::basic_string\");\r\n _M_construct(__start, __start + __str._M_limit(__pos, npos),\r\n       std::forward_iterator_tag());\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string(const basic_string& __str, size_type __pos,\r\n     size_type __n)\r\n      : _M_dataplus(_M_local_data())\r\n      {\r\n const _CharT* __start = __str._M_data()\r\n   + __str._M_check(__pos, \"basic_string::basic_string\");\r\n"]
[81.354252, "o", " _M_construct(__start, __start + __str._M_limit(__pos, __n),\r\n       std::forward_iterator_tag());\r\n      }\r\n# 603 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string(const basic_string& __str, size_type __pos,\r\n     size_type __n, const _Alloc& __a)\r\n      : _M_dataplus(_M_local_data(), __a)\r\n      {\r\n const _CharT* __start\r\n   = __str._M_data() + __str._M_check(__pos, \"string::string\");\r\n _M_construct(__start, __start + __str._M_limit(__pos, __n),\r\n       std::forward_iterator_tag());\r\n      }\r\n# 623 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string(const _CharT* __s, size_type __n,\r\n     const _Alloc& __a = _Alloc())\r\n      : _M_dataplus(_M_local_data(), __a)\r\n      {\r\n\r\n"]
[81.354293, "o", " if (__s == 0 && __n > 0)\r\n   std::__throw_logic_error((\"basic_string: \" \"construction from null is not valid\")\r\n                                                 );\r\n _M_construct(__s, __s + __n, std::forward_iterator_tag());\r\n      }\r\n# 643 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename = _RequireAllocator<_Alloc>>\r\n\r\n     \r\n"]
[81.354323, "o", "      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())\r\n      : _M_dataplus(_M_local_data(), __a)\r\n      {\r\n\r\n if (__s == 0)\r\n   std::__throw_logic_error((\"basic_string: \" \"construction from null is not valid\")\r\n                                                 );\r\n"]
[81.354448, "o", " const _CharT* __end = __s + traits_type::length(__s);\r\n _M_construct(__s, __end, forward_iterator_tag());\r\n      }\r\n# 666 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename = _RequireAllocator<_Alloc>>\r\n\r\n     \r\n      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())\r\n      : _M_dataplus(_M_local_data(), __a)\r\n      { _M_construct(__n, __c); }\r\n# 681 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string(basic_string&& __str) noexcept\r\n      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))\r\n      {\r\n if (__str._M_is_local())\r\n   {\r\n     _M_init_local_buf();\r\n     traits_type::copy(_M_local_buf, __str._M_local_buf,\r\n         __str.length() + 1);\r\n   }\r\n else\r\n   {\r\n     _M_data(__str._M_data());\r\n"]
[81.354528, "o", "     _M_capacity(__str._M_allocated_capacity);\r\n   }\r\n\r\n\r\n\r\n\r\n _M_length(__str.length());\r\n __str._M_data(__str._M_use_local_data());\r\n __str._M_set_length(0);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\r\n      : _M_dataplus(_M_local_data(), __a)\r\n      { _M_construct(__l.begin(), __l.end(), std::forward_iterator_tag()); }\r\n\r\n     \r\n      basic_string(const basic_string& __str, const _Alloc& __a)\r\n      : _M_dataplus(_M_local_data(), __a)\r\n      { _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag()); }\r\n\r\n"]
[81.354568, "o", "     \r\n      basic_string(basic_string&& __str, const _Alloc& __a)\r\n      noexcept(_Alloc_traits::_S_always_equal())\r\n      : _M_dataplus(_M_local_data(), __a)\r\n      {\r\n if (__str._M_is_local())\r\n   {\r\n     _M_init_local_buf();\r\n     traits_type::copy(_M_local_buf, __str._M_local_buf,\r\n         __str.length() + 1);\r\n     _M_length(__str.length());\r\n     __str._M_set_length(0);\r\n   }\r\n"]
[81.3546, "o", " else if (_Alloc_traits::_S_always_equal()\r\n     || __str.get_allocator() == __a)\r\n   {\r\n     _M_data(__str._M_data());\r\n     _M_length(__str.length());\r\n     _M_capacity(__str._M_allocated_capacity);\r\n     __str._M_data(__str._M_use_local_data());\r\n"]
[81.354631, "o", "     __str._M_set_length(0);\r\n   }\r\n else\r\n   _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag());\r\n"]
[81.354665, "o", "      }\r\n# 759 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _InputIterator,\r\n        typename = std::_RequireInputIter<_InputIterator>>\r\n\r\n\r\n\r\n\r\n        basic_string(_InputIterator __beg, _InputIterator __end,\r\n"]
[81.354697, "o", "       const _Alloc& __a = _Alloc())\r\n : _M_dataplus(_M_local_data(), __a), _M_string_length(0)\r\n {\r\n\r\n   _M_construct(__beg, __end, std::__iterator_category(__beg));\r\n\r\n"]
[81.354735, "o", "\r\n\r\n\r\n }\r\n# 785 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp,\r\n        typename = enable_if_t<is_convertible_v<const _Tp&, __sv_type>>>\r\n\r\n"]
[81.354767, "o", " basic_string(const _Tp& __t, size_type __pos, size_type __n,\r\n       const _Alloc& __a = _Alloc())\r\n : basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      template<typename _Tp, typename = _If_sv<_Tp, void>>\r\n"]
[81.354798, "o", "\r\n explicit\r\n basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())\r\n : basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.354836, "o", "     \r\n      ~basic_string()\r\n      { _M_dispose(); }\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string&\r\n      operator=(const basic_string& __str)\r\n      {\r\n"]
[81.354869, "o", " return this->assign(__str);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string&\r\n      operator=(const _CharT* __s)\r\n      { return this->assign(__s); }\r\n# 838 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.354908, "o", "     \r\n      basic_string&\r\n      operator=(_CharT __c)\r\n      {\r\n this->assign(1, __c);\r\n return *this;\r\n      }\r\n"]
[81.354952, "o", "# 856 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      operator=(basic_string&& __str)\r\n      noexcept(_Alloc_traits::_S_nothrow_move())\r\n      {\r\n const bool __equal_allocs = _Alloc_traits::_S_always_equal()\r\n   || _M_get_allocator() == __str._M_get_allocator();\r\n if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()\r\n"]
[81.354992, "o", "     && !__equal_allocs)\r\n   {\r\n\r\n     _M_destroy(_M_allocated_capacity);\r\n     _M_data(_M_local_data());\r\n     _M_set_length(0);\r\n   }\r\n\r\n std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());\r\n\r\n if (__str._M_is_local())\r\n   {\r\n\r\n\r\n\r\n"]
[81.355021, "o", "     if (__builtin_expect(std::__addressof(__str) != this, true))\r\n       {\r\n  if (__str.size())\r\n    this->_S_copy(_M_data(), __str._M_data(), __str.size());\r\n  _M_set_length(__str.size());\r\n       }\r\n   }\r\n else if (_Alloc_traits::_S_propagate_on_move_assign() || __equal_allocs)\r\n   {\r\n"]
[81.355058, "o", "\r\n     pointer __data = nullptr;\r\n     size_type __capacity;\r\n     if (!_M_is_local())\r\n       {\r\n  if (__equal_allocs)\r\n    {\r\n\r\n      __data = _M_data();\r\n      __capacity = _M_allocated_capacity;\r\n"]
[81.355094, "o", "    }\r\n  else\r\n    _M_destroy(_M_allocated_capacity);\r\n       }\r\n\r\n     _M_data(__str._M_data());\r\n     _M_length(__str.length());\r\n     _M_capacity(__str._M_allocated_capacity);\r\n     if (__data)\r\n       {\r\n"]
[81.35513, "o", "  __str._M_data(__data);\r\n  __str._M_capacity(__capacity);\r\n       }\r\n     else\r\n       __str._M_data(__str._M_use_local_data());\r\n   }\r\n else\r\n   assign(__str);\r\n __str.clear();\r\n"]
[81.355163, "o", " return *this;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string&\r\n      operator=(initializer_list<_CharT> __l)\r\n      {\r\n"]
[81.3552, "o", " this->assign(__l.begin(), __l.size());\r\n return *this;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     template<typename _Tp>\r\n"]
[81.355231, "o", "      \r\n       _If_sv<_Tp, basic_string&>\r\n       operator=(const _Tp& __svt)\r\n       { return this->assign(__svt); }\r\n\r\n\r\n\r\n\r\n\r\n     \r\n"]
[81.355264, "o", "      operator __sv_type() const noexcept\r\n      { return __sv_type(data(), size()); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n"]
[81.355299, "o", "      iterator\r\n      begin() noexcept\r\n      { return iterator(_M_data()); }\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      const_iterator\r\n"]
[81.355335, "o", "      begin() const noexcept\r\n      { return const_iterator(_M_data()); }\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      iterator\r\n      end() noexcept\r\n"]
[81.355367, "o", "      { return iterator(_M_data() + this->size()); }\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      const_iterator\r\n      end() const noexcept\r\n      { return const_iterator(_M_data() + this->size()); }\r\n\r\n"]
[81.355405, "o", "\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      reverse_iterator\r\n      rbegin() noexcept\r\n      { return reverse_iterator(this->end()); }\r\n\r\n\r\n"]
[81.355449, "o", "\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      const_reverse_iterator\r\n      rbegin() const noexcept\r\n      { return const_reverse_iterator(this->end()); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.355487, "o", "      [[__nodiscard__]]\r\n      reverse_iterator\r\n      rend() noexcept\r\n      { return reverse_iterator(this->begin()); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      const_reverse_iterator\r\n      rend() const noexcept\r\n"]
[81.355523, "o", "      { return const_reverse_iterator(this->begin()); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      const_iterator\r\n      cbegin() const noexcept\r\n      { return const_iterator(this->_M_data()); }\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.355558, "o", "      [[__nodiscard__]]\r\n      const_iterator\r\n      cend() const noexcept\r\n      { return const_iterator(this->_M_data() + this->size()); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n"]
[81.355594, "o", "      const_reverse_iterator\r\n      crbegin() const noexcept\r\n      { return const_reverse_iterator(this->end()); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      const_reverse_iterator\r\n"]
[81.355627, "o", "      crend() const noexcept\r\n      { return const_reverse_iterator(this->begin()); }\r\n\r\n\r\n    public:\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      size_type\r\n      size() const noexcept\r\n"]
[81.355664, "o", "      { return _M_string_length; }\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      size_type\r\n      length() const noexcept\r\n      { return _M_string_length; }\r\n\r\n\r\n      [[__nodiscard__]]\r\n"]
[81.355705, "o", "      size_type\r\n      max_size() const noexcept\r\n      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }\r\n# 1102 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      void\r\n      resize(size_type __n, _CharT __c);\r\n# 1116 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n"]
[81.35574, "o", "      void\r\n      resize(size_type __n)\r\n      { this->resize(__n, _CharT()); }\r\n\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n"]
[81.355769, "o", "\r\n     \r\n      void\r\n      shrink_to_fit() noexcept\r\n      { reserve(); }\r\n#pragma GCC diagnostic pop\r\n"]
[81.356789, "o", "# 1169 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Operation>\r\n void\r\n __resize_and_overwrite(size_type __n, _Operation __op);\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      size_type\r\n      capacity() const noexcept\r\n      {\r\n return _M_is_local() ? size_type(_S_local_capacity)\r\n                      : _M_allocated_capacity;\r\n      }\r\n# 1203 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      void\r\n      reserve(size_type __res_arg);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      void\r\n      reserve();\r\n\r\n\r\n\r\n\r\n     \r\n      void\r\n      clear() noexcept\r\n      { _M_set_length(0); }\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      bool\r\n      empty() const noexcept\r\n      { return this->size() == 0; }\r\n# 1245 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      const_reference\r\n      operator[] (size_type __pos) const noexcept\r\n      {\r\n do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(__pos <= size()), false)) std::__glibcxx_assert_fail(); } while (false);\r\n return _M_data()[__pos];\r\n      }\r\n# 1263 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      reference\r\n      operator[](size_type __pos)\r\n      {\r\n\r\n\r\n do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(__pos <= size()), false)) std::__glibcxx_assert_fail(); } while (false);\r\n\r\n ;\r\n return _M_data()[__pos];\r\n      }\r\n# 1285 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      const_reference\r\n      at(size_type __n) const\r\n      {\r\n if (__n >= this->size())\r\n   __throw_out_of_range_fmt((\"basic_string::at: __n \" \"(which is %zu) >= this->size() \" \"(which is %zu)\")\r\n\r\n                            ,\r\n       __n, this->size());\r\n return _M_data()[__n];\r\n      }\r\n# 1307 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      reference\r\n      at(size_type __n)\r\n      {\r\n if (__n >= size())\r\n   __throw_out_of_range_fmt((\"basic_string::at: __n \" \"(which is %zu) >= this->size() \" \"(which is %zu)\")\r\n\r\n                            ,\r\n       __n, this->size());\r\n return _M_data()[__n];\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      reference\r\n      front() noexcept\r\n      {\r\n do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(!empty()), false)) std::__glibcxx_assert_fail(); } while (false);\r\n return operator[](0);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      const_reference\r\n      front() const noexcept\r\n      {\r\n do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(!empty()), false)) std::__glibcxx_assert_fail(); } while (false);\r\n return operator[](0);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      reference\r\n      back() noexcept\r\n      {\r\n do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(!empty()), false)) std::__glibcxx_assert_fail(); } while (false);\r\n return operator[](this->size() - 1);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      const_reference\r\n      back() const noexcept\r\n      {\r\n do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(!empty()), false)) std::__glibcxx_assert_fail(); } while (false);\r\n return operator[](this->size() - 1);\r\n      }\r\n# 1375 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      operator+=(const basic_string& __str)\r\n      { return this->append(__str); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string&\r\n      operator+=(const _CharT* __s)\r\n      { return this->append(__s); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string&\r\n      operator+=(_CharT __c)\r\n      {\r\n this->push_back(__c);\r\n return *this;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string&\r\n      operator+=(initializer_list<_CharT> __l)\r\n      { return this->append(__l.begin(), __l.size()); }\r\n# 1421 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n\r\n _If_sv<_Tp, basic_string&>\r\n operator+=(const _Tp& __svt)\r\n { return this->append(__svt); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string&\r\n      append(const basic_string& __str)\r\n      { return this->append(__str._M_data(), __str.size()); }\r\n# 1451 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      append(const basic_string& __str, size_type __pos, size_type __n = npos)\r\n      { return this->append(__str._M_data()\r\n       + __str._M_check(__pos, \"basic_string::append\"),\r\n       __str._M_limit(__pos, __n)); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string&\r\n      append(const _CharT* __s, size_type __n)\r\n      {\r\n ;\r\n _M_check_length(size_type(0), __n, \"basic_string::append\");\r\n return _M_append(__s, __n);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      basic_string&\r\n      append(const _CharT* __s)\r\n      {\r\n ;\r\n const size_type __n = traits_type::length(__s);\r\n _M_check_length(size_type(0), __n, \"basic_string::append\");\r\n return _M_append(__s, __n);\r\n      }\r\n# 1496 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      append(size_type __n, _CharT __c)\r\n      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.356834, "o", "\r\n\r\n     \r\n      basic_string&\r\n      append(initializer_list<_CharT> __l)\r\n      { return this->append(__l.begin(), __l.size()); }\r\n# 1522 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<class _InputIterator,\r\n        typename = std::_RequireInputIter<_InputIterator>>\r\n\r\n\r\n\r\n\r\n        basic_string&\r\n        append(_InputIterator __first, _InputIterator __last)\r\n        { return this->replace(end(), end(), __first, __last); }\r\n\r\n"]
[81.356864, "o", "\r\n\r\n\r\n\r\n\r\n\r\n      template<typename _Tp>\r\n\r\n        _If_sv<_Tp, basic_string&>\r\n        append(const _Tp& __svt)\r\n        {\r\n"]
[81.3569, "o", "          __sv_type __sv = __svt;\r\n          return this->append(__sv.data(), __sv.size());\r\n        }\r\n# 1554 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n\r\n        _If_sv<_Tp, basic_string&>\r\n"]
[81.356938, "o", " append(const _Tp& __svt, size_type __pos, size_type __n = npos)\r\n {\r\n   __sv_type __sv = __svt;\r\n   return _M_append(__sv.data()\r\n       + std::__sv_check(__sv.size(), __pos, \"basic_string::append\"),\r\n"]
[81.356974, "o", "       std::__sv_limit(__sv.size(), __pos, __n));\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      void\r\n      push_back(_CharT __c)\r\n      {\r\n const size_type __size = this->size();\r\n"]
[81.35701, "o", " if (__size + 1 > this->capacity())\r\n   this->_M_mutate(__size, size_type(0), 0, size_type(1));\r\n traits_type::assign(this->_M_data()[__size], __c);\r\n this->_M_set_length(__size + 1);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.357042, "o", "\r\n     \r\n      basic_string&\r\n      assign(const basic_string& __str)\r\n      {\r\n\r\n if (_Alloc_traits::_S_propagate_on_copy_assign())\r\n   {\r\n     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()\r\n"]
[81.357075, "o", "  && _M_get_allocator() != __str._M_get_allocator())\r\n       {\r\n\r\n\r\n  if (__str.size() <= _S_local_capacity)\r\n    {\r\n      _M_destroy(_M_allocated_capacity);\r\n      _M_data(_M_use_local_data());\r\n      _M_set_length(0);\r\n    }\r\n"]
[81.357178, "o", "  else\r\n    {\r\n      const auto __len = __str.size();\r\n      auto __alloc = __str._M_get_allocator();\r\n\r\n      auto __ptr = _S_allocate(__alloc, __len + 1);\r\n      _M_destroy(_M_allocated_capacity);\r\n      _M_data(__ptr);\r\n      _M_capacity(__len);\r\n      _M_set_length(__len);\r\n    }\r\n       }\r\n     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());\r\n   }\r\n\r\n this->_M_assign(__str);\r\n return *this;\r\n      }\r\n# 1632 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      assign(basic_string&& __str)\r\n      noexcept(_Alloc_traits::_S_nothrow_move())\r\n"]
[81.357216, "o", "      {\r\n\r\n\r\n return *this = std::move(__str);\r\n      }\r\n# 1656 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      assign(const basic_string& __str, size_type __pos, size_type __n = npos)\r\n"]
[81.357246, "o", "      { return _M_replace(size_type(0), this->size(), __str._M_data()\r\n     + __str._M_check(__pos, \"basic_string::assign\"),\r\n     __str._M_limit(__pos, __n)); }\r\n# 1673 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      assign(const _CharT* __s, size_type __n)\r\n"]
[81.357619, "o", "      {\r\n ;\r\n return _M_replace(size_type(0), this->size(), __s, __n);\r\n      }\r\n# 1690 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      assign(const _CharT* __s)\r\n      {\r\n ;\r\n return _M_replace(size_type(0), this->size(), __s,\r\n     traits_type::length(__s));\r\n      }\r\n# 1708 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      assign(size_type __n, _CharT __c)\r\n      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }\r\n# 1722 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wc++17-extensions\"\r\n      template<class _InputIterator,\r\n        typename = std::_RequireInputIter<_InputIterator>>\r\n\r\n basic_string&\r\n assign(_InputIterator __first, _InputIterator __last)\r\n {\r\n\r\n\r\n\r\n\r\n   if constexpr (__is_one_of<_InputIterator, const_iterator, iterator,\r\n        const _CharT*, _CharT*>::value)\r\n\r\n     {\r\n       ;\r\n       return _M_replace(size_type(0), size(),\r\n    std::__to_address(__first), __last - __first);\r\n     }\r\n   else\r\n     return *this = basic_string(__first, __last, get_allocator());\r\n }\r\n#pragma GCC diagnostic pop\r\n# 1759 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      assign(initializer_list<_CharT> __l)\r\n      {\r\n\r\n\r\n const size_type __n = __l.size();\r\n if (__n > capacity())\r\n   *this = basic_string(__l.begin(), __l.end(), get_allocator());\r\n else\r\n   {\r\n     if (__n)\r\n       _S_copy(_M_data(), __l.begin(), __n);\r\n     _M_set_length(__n);\r\n   }\r\n return *this;\r\n      }\r\n# 1784 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n\r\n _If_sv<_Tp, basic_string&>\r\n assign(const _Tp& __svt)\r\n {\r\n"]
[81.357696, "o", "   __sv_type __sv = __svt;\r\n   return this->assign(__sv.data(), __sv.size());\r\n }\r\n# 1800 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n\r\n _If_sv<_Tp, basic_string&>\r\n assign(const _Tp& __svt, size_type __pos, size_type __n = npos)\r\n {\r\n   __sv_type __sv = __svt;\r\n   return _M_replace(size_type(0), this->size(),\r\n       __sv.data()\r\n       + std::__sv_check(__sv.size(), __pos, \"basic_string::assign\"),\r\n       std::__sv_limit(__sv.size(), __pos, __n));\r\n }\r\n# 1829 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      iterator\r\n      insert(const_iterator __p, size_type __n, _CharT __c)\r\n      {\r\n"]
[81.357724, "o", " ;\r\n const size_type __pos = __p - begin();\r\n this->replace(__p, __p, __n, __c);\r\n return iterator(this->_M_data() + __pos);\r\n      }\r\n# 1872 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<class _InputIterator,\r\n"]
[81.357761, "o", "        typename = std::_RequireInputIter<_InputIterator>>\r\n\r\n iterator\r\n        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)\r\n        {\r\n   ;\r\n"]
[81.357789, "o", "   const size_type __pos = __p - begin();\r\n   this->replace(__p, __p, __beg, __end);\r\n   return iterator(this->_M_data() + __pos);\r\n }\r\n# 1909 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.357826, "o", "     \r\n      iterator\r\n      insert(const_iterator __p, initializer_list<_CharT> __l)\r\n"]
[81.357856, "o", "      { return this->insert(__p, __l.begin(), __l.end()); }\r\n# 1937 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      insert(size_type __pos1, const basic_string& __str)\r\n      { return this->replace(__pos1, size_type(0),\r\n        __str._M_data(), __str.size()); }\r\n"]
[81.357893, "o", "# 1961 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      insert(size_type __pos1, const basic_string& __str,\r\n      size_type __pos2, size_type __n = npos)\r\n      { return this->replace(__pos1, size_type(0), __str._M_data()\r\n"]
[81.357928, "o", "        + __str._M_check(__pos2, \"basic_string::insert\"),\r\n        __str._M_limit(__pos2, __n)); }\r\n# 1985 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      insert(size_type __pos, const _CharT* __s, size_type __n)\r\n      { return this->replace(__pos, size_type(0), __s, __n); }\r\n"]
[81.357964, "o", "# 2005 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      insert(size_type __pos, const _CharT* __s)\r\n      {\r\n ;\r\n return this->replace(__pos, size_type(0), __s,\r\n        traits_type::length(__s));\r\n"]
[81.358, "o", "      }\r\n# 2030 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      insert(size_type __pos, size_type __n, _CharT __c)\r\n      { return _M_replace_aux(_M_check(__pos, \"basic_string::insert\"),\r\n         size_type(0), __n, __c); }\r\n# 2049 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n"]
[81.358033, "o", "      iterator\r\n      insert(__const_iterator __p, _CharT __c)\r\n      {\r\n ;\r\n const size_type __pos = __p - begin();\r\n _M_replace_aux(__pos, size_type(0), size_type(1), __c);\r\n return iterator(_M_data() + __pos);\r\n"]
[81.358072, "o", "      }\r\n# 2066 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n\r\n _If_sv<_Tp, basic_string&>\r\n insert(size_type __pos, const _Tp& __svt)\r\n {\r\n"]
[81.358114, "o", "   __sv_type __sv = __svt;\r\n   return this->insert(__pos, __sv.data(), __sv.size());\r\n }\r\n# 2083 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n\r\n _If_sv<_Tp, basic_string&>\r\n insert(size_type __pos1, const _Tp& __svt,\r\n        size_type __pos2, size_type __n = npos)\r\n {\r\n"]
[81.358155, "o", "   __sv_type __sv = __svt;\r\n   return this->replace(__pos1, size_type(0),\r\n       __sv.data()\r\n       + std::__sv_check(__sv.size(), __pos2, \"basic_string::insert\"),\r\n       std::__sv_limit(__sv.size(), __pos2, __n));\r\n }\r\n# 2112 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n"]
[81.358191, "o", "      erase(size_type __pos = 0, size_type __n = npos)\r\n      {\r\n _M_check(__pos, \"basic_string::erase\");\r\n if (__n == npos)\r\n   this->_M_set_length(__pos);\r\n else if (__n != 0)\r\n   this->_M_erase(__pos, _M_limit(__pos, __n));\r\n return *this;\r\n      }\r\n# 2132 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n"]
[81.358225, "o", "      iterator\r\n      erase(__const_iterator __position)\r\n      {\r\n\r\n                           ;\r\n const size_type __pos = __position - begin();\r\n this->_M_erase(__pos, size_type(1));\r\n"]
[81.358258, "o", " return iterator(_M_data() + __pos);\r\n      }\r\n# 2152 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      iterator\r\n      erase(__const_iterator __first, __const_iterator __last)\r\n      {\r\n\r\n                        ;\r\n"]
[81.358286, "o", "        const size_type __pos = __first - begin();\r\n if (__last == end())\r\n   this->_M_set_length(__pos);\r\n else\r\n   this->_M_erase(__pos, __last - __first);\r\n"]
[81.358323, "o", " return iterator(this->_M_data() + __pos);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n      void\r\n"]
[81.358369, "o", "      pop_back() noexcept\r\n      {\r\n do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(!empty()), false)) std::__glibcxx_assert_fail(); } while (false);\r\n _M_erase(size() - 1, 1);\r\n      }\r\n# 2198 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n"]
[81.35841, "o", "      basic_string&\r\n      replace(size_type __pos, size_type __n, const basic_string& __str)\r\n      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }\r\n# 2221 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      replace(size_type __pos1, size_type __n1, const basic_string& __str,\r\n       size_type __pos2, size_type __n2 = npos)\r\n      { return this->replace(__pos1, __n1, __str._M_data()\r\n"]
[81.358438, "o", "        + __str._M_check(__pos2, \"basic_string::replace\"),\r\n        __str._M_limit(__pos2, __n2)); }\r\n# 2247 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      replace(size_type __pos, size_type __n1, const _CharT* __s,\r\n       size_type __n2)\r\n      {\r\n"]
[81.358467, "o", " ;\r\n return _M_replace(_M_check(__pos, \"basic_string::replace\"),\r\n     _M_limit(__pos, __n1), __s, __n2);\r\n      }\r\n# 2273 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.358503, "o", "     \r\n      basic_string&\r\n      replace(size_type __pos, size_type __n1, const _CharT* __s)\r\n      {\r\n ;\r\n return this->replace(__pos, __n1, __s, traits_type::length(__s));\r\n"]
[81.358531, "o", "      }\r\n# 2298 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)\r\n      { return _M_replace_aux(_M_check(__pos, \"basic_string::replace\"),\r\n"]
[81.358571, "o", "         _M_limit(__pos, __n1), __n2, __c); }\r\n# 2317 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      replace(__const_iterator __i1, __const_iterator __i2,\r\n       const basic_string& __str)\r\n"]
[81.358607, "o", "      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }\r\n# 2338 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      replace(__const_iterator __i1, __const_iterator __i2,\r\n       const _CharT* __s, size_type __n)\r\n      {\r\n\r\n"]
[81.358645, "o", "                      ;\r\n return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);\r\n      }\r\n# 2361 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)\r\n      {\r\n ;\r\n"]
[81.358682, "o", " return this->replace(__i1, __i2, __s, traits_type::length(__s));\r\n      }\r\n# 2383 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      basic_string&\r\n      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,\r\n       _CharT __c)\r\n      {\r\n"]
[81.358716, "o", "\r\n                      ;\r\n return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);\r\n      }\r\n# 2409 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<class _InputIterator,\r\n        typename = std::_RequireInputIter<_InputIterator>>\r\n"]
[81.358751, "o", "\r\n        basic_string&\r\n        replace(const_iterator __i1, const_iterator __i2,\r\n  _InputIterator __k1, _InputIterator __k2)\r\n        {\r\n  \r\n                        ;\r\n   ;\r\n"]
[81.358783, "o", "   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,\r\n        std::__false_type());\r\n }\r\n# 2442 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.358817, "o", "     \r\n      basic_string&\r\n      replace(__const_iterator __i1, __const_iterator __i2,\r\n       _CharT* __k1, _CharT* __k2)\r\n      {\r\n\r\n                      ;\r\n"]
[81.358854, "o", " ;\r\n return this->replace(__i1 - begin(), __i2 - __i1,\r\n        __k1, __k2 - __k1);\r\n      }\r\n\r\n     \r\n      basic_string&\r\n      replace(__const_iterator __i1, __const_iterator __i2,\r\n"]
[81.35889, "o", "       const _CharT* __k1, const _CharT* __k2)\r\n      {\r\n\r\n                      ;\r\n ;\r\n return this->replace(__i1 - begin(), __i2 - __i1,\r\n        __k1, __k2 - __k1);\r\n      }\r\n\r\n     \r\n      basic_string&\r\n"]
[81.358927, "o", "      replace(__const_iterator __i1, __const_iterator __i2,\r\n       iterator __k1, iterator __k2)\r\n      {\r\n\r\n                      ;\r\n ;\r\n return this->replace(__i1 - begin(), __i2 - __i1,\r\n"]
[81.358961, "o", "        __k1.base(), __k2 - __k1);\r\n      }\r\n\r\n     \r\n      basic_string&\r\n      replace(__const_iterator __i1, __const_iterator __i2,\r\n       const_iterator __k1, const_iterator __k2)\r\n      {\r\n\r\n"]
[81.358992, "o", "                      ;\r\n ;\r\n return this->replace(__i1 - begin(), __i2 - __i1,\r\n        __k1.base(), __k2 - __k1);\r\n      }\r\n# 2505 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n"]
[81.359021, "o", "      basic_string& replace(const_iterator __i1, const_iterator __i2,\r\n       initializer_list<_CharT> __l)\r\n      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }\r\n# 2519 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.359052, "o", "      template<typename _Tp>\r\n\r\n _If_sv<_Tp, basic_string&>\r\n replace(size_type __pos, size_type __n, const _Tp& __svt)\r\n {\r\n   __sv_type __sv = __svt;\r\n"]
[81.359097, "o", "   return this->replace(__pos, __n, __sv.data(), __sv.size());\r\n }\r\n# 2537 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n\r\n _If_sv<_Tp, basic_string&>\r\n replace(size_type __pos1, size_type __n1, const _Tp& __svt,\r\n"]
[81.359128, "o", "  size_type __pos2, size_type __n2 = npos)\r\n {\r\n   __sv_type __sv = __svt;\r\n   return this->replace(__pos1, __n1,\r\n       __sv.data()\r\n       + std::__sv_check(__sv.size(), __pos2, \"basic_string::replace\"),\r\n       std::__sv_limit(__sv.size(), __pos2, __n2));\r\n }\r\n# 2559 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n"]
[81.359159, "o", "\r\n _If_sv<_Tp, basic_string&>\r\n replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)\r\n {\r\n   __sv_type __sv = __svt;\r\n   return this->replace(__i1 - begin(), __i2 - __i1, __sv);\r\n"]
[81.359195, "o", " }\r\n\r\n\r\n    private:\r\n      template<class _Integer>\r\n\r\n basic_string&\r\n _M_replace_dispatch(const_iterator __i1, const_iterator __i2,\r\n       _Integer __n, _Integer __val, __true_type)\r\n"]
[81.359229, "o", "        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }\r\n\r\n      template<class _InputIterator>\r\n\r\n basic_string&\r\n _M_replace_dispatch(const_iterator __i1, const_iterator __i2,\r\n       _InputIterator __k1, _InputIterator __k2,\r\n       __false_type);\r\n\r\n"]
[81.359262, "o", "     \r\n      basic_string&\r\n      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\r\n       _CharT __c);\r\n\r\n      __attribute__((__noinline__, __noclone__, __cold__)) void\r\n"]
[81.359299, "o", "      _M_replace_cold(pointer __p, size_type __len1, const _CharT* __s,\r\n        const size_type __len2, const size_type __how_much);\r\n\r\n     \r\n      basic_string&\r\n      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,\r\n   const size_type __len2);\r\n\r\n     \r\n      basic_string&\r\n"]
[81.359334, "o", "      _M_append(const _CharT* __s, size_type __n);\r\n\r\n    public:\r\n# 2616 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n     \r\n      size_type\r\n      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;\r\n# 2627 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.35937, "o", "     \r\n      void\r\n      swap(basic_string& __s) noexcept;\r\n# 2638 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      const _CharT*\r\n      c_str() const noexcept\r\n      { return _M_data(); }\r\n# 2651 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.359398, "o", "      [[__nodiscard__]]\r\n      const _CharT*\r\n      data() const noexcept\r\n      { return _M_data(); }\r\n# 2663 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.359428, "o", "      [[__nodiscard__]]\r\n      _CharT*\r\n      data() noexcept\r\n      { return _M_data(); }\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n"]
[81.359456, "o", "      allocator_type\r\n      get_allocator() const noexcept\r\n      { return _M_get_allocator(); }\r\n# 2689 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n"]
[81.359491, "o", "      size_type\r\n      find(const _CharT* __s, size_type __pos, size_type __n) const\r\n      noexcept;\r\n# 2704 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n"]
[81.359531, "o", "      find(const basic_string& __str, size_type __pos = 0) const\r\n      noexcept\r\n      { return this->find(__str.data(), __pos, __str.size()); }\r\n# 2717 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n [[__nodiscard__]]\r\n"]
[81.359572, "o", " _If_sv<_Tp, size_type>\r\n find(const _Tp& __svt, size_type __pos = 0) const\r\n noexcept(is_same<_Tp, __sv_type>::value)\r\n {\r\n   __sv_type __sv = __svt;\r\n   return this->find(__sv.data(), __pos, __sv.size());\r\n }\r\n# 2738 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.359605, "o", "      [[__nodiscard__]]\r\n      size_type\r\n      find(const _CharT* __s, size_type __pos = 0) const noexcept\r\n      {\r\n ;\r\n return this->find(__s, __pos, traits_type::length(__s));\r\n      }\r\n# 2756 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n"]
[81.359635, "o", "      find(_CharT __c, size_type __pos = 0) const noexcept;\r\n# 2770 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      rfind(const basic_string& __str, size_type __pos = npos) const\r\n"]
[81.359672, "o", "      noexcept\r\n      { return this->rfind(__str.data(), __pos, __str.size()); }\r\n# 2783 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n [[__nodiscard__]]\r\n _If_sv<_Tp, size_type>\r\n"]
[81.359707, "o", " rfind(const _Tp& __svt, size_type __pos = npos) const\r\n noexcept(is_same<_Tp, __sv_type>::value)\r\n {\r\n   __sv_type __sv = __svt;\r\n   return this->rfind(__sv.data(), __pos, __sv.size());\r\n }\r\n# 2806 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n"]
[81.35974, "o", "      size_type\r\n      rfind(const _CharT* __s, size_type __pos, size_type __n) const\r\n      noexcept;\r\n# 2821 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      rfind(const _CharT* __s, size_type __pos = npos) const\r\n"]
[81.359778, "o", "      {\r\n ;\r\n return this->rfind(__s, __pos, traits_type::length(__s));\r\n      }\r\n# 2839 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n"]
[81.359813, "o", "      rfind(_CharT __c, size_type __pos = npos) const noexcept;\r\n# 2854 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_first_of(const basic_string& __str, size_type __pos = 0) const\r\n      noexcept\r\n"]
[81.359847, "o", "      { return this->find_first_of(__str.data(), __pos, __str.size()); }\r\n# 2868 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n [[__nodiscard__]]\r\n _If_sv<_Tp, size_type>\r\n find_first_of(const _Tp& __svt, size_type __pos = 0) const\r\n noexcept(is_same<_Tp, __sv_type>::value)\r\n {\r\n   __sv_type __sv = __svt;\r\n"]
[81.359884, "o", "   return this->find_first_of(__sv.data(), __pos, __sv.size());\r\n }\r\n# 2891 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\r\n"]
[81.359921, "o", "      noexcept;\r\n# 2906 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_first_of(const _CharT* __s, size_type __pos = 0) const\r\n      noexcept\r\n      {\r\n ;\r\n return this->find_first_of(__s, __pos, traits_type::length(__s));\r\n"]
[81.359956, "o", "      }\r\n# 2927 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_first_of(_CharT __c, size_type __pos = 0) const noexcept\r\n      { return this->find(__c, __pos); }\r\n# 2943 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.359989, "o", "      [[__nodiscard__]]\r\n      size_type\r\n      find_last_of(const basic_string& __str, size_type __pos = npos) const\r\n      noexcept\r\n      { return this->find_last_of(__str.data(), __pos, __str.size()); }\r\n# 2957 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.360022, "o", "      template<typename _Tp>\r\n [[__nodiscard__]]\r\n _If_sv<_Tp, size_type>\r\n find_last_of(const _Tp& __svt, size_type __pos = npos) const\r\n noexcept(is_same<_Tp, __sv_type>::value)\r\n {\r\n"]
[81.360064, "o", "   __sv_type __sv = __svt;\r\n   return this->find_last_of(__sv.data(), __pos, __sv.size());\r\n }\r\n# 2980 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\r\n"]
[81.360097, "o", "      noexcept;\r\n# 2995 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_last_of(const _CharT* __s, size_type __pos = npos) const\r\n      noexcept\r\n      {\r\n ;\r\n return this->find_last_of(__s, __pos, traits_type::length(__s));\r\n"]
[81.360129, "o", "      }\r\n# 3016 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_last_of(_CharT __c, size_type __pos = npos) const noexcept\r\n      { return this->rfind(__c, __pos); }\r\n# 3031 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.360162, "o", "      [[__nodiscard__]]\r\n      size_type\r\n      find_first_not_of(const basic_string& __str, size_type __pos = 0) const\r\n      noexcept\r\n"]
[81.360196, "o", "      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }\r\n# 3045 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n [[__nodiscard__]]\r\n _If_sv<_Tp, size_type>\r\n find_first_not_of(const _Tp& __svt, size_type __pos = 0) const\r\n noexcept(is_same<_Tp, __sv_type>::value)\r\n {\r\n"]
[81.360231, "o", "   __sv_type __sv = __svt;\r\n   return this->find_first_not_of(__sv.data(), __pos, __sv.size());\r\n }\r\n# 3068 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n"]
[81.360265, "o", "      find_first_not_of(const _CharT* __s, size_type __pos,\r\n   size_type __n) const noexcept;\r\n# 3083 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_first_not_of(const _CharT* __s, size_type __pos = 0) const\r\n"]
[81.3603, "o", "      noexcept\r\n      {\r\n ;\r\n return this->find_first_not_of(__s, __pos, traits_type::length(__s));\r\n      }\r\n# 3102 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n"]
[81.360328, "o", "      find_first_not_of(_CharT __c, size_type __pos = 0) const\r\n      noexcept;\r\n# 3118 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_last_not_of(const basic_string& __str, size_type __pos = npos) const\r\n"]
[81.362343, "o", "      noexcept\r\n      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }\r\n# 3132 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n [[__nodiscard__]]\r\n _If_sv<_Tp, size_type>\r\n find_last_not_of(const _Tp& __svt, size_type __pos = npos) const\r\n noexcept(is_same<_Tp, __sv_type>::value)\r\n {\r\n   __sv_type __sv = __svt;\r\n   return this->find_last_not_of(__sv.data(), __pos, __sv.size());\r\n }\r\n# 3155 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_last_not_of(const _CharT* __s, size_type __pos,\r\n         size_type __n) const noexcept;\r\n# 3170 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_last_not_of(const _CharT* __s, size_type __pos = npos) const\r\n      noexcept\r\n      {\r\n ;\r\n return this->find_last_not_of(__s, __pos, traits_type::length(__s));\r\n      }\r\n# 3189 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      size_type\r\n      find_last_not_of(_CharT __c, size_type __pos = npos) const\r\n      noexcept;\r\n# 3206 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      basic_string\r\n      substr(size_type __pos = 0, size_type __n = npos) const\r\n      { return basic_string(*this,\r\n       _M_check(__pos, \"basic_string::substr\"), __n); }\r\n# 3226 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      int\r\n      compare(const basic_string& __str) const\r\n      {\r\n const size_type __size = this->size();\r\n const size_type __osize = __str.size();\r\n const size_type __len = std::min(__size, __osize);\r\n\r\n int __r = traits_type::compare(_M_data(), __str.data(), __len);\r\n if (!__r)\r\n   __r = _S_compare(__size, __osize);\r\n return __r;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      template<typename _Tp>\r\n [[__nodiscard__]]\r\n _If_sv<_Tp, int>\r\n compare(const _Tp& __svt) const\r\n noexcept(is_same<_Tp, __sv_type>::value)\r\n {\r\n   __sv_type __sv = __svt;\r\n   const size_type __size = this->size();\r\n   const size_type __osize = __sv.size();\r\n   const size_type __len = std::min(__size, __osize);\r\n\r\n   int __r = traits_type::compare(_M_data(), __sv.data(), __len);\r\n   if (!__r)\r\n     __r = _S_compare(__size, __osize);\r\n   return __r;\r\n }\r\n# 3271 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n [[__nodiscard__]]\r\n _If_sv<_Tp, int>\r\n compare(size_type __pos, size_type __n, const _Tp& __svt) const\r\n noexcept(is_same<_Tp, __sv_type>::value)\r\n {\r\n   __sv_type __sv = __svt;\r\n   return __sv_type(*this).substr(__pos, __n).compare(__sv);\r\n }\r\n# 3291 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename _Tp>\r\n [[__nodiscard__]]\r\n _If_sv<_Tp, int>\r\n compare(size_type __pos1, size_type __n1, const _Tp& __svt,\r\n  size_type __pos2, size_type __n2 = npos) const\r\n noexcept(is_same<_Tp, __sv_type>::value)\r\n {\r\n   __sv_type __sv = __svt;\r\n   return __sv_type(*this)\r\n     .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));\r\n }\r\n# 3323 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      int\r\n      compare(size_type __pos, size_type __n, const basic_string& __str) const\r\n      {\r\n _M_check(__pos, \"basic_string::compare\");\r\n __n = _M_limit(__pos, __n);\r\n const size_type __osize = __str.size();\r\n const size_type __len = std::min(__n, __osize);\r\n int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);\r\n if (!__r)\r\n   __r = _S_compare(__n, __osize);\r\n return __r;\r\n      }\r\n# 3360 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      int\r\n      compare(size_type __pos1, size_type __n1, const basic_string& __str,\r\n       size_type __pos2, size_type __n2 = npos) const\r\n      {\r\n _M_check(__pos1, \"basic_string::compare\");\r\n __str._M_check(__pos2, \"basic_string::compare\");\r\n __n1 = _M_limit(__pos1, __n1);\r\n __n2 = __str._M_limit(__pos2, __n2);\r\n const size_type __len = std::min(__n1, __n2);\r\n int __r = traits_type::compare(_M_data() + __pos1,\r\n           __str.data() + __pos2, __len);\r\n if (!__r)\r\n   __r = _S_compare(__n1, __n2);\r\n return __r;\r\n      }\r\n# 3391 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      int\r\n      compare(const _CharT* __s) const noexcept\r\n      {\r\n ;\r\n const size_type __size = this->size();\r\n const size_type __osize = traits_type::length(__s);\r\n const size_type __len = std::min(__size, __osize);\r\n int __r = traits_type::compare(_M_data(), __s, __len);\r\n if (!__r)\r\n   __r = _S_compare(__size, __osize);\r\n return __r;\r\n      }\r\n# 3426 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      int\r\n      compare(size_type __pos, size_type __n1, const _CharT* __s) const\r\n      {\r\n ;\r\n _M_check(__pos, \"basic_string::compare\");\r\n __n1 = _M_limit(__pos, __n1);\r\n const size_type __osize = traits_type::length(__s);\r\n const size_type __len = std::min(__n1, __osize);\r\n int __r = traits_type::compare(_M_data() + __pos, __s, __len);\r\n if (!__r)\r\n   __r = _S_compare(__n1, __osize);\r\n return __r;\r\n      }\r\n# 3465 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      [[__nodiscard__]]\r\n      int\r\n      compare(size_type __pos, size_type __n1, const _CharT* __s,\r\n       size_type __n2) const\r\n      {\r\n ;\r\n _M_check(__pos, \"basic_string::compare\");\r\n __n1 = _M_limit(__pos, __n1);\r\n const size_type __len = std::min(__n1, __n2);\r\n int __r = traits_type::compare(_M_data() + __pos, __s, __len);\r\n if (!__r)\r\n   __r = _S_compare(__n1, __n2);\r\n return __r;\r\n      }\r\n# 3530 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n      template<typename, typename, typename> friend class basic_stringbuf;\r\n    };\r\n}\r\n\r\n}\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\nnamespace __cxx11 {\r\n  template<typename _InputIterator, typename _CharT\r\n      = typename iterator_traits<_InputIterator>::value_type,\r\n    typename _Allocator = allocator<_CharT>,\r\n    typename = _RequireInputIter<_InputIterator>,\r\n    typename = _RequireAllocator<_Allocator>>\r\n    basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())\r\n      -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits,\r\n    typename _Allocator = allocator<_CharT>,\r\n    typename = _RequireAllocator<_Allocator>>\r\n    basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())\r\n      -> basic_string<_CharT, _Traits, _Allocator>;\r\n\r\n  template<typename _CharT, typename _Traits,\r\n    typename _Allocator = allocator<_CharT>,\r\n    typename = _RequireAllocator<_Allocator>>\r\n    basic_string(basic_string_view<_CharT, _Traits>,\r\n   typename basic_string<_CharT, _Traits, _Allocator>::size_type,\r\n   typename basic_string<_CharT, _Traits, _Allocator>::size_type,\r\n   const _Allocator& = _Allocator())\r\n      -> basic_string<_CharT, _Traits, _Allocator>;\r\n}\r\n\r\n\r\n  template<typename _Str>\r\n   \r\n    inline _Str\r\n    __str_concat(typename _Str::value_type const* __lhs,\r\n   typename _Str::size_type __lhs_len,\r\n   typename _Str::value_type const* __rhs,\r\n   typename _Str::size_type __rhs_len,\r\n   typename _Str::allocator_type const& __a)\r\n    {\r\n      typedef typename _Str::allocator_type allocator_type;\r\n      typedef __gnu_cxx::__alloc_traits<allocator_type> _Alloc_traits;\r\n      _Str __str(_Alloc_traits::_S_select_on_copy(__a));\r\n      __str.reserve(__lhs_len + __rhs_len);\r\n      __str.append(__lhs, __lhs_len);\r\n      __str.append(__rhs, __rhs_len);\r\n      return __str;\r\n    }\r\n# 3595 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline basic_string<_CharT, _Traits, _Alloc>\r\n    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    {\r\n      typedef basic_string<_CharT, _Traits, _Alloc> _Str;\r\n      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),\r\n         __rhs.c_str(), __rhs.size(),\r\n         __lhs.get_allocator());\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline basic_string<_CharT,_Traits,_Alloc>\r\n    operator+(const _CharT* __lhs,\r\n       const basic_string<_CharT,_Traits,_Alloc>& __rhs)\r\n    {\r\n      ;\r\n      typedef basic_string<_CharT, _Traits, _Alloc> _Str;\r\n      return std::__str_concat<_Str>(__lhs, _Traits::length(__lhs),\r\n         __rhs.c_str(), __rhs.size(),\r\n         __rhs.get_allocator());\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline basic_string<_CharT,_Traits,_Alloc>\r\n    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs)\r\n    {\r\n"]
[81.362457, "o", "      typedef basic_string<_CharT, _Traits, _Alloc> _Str;\r\n      return std::__str_concat<_Str>(__builtin_addressof(__lhs), 1,\r\n         __rhs.c_str(), __rhs.size(),\r\n         __rhs.get_allocator());\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline basic_string<_CharT, _Traits, _Alloc>\r\n    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n       const _CharT* __rhs)\r\n    {\r\n      ;\r\n      typedef basic_string<_CharT, _Traits, _Alloc> _Str;\r\n      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),\r\n         __rhs, _Traits::length(__rhs),\r\n         __lhs.get_allocator());\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline basic_string<_CharT, _Traits, _Alloc>\r\n    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)\r\n    {\r\n      typedef basic_string<_CharT, _Traits, _Alloc> _Str;\r\n      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),\r\n         __builtin_addressof(__rhs), 1,\r\n         __lhs.get_allocator());\r\n    }\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline basic_string<_CharT, _Traits, _Alloc>\r\n    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\r\n       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    { return std::move(__lhs.append(__rhs)); }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    inline basic_string<_CharT, _Traits, _Alloc>\r\n    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n       basic_string<_CharT, _Traits, _Alloc>&& __rhs)\r\n    { return std::move(__rhs.insert(0, __lhs)); }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline basic_string<_CharT, _Traits, _Alloc>\r\n    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\r\n       basic_string<_CharT, _Traits, _Alloc>&& __rhs)\r\n    {\r\n\r\n      using _Alloc_traits = allocator_traits<_Alloc>;\r\n      bool __use_rhs = false;\r\n      if constexpr (typename _Alloc_traits::is_always_equal{})\r\n __use_rhs = true;\r\n      else if (__lhs.get_allocator() == __rhs.get_allocator())\r\n __use_rhs = true;\r\n      if (__use_rhs)\r\n\r\n {\r\n   const auto __size = __lhs.size() + __rhs.size();\r\n   if (__size > __lhs.capacity() && __size <= __rhs.capacity())\r\n     return std::move(__rhs.insert(0, __lhs));\r\n }\r\n      return std::move(__lhs.append(__rhs));\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]] [[__nodiscard__]]\r\n    inline basic_string<_CharT, _Traits, _Alloc>\r\n    operator+(const _CharT* __lhs,\r\n       basic_string<_CharT, _Traits, _Alloc>&& __rhs)\r\n    { return std::move(__rhs.insert(0, __lhs)); }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline basic_string<_CharT, _Traits, _Alloc>\r\n    operator+(_CharT __lhs,\r\n       basic_string<_CharT, _Traits, _Alloc>&& __rhs)\r\n    { return std::move(__rhs.insert(0, 1, __lhs)); }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline basic_string<_CharT, _Traits, _Alloc>\r\n    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\r\n       const _CharT* __rhs)\r\n    { return std::move(__lhs.append(__rhs)); }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline basic_string<_CharT, _Traits, _Alloc>\r\n    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\r\n       _CharT __rhs)\r\n    { return std::move(__lhs.append(1, __rhs)); }\r\n# 3752 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n        const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    noexcept\r\n    {\r\n      return __lhs.size() == __rhs.size()\r\n        && !_Traits::compare(__lhs.data(), __rhs.data(), __lhs.size());\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n        const _CharT* __rhs)\r\n    {\r\n      return __lhs.size() == _Traits::length(__rhs)\r\n"]
[81.362545, "o", "        && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());\r\n    }\r\n# 3816 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator==(const _CharT* __lhs,\r\n        const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    { return __rhs == __lhs; }\r\n# 3830 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n        const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    noexcept\r\n    { return !(__lhs == __rhs); }\r\n\r\n\r\n\r\n\r\n"]
[81.362614, "o", "\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator!=(const _CharT* __lhs,\r\n        const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    { return !(__rhs == __lhs); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n        const _CharT* __rhs)\r\n    { return !(__lhs == __rhs); }\r\n# 3871 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.362695, "o", "  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    noexcept\r\n    { return __lhs.compare(__rhs) < 0; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n       const _CharT* __rhs)\r\n    { return __lhs.compare(__rhs) < 0; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.362778, "o", "\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator<(const _CharT* __lhs,\r\n       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    { return __rhs.compare(__lhs) > 0; }\r\n# 3912 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    noexcept\r\n    { return __lhs.compare(__rhs) > 0; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n"]
[81.36286, "o", "    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n       const _CharT* __rhs)\r\n    { return __lhs.compare(__rhs) > 0; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator>(const _CharT* __lhs,\r\n       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    { return __rhs.compare(__lhs) < 0; }\r\n# 3953 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n        const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    noexcept\r\n"]
[81.3629, "o", "    { return __lhs.compare(__rhs) <= 0; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n        const _CharT* __rhs)\r\n    { return __lhs.compare(__rhs) <= 0; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.362936, "o", "  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator<=(const _CharT* __lhs,\r\n        const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    { return __rhs.compare(__lhs) >= 0; }\r\n# 3994 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.362969, "o", "  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n        const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    noexcept\r\n    { return __lhs.compare(__rhs) >= 0; }\r\n\r\n"]
[81.363011, "o", "\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n"]
[81.363041, "o", "        const _CharT* __rhs)\r\n    { return __lhs.compare(__rhs) >= 0; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n"]
[81.363076, "o", "    operator>=(const _CharT* __lhs,\r\n      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    { return __rhs.compare(__lhs) <= 0; }\r\n# 4036 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    inline void\r\n"]
[81.363105, "o", "    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,\r\n  basic_string<_CharT, _Traits, _Alloc>& __rhs)\r\n    noexcept(noexcept(__lhs.swap(__rhs)))\r\n    { __lhs.swap(__rhs); }\r\n"]
[81.36314, "o", "# 4057 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    basic_istream<_CharT, _Traits>&\r\n    operator>>(basic_istream<_CharT, _Traits>& __is,\r\n        basic_string<_CharT, _Traits, _Alloc>& __str);\r\n\r\n  template<>\r\n"]
[81.363176, "o", "    basic_istream<char>&\r\n    operator>>(basic_istream<char>& __is, basic_string<char>& __str);\r\n# 4075 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    inline basic_ostream<_CharT, _Traits>&\r\n    operator<<(basic_ostream<_CharT, _Traits>& __os,\r\n"]
[81.363212, "o", "        const basic_string<_CharT, _Traits, _Alloc>& __str)\r\n    {\r\n\r\n\r\n      return __ostream_insert(__os, __str.data(), __str.size());\r\n    }\r\n# 4098 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n"]
[81.363255, "o", "    basic_istream<_CharT, _Traits>&\r\n    getline(basic_istream<_CharT, _Traits>& __is,\r\n     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);\r\n# 4115 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    inline basic_istream<_CharT, _Traits>&\r\n    getline(basic_istream<_CharT, _Traits>& __is,\r\n"]
[81.363294, "o", "     basic_string<_CharT, _Traits, _Alloc>& __str)\r\n    { return std::getline(__is, __str, __is.widen('\\n')); }\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    inline basic_istream<_CharT, _Traits>&\r\n    getline(basic_istream<_CharT, _Traits>&& __is,\r\n"]
[81.36333, "o", "     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)\r\n    { return std::getline(__is, __str, __delim); }\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    inline basic_istream<_CharT, _Traits>&\r\n    getline(basic_istream<_CharT, _Traits>&& __is,\r\n     basic_string<_CharT, _Traits, _Alloc>& __str)\r\n    { return std::getline(__is, __str); }\r\n\r\n\r\n"]
[81.363361, "o", "  template<>\r\n    basic_istream<char>&\r\n    getline(basic_istream<char>& __in, basic_string<char>& __str,\r\n     char __delim);\r\n\r\n\r\n  template<>\r\n    basic_istream<wchar_t>&\r\n"]
[81.363391, "o", "    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,\r\n     wchar_t __delim);\r\n\r\n\r\n\r\n"]
[81.363637, "o", "}\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/ext/string_conversions.h\" 1 3\r\n# 32 \"/usr/include/c++/14.2.1/ext/string_conversions.h\" 3\r\n       \r\n# 33 \"/usr/include/c++/14.2.1/ext/string_conversions.h\" 3\r\n# 43 \"/usr/include/c++/14.2.1/ext/string_conversions.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/cstdlib\" 1 3\r\n# 39 \"/usr/include/c++/14.2.1/cstdlib\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/cstdlib\" 3\r\n"]
[81.36387, "o", "# 79 \"/usr/include/c++/14.2.1/cstdlib\" 3\r\n# 1 \"/usr/include/stdlib.h\" 1 3 4\r\n# 26 \"/usr/include/stdlib.h\" 3 4\r\n# 1 \"/usr/include/bits/libc-header-start.h\" 1 3 4\r\n# 27 \"/usr/include/stdlib.h\" 2 3 4\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 1 3 4\r\n"]
[81.36414, "o", "# 33 \"/usr/include/stdlib.h\" 2 3 4\r\n\r\n"]
[81.364323, "o", "extern \"C\" {\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/bits/waitflags.h\" 1 3 4\r\n# 41 \"/usr/include/stdlib.h\" 2 3 4\r\n"]
[81.364422, "o", "# 1 \"/usr/include/bits/waitstatus.h\" 1 3 4\r\n"]
[81.364463, "o", "# 42 \"/usr/include/stdlib.h\" 2 3 4\r\n# 59 \"/usr/include/stdlib.h\" 3 4\r\ntypedef struct\r\n  {\r\n    int quot;\r\n"]
[81.364493, "o", "    int rem;\r\n  } div_t;\r\n\r\n\r\n\r\ntypedef struct\r\n  {\r\n    long int quot;\r\n    long int rem;\r\n"]
[81.364525, "o", "  } ldiv_t;\r\n\r\n\r\n\r\n\r\n\r\n__extension__ typedef struct\r\n  {\r\n    long long int quot;\r\n    long long int rem;\r\n"]
[81.364564, "o", "  } lldiv_t;\r\n# 98 \"/usr/include/stdlib.h\" 3 4\r\nextern size_t __ctype_get_mb_cur_max (void) noexcept (true) ;\r\n\r\n"]
[81.364595, "o", "\r\n\r\nextern double atof (const char *__nptr)\r\n     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;\r\n\r\nextern int atoi (const char *__nptr)\r\n"]
[81.364632, "o", "     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;\r\n\r\nextern long int atol (const char *__nptr)\r\n"]
[81.364664, "o", "     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;\r\n\r\n\r\n\r\n__extension__ extern long long int atoll (const char *__nptr)\r\n     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;\r\n\r\n\r\n\r\n"]
[81.364694, "o", "extern double strtod (const char *__restrict __nptr,\r\n        char **__restrict __endptr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n"]
[81.364985, "o", "extern float strtof (const char *__restrict __nptr,\r\n       char **__restrict __endptr) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\nextern long double strtold (const char *__restrict __nptr,\r\n       char **__restrict __endptr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n# 141 \"/usr/include/stdlib.h\" 3 4\r\nextern _Float32 strtof32 (const char *__restrict __nptr,\r\n     char **__restrict __endptr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern _Float64 strtof64 (const char *__restrict __nptr,\r\n     char **__restrict __endptr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern _Float128 strtof128 (const char *__restrict __nptr,\r\n       char **__restrict __endptr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern _Float32x strtof32x (const char *__restrict __nptr,\r\n       char **__restrict __endptr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern _Float64x strtof64x (const char *__restrict __nptr,\r\n       char **__restrict __endptr)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n# 177 \"/usr/include/stdlib.h\" 3 4\r\nextern long int strtol (const char *__restrict __nptr,\r\n   char **__restrict __endptr, int __base)\r\n"]
[81.365027, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\nextern unsigned long int strtoul (const char *__restrict __nptr,\r\n      char **__restrict __endptr, int __base)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n__extension__\r\nextern long long int strtoq (const char *__restrict __nptr,\r\n        char **__restrict __endptr, int __base)\r\n"]
[81.365062, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n__extension__\r\nextern unsigned long long int strtouq (const char *__restrict __nptr,\r\n           char **__restrict __endptr, int __base)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n"]
[81.365091, "o", "\r\n\r\n\r\n__extension__\r\nextern long long int strtoll (const char *__restrict __nptr,\r\n         char **__restrict __endptr, int __base)\r\n"]
[81.365128, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n__extension__\r\nextern unsigned long long int strtoull (const char *__restrict __nptr,\r\n     char **__restrict __endptr, int __base)\r\n"]
[81.365157, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.36519, "o", "extern long int strtol (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_strtol\")\r\n\r\n\r\n"]
[81.365222, "o", "     __attribute__ ((__nonnull__ (1)));\r\nextern unsigned long int strtoul (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_strtoul\")\r\n\r\n\r\n\r\n"]
[81.365251, "o", "     __attribute__ ((__nonnull__ (1)));\r\n\r\n__extension__\r\n"]
[81.365283, "o", "extern long long int strtoq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_strtoll\")\r\n\r\n\r\n     __attribute__ ((__nonnull__ (1)));\r\n__extension__\r\n"]
[81.365485, "o", "extern unsigned long long int strtouq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_strtoull\")\r\n\r\n\r\n\r\n     __attribute__ ((__nonnull__ (1)));\r\n\r\n__extension__\r\nextern long long int strtoll (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_strtoll\")\r\n\r\n\r\n     __attribute__ ((__nonnull__ (1)));\r\n__extension__\r\nextern unsigned long long int strtoull (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ (\"\" \"__isoc23_strtoull\")\r\n\r\n\r\n\r\n     __attribute__ ((__nonnull__ (1)));\r\n# 278 \"/usr/include/stdlib.h\" 3 4\r\nextern int strfromd (char *__dest, size_t __size, const char *__format,\r\n       double __f)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n\r\n"]
[81.365515, "o", "extern int strfromf (char *__dest, size_t __size, const char *__format,\r\n       float __f)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n\r\n"]
[81.365662, "o", "extern int strfroml (char *__dest, size_t __size, const char *__format,\r\n       long double __f)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n# 298 \"/usr/include/stdlib.h\" 3 4\r\nextern int strfromf32 (char *__dest, size_t __size, const char * __format,\r\n         _Float32 __f)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n\r\n\r\n\r\nextern int strfromf64 (char *__dest, size_t __size, const char * __format,\r\n         _Float64 __f)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n\r\n\r\n\r\nextern int strfromf128 (char *__dest, size_t __size, const char * __format,\r\n   _Float128 __f)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n"]
[81.365696, "o", "\r\n\r\n\r\nextern int strfromf32x (char *__dest, size_t __size, const char * __format,\r\n   _Float32x __f)\r\n"]
[81.365729, "o", "     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n\r\n\r\n\r\nextern int strfromf64x (char *__dest, size_t __size, const char * __format,\r\n   _Float64x __f)\r\n"]
[81.365764, "o", "     noexcept (true) __attribute__ ((__nonnull__ (3)));\r\n# 340 \"/usr/include/stdlib.h\" 3 4\r\nextern long int strtol_l (const char *__restrict __nptr,\r\n     char **__restrict __endptr, int __base,\r\n"]
[81.365798, "o", "     locale_t __loc) noexcept (true) __attribute__ ((__nonnull__ (1, 4)));\r\n\r\nextern unsigned long int strtoul_l (const char *__restrict __nptr,\r\n        char **__restrict __endptr,\r\n        int __base, locale_t __loc)\r\n"]
[81.365826, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));\r\n\r\n__extension__\r\nextern long long int strtoll_l (const char *__restrict __nptr,\r\n    char **__restrict __endptr, int __base,\r\n    locale_t __loc)\r\n"]
[81.365858, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));\r\n\r\n__extension__\r\nextern unsigned long long int strtoull_l (const char *__restrict __nptr,\r\n       char **__restrict __endptr,\r\n"]
[81.365891, "o", "       int __base, locale_t __loc)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.3662, "o", "extern long int strtol_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ (\"\" \"__isoc23_strtol_l\")\r\n\r\n\r\n\r\n     __attribute__ ((__nonnull__ (1, 4)));\r\nextern unsigned long int strtoul_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ (\"\" \"__isoc23_strtoul_l\")\r\n\r\n\r\n\r\n\r\n     __attribute__ ((__nonnull__ (1, 4)));\r\n__extension__\r\nextern long long int strtoll_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ (\"\" \"__isoc23_strtoll_l\")\r\n\r\n\r\n\r\n\r\n     __attribute__ ((__nonnull__ (1, 4)));\r\n__extension__\r\nextern unsigned long long int strtoull_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ (\"\" \"__isoc23_strtoull_l\")\r\n\r\n\r\n\r\n\r\n     __attribute__ ((__nonnull__ (1, 4)));\r\n# 415 \"/usr/include/stdlib.h\" 3 4\r\nextern double strtod_l (const char *__restrict __nptr,\r\n   char **__restrict __endptr, locale_t __loc)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n\r\nextern float strtof_l (const char *__restrict __nptr,\r\n         char **__restrict __endptr, locale_t __loc)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n\r\nextern long double strtold_l (const char *__restrict __nptr,\r\n         char **__restrict __endptr,\r\n         locale_t __loc)\r\n"]
[81.366239, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n# 436 \"/usr/include/stdlib.h\" 3 4\r\nextern _Float32 strtof32_l (const char *__restrict __nptr,\r\n       char **__restrict __endptr,\r\n       locale_t __loc)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n\r\n\r\n\r\n"]
[81.366269, "o", "extern _Float64 strtof64_l (const char *__restrict __nptr,\r\n       char **__restrict __endptr,\r\n       locale_t __loc)\r\n"]
[81.36639, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n\r\n\r\n\r\nextern _Float128 strtof128_l (const char *__restrict __nptr,\r\n         char **__restrict __endptr,\r\n         locale_t __loc)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n\r\n\r\n\r\nextern _Float32x strtof32x_l (const char *__restrict __nptr,\r\n         char **__restrict __endptr,\r\n         locale_t __loc)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n\r\n\r\n\r\nextern _Float64x strtof64x_l (const char *__restrict __nptr,\r\n         char **__restrict __endptr,\r\n         locale_t __loc)\r\n"]
[81.366421, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));\r\n# 505 \"/usr/include/stdlib.h\" 3 4\r\nextern char *l64a (long int __n) noexcept (true) ;\r\n\r\n\r\nextern long int a64l (const char *__s)\r\n"]
[81.36658, "o", "     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/sys/types.h\" 1 3 4\r\n# 27 \"/usr/include/sys/types.h\" 3 4\r\n"]
[81.366621, "o", "extern \"C\" {\r\n\r\n\r\n\r\n\r\n\r\ntypedef __u_char u_char;\r\ntypedef __u_short u_short;\r\ntypedef __u_int u_int;\r\ntypedef __u_long u_long;\r\ntypedef __quad_t quad_t;\r\ntypedef __u_quad_t u_quad_t;\r\n"]
[81.366655, "o", "typedef __fsid_t fsid_t;\r\n\r\n\r\ntypedef __loff_t loff_t;\r\n\r\n\r\n\r\n\r\ntypedef __ino_t ino_t;\r\n\r\n\r\n\r\n\r\n"]
[81.366684, "o", "\r\n\r\ntypedef __ino64_t ino64_t;\r\n\r\n\r\n\r\n\r\ntypedef __dev_t dev_t;\r\n\r\n\r\n\r\n"]
[81.366726, "o", "\r\ntypedef __gid_t gid_t;\r\n\r\n\r\n\r\n\r\ntypedef __mode_t mode_t;\r\n\r\n\r\n\r\n\r\n"]
[81.36676, "o", "typedef __nlink_t nlink_t;\r\n\r\n\r\n\r\n\r\ntypedef __uid_t uid_t;\r\n\r\n\r\n\r\n\r\n\r\ntypedef __off_t off_t;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.366793, "o", "typedef __off64_t off64_t;\r\n# 103 \"/usr/include/sys/types.h\" 3 4\r\ntypedef __id_t id_t;\r\n\r\n\r\n\r\n\r\n"]
[81.366825, "o", "typedef __ssize_t ssize_t;\r\n\r\n\r\n\r\n\r\n\r\ntypedef __daddr_t daddr_t;\r\ntypedef __caddr_t caddr_t;\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.366856, "o", "typedef __key_t key_t;\r\n# 134 \"/usr/include/sys/types.h\" 3 4\r\ntypedef __useconds_t useconds_t;\r\n\r\n\r\n\r\n"]
[81.367059, "o", "typedef __suseconds_t suseconds_t;\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 1 3 4\r\n"]
[81.367201, "o", "# 145 \"/usr/include/sys/types.h\" 2 3 4\r\n\r\n\r\n\r\ntypedef unsigned long int ulong;\r\ntypedef unsigned short int ushort;\r\n"]
[81.367413, "o", "typedef unsigned int uint;\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/bits/stdint-intn.h\" 1 3 4\r\n# 24 \"/usr/include/bits/stdint-intn.h\" 3 4\r\n"]
[81.367447, "o", "typedef __int8_t int8_t;\r\ntypedef __int16_t int16_t;\r\ntypedef __int32_t int32_t;\r\ntypedef __int64_t int64_t;\r\n# 156 \"/usr/include/sys/types.h\" 2 3 4\r\n\r\n\r\ntypedef __uint8_t u_int8_t;\r\ntypedef __uint16_t u_int16_t;\r\ntypedef __uint32_t u_int32_t;\r\ntypedef __uint64_t u_int64_t;\r\n\r\n"]
[81.367473, "o", "\r\n"]
[81.36763, "o", "typedef int register_t __attribute__ ((__mode__ (__word__)));\r\n# 176 \"/usr/include/sys/types.h\" 3 4\r\n# 1 \"/usr/include/endian.h\" 1 3 4\r\n"]
[81.367757, "o", "# 35 \"/usr/include/endian.h\" 3 4\r\n# 1 \"/usr/include/bits/byteswap.h\" 1 3 4\r\n"]
[81.367795, "o", "# 33 \"/usr/include/bits/byteswap.h\" 3 4\r\nstatic __inline __uint16_t\r\n__bswap_16 (__uint16_t __bsx)\r\n{\r\n\r\n  return __builtin_bswap16 (__bsx);\r\n\r\n"]
[81.367829, "o", "\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nstatic __inline __uint32_t\r\n__bswap_32 (__uint32_t __bsx)\r\n"]
[81.36786, "o", "{\r\n\r\n  return __builtin_bswap32 (__bsx);\r\n\r\n\r\n\r\n"]
[81.3679, "o", "}\r\n# 69 \"/usr/include/bits/byteswap.h\" 3 4\r\n__extension__ static __inline __uint64_t\r\n__bswap_64 (__uint64_t __bsx)\r\n"]
[81.36793, "o", "{\r\n\r\n  return __builtin_bswap64 (__bsx);\r\n\r\n\r\n\r\n}\r\n# 36 \"/usr/include/endian.h\" 2 3 4\r\n"]
[81.368138, "o", "# 1 \"/usr/include/bits/uintn-identity.h\" 1 3 4\r\n# 32 \"/usr/include/bits/uintn-identity.h\" 3 4\r\nstatic __inline __uint16_t\r\n__uint16_identity (__uint16_t __x)\r\n{\r\n  return __x;\r\n}\r\n\r\nstatic __inline __uint32_t\r\n__uint32_identity (__uint32_t __x)\r\n{\r\n  return __x;\r\n}\r\n\r\nstatic __inline __uint64_t\r\n__uint64_identity (__uint64_t __x)\r\n{\r\n  return __x;\r\n}\r\n"]
[81.368169, "o", "# 37 \"/usr/include/endian.h\" 2 3 4\r\n"]
[81.368267, "o", "# 177 \"/usr/include/sys/types.h\" 2 3 4\r\n"]
[81.36833, "o", "\r\n\r\n# 1 \"/usr/include/sys/select.h\" 1 3 4\r\n"]
[81.36846, "o", "# 30 \"/usr/include/sys/select.h\" 3 4\r\n# 1 \"/usr/include/bits/select.h\" 1 3 4\r\n"]
[81.368535, "o", "# 31 \"/usr/include/sys/select.h\" 2 3 4\r\n"]
[81.368632, "o", "\r\n\r\n# 1 \"/usr/include/bits/types/sigset_t.h\" 1 3 4\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.368665, "o", "typedef __sigset_t sigset_t;\r\n# 34 \"/usr/include/sys/select.h\" 2 3 4\r\n# 49 \"/usr/include/sys/select.h\" 3 4\r\ntypedef long int __fd_mask;\r\n# 59 \"/usr/include/sys/select.h\" 3 4\r\ntypedef struct\r\n  {\r\n\r\n\r\n\r\n"]
[81.368699, "o", "    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.36873, "o", "  } fd_set;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.368768, "o", "typedef __fd_mask fd_mask;\r\n# 91 \"/usr/include/sys/select.h\" 3 4\r\nextern \"C\" {\r\n# 102 \"/usr/include/sys/select.h\" 3 4\r\nextern int select (int __nfds, fd_set *__restrict __readfds,\r\n     fd_set *__restrict __writefds,\r\n     fd_set *__restrict __exceptfds,\r\n"]
[81.368809, "o", "     struct timeval *__restrict __timeout);\r\n# 127 \"/usr/include/sys/select.h\" 3 4\r\nextern int pselect (int __nfds, fd_set *__restrict __readfds,\r\n      fd_set *__restrict __writefds,\r\n      fd_set *__restrict __exceptfds,\r\n      const struct timespec *__restrict __timeout,\r\n"]
[81.368844, "o", "      const __sigset_t *__restrict __sigmask);\r\n# 153 \"/usr/include/sys/select.h\" 3 4\r\n}\r\n# 180 \"/usr/include/sys/types.h\" 2 3 4\r\n\r\n\r\n\r\n\r\n"]
[81.36889, "o", "\r\ntypedef __blksize_t blksize_t;\r\n\r\n\r\n\r\n\r\n\r\n\r\ntypedef __blkcnt_t blkcnt_t;\r\n\r\n\r\n\r\ntypedef __fsblkcnt_t fsblkcnt_t;\r\n\r\n\r\n"]
[81.368926, "o", "\r\ntypedef __fsfilcnt_t fsfilcnt_t;\r\n# 219 \"/usr/include/sys/types.h\" 3 4\r\ntypedef __blkcnt64_t blkcnt64_t;\r\ntypedef __fsblkcnt64_t fsblkcnt64_t;\r\n"]
[81.368959, "o", "typedef __fsfilcnt64_t fsfilcnt64_t;\r\n# 230 \"/usr/include/sys/types.h\" 3 4\r\n}\r\n# 515 \"/usr/include/stdlib.h\" 2 3 4\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern long int random (void) noexcept (true);\r\n\r\n\r\n"]
[81.36899, "o", "extern void srandom (unsigned int __seed) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\nextern char *initstate (unsigned int __seed, char *__statebuf,\r\n"]
[81.369023, "o", "   size_t __statelen) noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\n\r\n"]
[81.369056, "o", "extern char *setstate (char *__statebuf) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nstruct random_data\r\n  {\r\n    int32_t *fptr;\r\n"]
[81.369092, "o", "    int32_t *rptr;\r\n    int32_t *state;\r\n    int rand_type;\r\n    int rand_deg;\r\n    int rand_sep;\r\n    int32_t *end_ptr;\r\n  };\r\n\r\nextern int random_r (struct random_data *__restrict __buf,\r\n"]
[81.369126, "o", "       int32_t *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\nextern int srandom_r (unsigned int __seed, struct random_data *__buf)\r\n     noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n\r\n"]
[81.369155, "o", "extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,\r\n   size_t __statelen,\r\n   struct random_data *__restrict __buf)\r\n     noexcept (true) __attribute__ ((__nonnull__ (2, 4)));\r\n\r\n"]
[81.369187, "o", "extern int setstate_r (char *__restrict __statebuf,\r\n         struct random_data *__restrict __buf)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n"]
[81.369219, "o", "\r\n\r\n\r\nextern int rand (void) noexcept (true);\r\n\r\nextern void srand (unsigned int __seed) noexcept (true);\r\n\r\n\r\n\r\n"]
[81.369255, "o", "extern int rand_r (unsigned int *__seed) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern double drand48 (void) noexcept (true);\r\n"]
[81.369297, "o", "extern double erand48 (unsigned short int __xsubi[3]) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern long int lrand48 (void) noexcept (true);\r\nextern long int nrand48 (unsigned short int __xsubi[3])\r\n"]
[81.369338, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern long int mrand48 (void) noexcept (true);\r\nextern long int jrand48 (unsigned short int __xsubi[3])\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern void srand48 (long int __seedval) noexcept (true);\r\n"]
[81.369374, "o", "extern unsigned short int *seed48 (unsigned short int __seed16v[3])\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\nextern void lcong48 (unsigned short int __param[7]) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.369405, "o", "struct drand48_data\r\n  {\r\n    unsigned short int __x[3];\r\n    unsigned short int __old_x[3];\r\n    unsigned short int __c;\r\n    unsigned short int __init;\r\n    __extension__ unsigned long long int __a;\r\n\r\n"]
[81.369437, "o", "  };\r\n\r\n\r\nextern int drand48_r (struct drand48_data *__restrict __buffer,\r\n        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n"]
[81.369468, "o", "extern int erand48_r (unsigned short int __xsubi[3],\r\n        struct drand48_data *__restrict __buffer,\r\n        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\n"]
[81.369508, "o", "extern int lrand48_r (struct drand48_data *__restrict __buffer,\r\n        long int *__restrict __result)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\nextern int nrand48_r (unsigned short int __xsubi[3],\r\n        struct drand48_data *__restrict __buffer,\r\n"]
[81.369548, "o", "        long int *__restrict __result)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int mrand48_r (struct drand48_data *__restrict __buffer,\r\n        long int *__restrict __result)\r\n"]
[81.369585, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\nextern int jrand48_r (unsigned short int __xsubi[3],\r\n        struct drand48_data *__restrict __buffer,\r\n        long int *__restrict __result)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern int srand48_r (long int __seedval, struct drand48_data *__buffer)\r\n"]
[81.369621, "o", "     noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n\r\nextern int seed48_r (unsigned short int __seed16v[3],\r\n       struct drand48_data *__buffer) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\nextern int lcong48_r (unsigned short int __param[7],\r\n"]
[81.369655, "o", "        struct drand48_data *__buffer)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));\r\n\r\n\r\nextern __uint32_t arc4random (void)\r\n     noexcept (true) ;\r\n\r\n\r\n"]
[81.369685, "o", "extern void arc4random_buf (void *__buf, size_t __size)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern __uint32_t arc4random_uniform (__uint32_t __upper_bound)\r\n"]
[81.370136, "o", "     noexcept (true) ;\r\n\r\n\r\n\r\n\r\nextern void *malloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))\r\n     __attribute__ ((__alloc_size__ (1))) ;\r\n\r\nextern void *calloc (size_t __nmemb, size_t __size)\r\n     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern void *realloc (void *__ptr, size_t __size)\r\n     noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));\r\n\r\n\r\nextern void free (void *__ptr) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)\r\n     noexcept (true) __attribute__ ((__warn_unused_result__))\r\n     __attribute__ ((__alloc_size__ (2, 3)))\r\n    __attribute__ ((__malloc__ (__builtin_free, 1)));\r\n\r\n\r\nextern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)\r\n     noexcept (true) __attribute__ ((__malloc__ (reallocarray, 1)));\r\n\r\n\r\n\r\n# 1 \"/usr/include/alloca.h\" 1 3 4\r\n# 24 \"/usr/include/alloca.h\" 3 4\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 1 3 4\r\n"]
[81.370352, "o", "# 25 \"/usr/include/alloca.h\" 2 3 4\r\n\r\nextern \"C\" {\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.370389, "o", "extern void *alloca (size_t __size) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n}\r\n# 707 \"/usr/include/stdlib.h\" 2 3 4\r\n"]
[81.370424, "o", "\r\n\r\n\r\n\r\n\r\nextern void *valloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))\r\n     __attribute__ ((__alloc_size__ (1))) ;\r\n\r\n\r\n"]
[81.370456, "o", "\r\n\r\nextern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1))) ;\r\n\r\n\r\n\r\n\r\n"]
[81.370487, "o", "extern void *aligned_alloc (size_t __alignment, size_t __size)\r\n     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))\r\n     __attribute__ ((__alloc_size__ (2))) ;\r\n\r\n"]
[81.370518, "o", "\r\n\r\nextern void abort (void) noexcept (true) __attribute__ ((__noreturn__));\r\n\r\n\r\n\r\n"]
[81.370552, "o", "extern int atexit (void (*__func) (void)) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\nextern \"C++\" int at_quick_exit (void (*__func) (void))\r\n"]
[81.370585, "o", "     noexcept (true) __asm (\"at_quick_exit\") __attribute__ ((__nonnull__ (1)));\r\n# 749 \"/usr/include/stdlib.h\" 3 4\r\nextern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)\r\n"]
[81.370615, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\nextern void exit (int __status) noexcept (true) __attribute__ ((__noreturn__));\r\n\r\n\r\n\r\n"]
[81.370648, "o", "\r\n\r\nextern void quick_exit (int __status) noexcept (true) __attribute__ ((__noreturn__));\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.370681, "o", "extern void _Exit (int __status) noexcept (true) __attribute__ ((__noreturn__));\r\n\r\n\r\n\r\n\r\nextern char *getenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1))) ;\r\n\r\n\r\n\r\n\r\n"]
[81.370712, "o", "extern char *secure_getenv (const char *__name)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1))) ;\r\n\r\n\r\n\r\n\r\n"]
[81.370746, "o", "\r\n\r\nextern int putenv (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.370778, "o", "extern int setenv (const char *__name, const char *__value, int __replace)\r\n     noexcept (true) __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\n"]
[81.370807, "o", "extern int unsetenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int clearenv (void) noexcept (true);\r\n# 814 \"/usr/include/stdlib.h\" 3 4\r\n"]
[81.370834, "o", "extern char *mktemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n# 827 \"/usr/include/stdlib.h\" 3 4\r\n"]
[81.371391, "o", "extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;\r\n# 837 \"/usr/include/stdlib.h\" 3 4\r\nextern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;\r\n# 849 \"/usr/include/stdlib.h\" 3 4\r\nextern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;\r\n# 859 \"/usr/include/stdlib.h\" 3 4\r\nextern int mkstemps64 (char *__template, int __suffixlen)\r\n     __attribute__ ((__nonnull__ (1))) ;\r\n# 870 \"/usr/include/stdlib.h\" 3 4\r\nextern char *mkdtemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1))) ;\r\n# 881 \"/usr/include/stdlib.h\" 3 4\r\nextern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;\r\n# 891 \"/usr/include/stdlib.h\" 3 4\r\nextern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;\r\n# 901 \"/usr/include/stdlib.h\" 3 4\r\nextern int mkostemps (char *__template, int __suffixlen, int __flags)\r\n     __attribute__ ((__nonnull__ (1))) ;\r\n# 913 \"/usr/include/stdlib.h\" 3 4\r\nextern int mkostemps64 (char *__template, int __suffixlen, int __flags)\r\n     __attribute__ ((__nonnull__ (1))) ;\r\n# 923 \"/usr/include/stdlib.h\" 3 4\r\nextern int system (const char *__command) ;\r\n\r\n\r\n\r\n\r\n\r\nextern char *canonicalize_file_name (const char *__name)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))\r\n     __attribute__ ((__malloc__ (__builtin_free, 1))) ;\r\n# 940 \"/usr/include/stdlib.h\" 3 4\r\nextern char *realpath (const char *__restrict __name,\r\n         char *__restrict __resolved) noexcept (true) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\ntypedef int (*__compar_fn_t) (const void *, const void *);\r\n\r\n\r\ntypedef __compar_fn_t comparison_fn_t;\r\n\r\n\r\n\r\ntypedef int (*__compar_d_fn_t) (const void *, const void *, void *);\r\n\r\n\r\n\r\n\r\nextern void *bsearch (const void *__key, const void *__base,\r\n        size_t __nmemb, size_t __size, __compar_fn_t __compar)\r\n     __attribute__ ((__nonnull__ (1, 2, 5))) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern void qsort (void *__base, size_t __nmemb, size_t __size,\r\n     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));\r\n\r\nextern void qsort_r (void *__base, size_t __nmemb, size_t __size,\r\n       __compar_d_fn_t __compar, void *__arg)\r\n  __attribute__ ((__nonnull__ (1, 4)));\r\n\r\n\r\n\r\n\r\nextern int abs (int __x) noexcept (true) __attribute__ ((__const__)) ;\r\nextern long int labs (long int __x) noexcept (true) __attribute__ ((__const__)) ;\r\n\r\n\r\n__extension__ extern long long int llabs (long long int __x)\r\n     noexcept (true) __attribute__ ((__const__)) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern div_t div (int __numer, int __denom)\r\n     noexcept (true) __attribute__ ((__const__)) ;\r\nextern ldiv_t ldiv (long int __numer, long int __denom)\r\n     noexcept (true) __attribute__ ((__const__)) ;\r\n\r\n\r\n__extension__ extern lldiv_t lldiv (long long int __numer,\r\n        long long int __denom)\r\n     noexcept (true) __attribute__ ((__const__)) ;\r\n# 1012 \"/usr/include/stdlib.h\" 3 4\r\nextern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,\r\n     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;\r\n\r\n\r\n\r\n\r\nextern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,\r\n     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;\r\n\r\n\r\n\r\n\r\nextern char *gcvt (double __value, int __ndigit, char *__buf)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3))) ;\r\n\r\n\r\n\r\n\r\nextern char *qecvt (long double __value, int __ndigit,\r\n      int *__restrict __decpt, int *__restrict __sign)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;\r\nextern char *qfcvt (long double __value, int __ndigit,\r\n      int *__restrict __decpt, int *__restrict __sign)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;\r\nextern char *qgcvt (long double __value, int __ndigit, char *__buf)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3))) ;\r\n\r\n\r\n\r\n\r\nextern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,\r\n     int *__restrict __sign, char *__restrict __buf,\r\n     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));\r\n"]
[81.371475, "o", "extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,\r\n     int *__restrict __sign, char *__restrict __buf,\r\n     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));\r\n\r\nextern int qecvt_r (long double __value, int __ndigit,\r\n      int *__restrict __decpt, int *__restrict __sign,\r\n      char *__restrict __buf, size_t __len)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));\r\nextern int qfcvt_r (long double __value, int __ndigit,\r\n      int *__restrict __decpt, int *__restrict __sign,\r\n      char *__restrict __buf, size_t __len)\r\n     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));\r\n\r\n\r\n\r\n\r\n\r\nextern int mblen (const char *__s, size_t __n) noexcept (true);\r\n\r\n\r\n"]
[81.37154, "o", "extern int mbtowc (wchar_t *__restrict __pwc,\r\n     const char *__restrict __s, size_t __n) noexcept (true);\r\n\r\n\r\nextern int wctomb (char *__s, wchar_t __wchar) noexcept (true);\r\n\r\n\r\n\r\nextern size_t mbstowcs (wchar_t *__restrict __pwcs,\r\n   const char *__restrict __s, size_t __n) noexcept (true)\r\n    __attribute__ ((__access__ (__read_only__, 2)));\r\n\r\nextern size_t wcstombs (char *__restrict __s,\r\n   const wchar_t *__restrict __pwcs, size_t __n)\r\n     noexcept (true)\r\n  __attribute__ ((__access__ (__write_only__, 1, 3)))\r\n  __attribute__ ((__access__ (__read_only__, 2)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.371607, "o", "extern int rpmatch (const char *__response) noexcept (true) __attribute__ ((__nonnull__ (1))) ;\r\n# 1099 \"/usr/include/stdlib.h\" 3 4\r\nextern int getsubopt (char **__restrict __optionp,\r\n        char *const *__restrict __tokens,\r\n        char **__restrict __valuep)\r\n     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3))) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int posix_openpt (int __oflag) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int grantpt (int __fd) noexcept (true);\r\n\r\n\r\n\r\nextern int unlockpt (int __fd) noexcept (true);\r\n\r\n"]
[81.371641, "o", "\r\n\r\n\r\nextern char *ptsname (int __fd) noexcept (true) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int ptsname_r (int __fd, char *__buf, size_t __buflen)\r\n"]
[81.371672, "o", "     noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));\r\n\r\n\r\nextern int getpt (void);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int getloadavg (double __loadavg[], int __nelem)\r\n"]
[81.371799, "o", "     noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n# 1155 \"/usr/include/stdlib.h\" 3 4\r\n# 1 \"/usr/include/bits/stdlib-float.h\" 1 3 4\r\n# 1156 \"/usr/include/stdlib.h\" 2 3 4\r\n"]
[81.371857, "o", "# 1167 \"/usr/include/stdlib.h\" 3 4\r\n}\r\n# 80 \"/usr/include/c++/14.2.1/cstdlib\" 2 3\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/std_abs.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/std_abs.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/std_abs.h\" 3\r\n"]
[81.371887, "o", "# 46 \"/usr/include/c++/14.2.1/bits/std_abs.h\" 3\r\nextern \"C++\"\r\n{\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  using ::abs;\r\n\r\n\r\n  inline long\r\n  abs(long __i) { return __builtin_labs(__i); }\r\n\r\n\r\n\r\n  inline long long\r\n"]
[81.371919, "o", "  abs(long long __x) { return __builtin_llabs (__x); }\r\n# 70 \"/usr/include/c++/14.2.1/bits/std_abs.h\" 3\r\n  inline constexpr double\r\n  abs(double __x)\r\n  { return __builtin_fabs(__x); }\r\n\r\n  inline constexpr float\r\n  abs(float __x)\r\n  { return __builtin_fabsf(__x); }\r\n\r\n"]
[81.371948, "o", "  inline constexpr long double\r\n  abs(long double __x)\r\n  { return __builtin_fabsl(__x); }\r\n\r\n\r\n\r\n  __extension__ inline constexpr __int128\r\n"]
[81.372062, "o", "  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }\r\n# 135 \"/usr/include/c++/14.2.1/bits/std_abs.h\" 3\r\n  __extension__ inline constexpr\r\n  __float128\r\n  abs(__float128 __x)\r\n  {\r\n\r\n\r\n\r\n    return __builtin_fabsf128(__x);\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n}\r\n# 82 \"/usr/include/c++/14.2.1/cstdlib\" 2 3\r\n# 125 \"/usr/include/c++/14.2.1/cstdlib\" 3\r\nextern \"C++\"\r\n{\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  using ::div_t;\r\n  using ::ldiv_t;\r\n\r\n"]
[81.372131, "o", "  using ::abort;\r\n\r\n  using ::aligned_alloc;\r\n\r\n  using ::atexit;\r\n\r\n\r\n  using ::at_quick_exit;\r\n\r\n\r\n  using ::atof;\r\n  using ::atoi;\r\n  using ::atol;\r\n  using ::bsearch;\r\n  using ::calloc;\r\n  using ::div;\r\n  using ::exit;\r\n  using ::free;\r\n  using ::getenv;\r\n  using ::labs;\r\n  using ::ldiv;\r\n  using ::malloc;\r\n\r\n  using ::mblen;\r\n  using ::mbstowcs;\r\n  using ::mbtowc;\r\n\r\n  using ::qsort;\r\n\r\n\r\n  using ::quick_exit;\r\n\r\n"]
[81.372199, "o", "\r\n  using ::rand;\r\n  using ::realloc;\r\n  using ::srand;\r\n  using ::strtod;\r\n  using ::strtol;\r\n  using ::strtoul;\r\n  using ::system;\r\n\r\n  using ::wcstombs;\r\n  using ::wctomb;\r\n\r\n\r\n\r\n  inline ldiv_t\r\n  div(long __i, long __j) noexcept { return ldiv(__i, __j); }\r\n\r\n\r\n\r\n\r\n}\r\n# 199 \"/usr/include/c++/14.2.1/cstdlib\" 3\r\nnamespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\r\n"]
[81.372269, "o", "{\r\n\r\n\r\n\r\n  using ::lldiv_t;\r\n\r\n\r\n\r\n\r\n\r\n  using ::_Exit;\r\n\r\n\r\n\r\n  using ::llabs;\r\n\r\n  inline lldiv_t\r\n  div(long long __n, long long __d)\r\n  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\r\n\r\n  using ::lldiv;\r\n# 231 \"/usr/include/c++/14.2.1/cstdlib\" 3\r\n  using ::atoll;\r\n  using ::strtoll;\r\n  using ::strtoull;\r\n\r\n  using ::strtof;\r\n"]
[81.372328, "o", "  using ::strtold;\r\n\r\n\r\n}\r\n\r\nnamespace std\r\n{\r\n\r\n  using ::__gnu_cxx::lldiv_t;\r\n\r\n  using ::__gnu_cxx::_Exit;\r\n\r\n  using ::__gnu_cxx::llabs;\r\n  using ::__gnu_cxx::div;\r\n  using ::__gnu_cxx::lldiv;\r\n\r\n  using ::__gnu_cxx::atoll;\r\n  using ::__gnu_cxx::strtof;\r\n  using ::__gnu_cxx::strtoll;\r\n  using ::__gnu_cxx::strtoull;\r\n  using ::__gnu_cxx::strtold;\r\n}\r\n# 275 \"/usr/include/c++/14.2.1/cstdlib\" 3\r\n"]
[81.372381, "o", "}\r\n# 44 \"/usr/include/c++/14.2.1/ext/string_conversions.h\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/cwchar\" 1 3\r\n# 39 \"/usr/include/c++/14.2.1/cwchar\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/cwchar\" 3\r\n"]
[81.372463, "o", "# 45 \"/usr/include/c++/14.2.1/ext/string_conversions.h\" 2 3\r\n"]
[81.372516, "o", "# 1 \"/usr/include/c++/14.2.1/cstdio\" 1 3\r\n# 39 \"/usr/include/c++/14.2.1/cstdio\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/cstdio\" 3\r\n"]
[81.372593, "o", "\r\n\r\n# 1 \"/usr/include/stdio.h\" 1 3 4\r\n"]
[81.372654, "o", "# 28 \"/usr/include/stdio.h\" 3 4\r\n# 1 \"/usr/include/bits/libc-header-start.h\" 1 3 4\r\n# 29 \"/usr/include/stdio.h\" 2 3 4\r\n\r\n"]
[81.372706, "o", "extern \"C\" {\r\n\r\n\r\n\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 1 3 4\r\n"]
[81.372833, "o", "# 35 \"/usr/include/stdio.h\" 2 3 4\r\n\r\n\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stdarg.h\" 1 3 4\r\n"]
[81.372893, "o", "# 38 \"/usr/include/stdio.h\" 2 3 4\r\n"]
[81.372988, "o", "\r\n\r\n# 1 \"/usr/include/bits/types/__fpos_t.h\" 1 3 4\r\n# 10 \"/usr/include/bits/types/__fpos_t.h\" 3 4\r\ntypedef struct _G_fpos_t\r\n{\r\n  __off_t __pos;\r\n  __mbstate_t __state;\r\n"]
[81.373038, "o", "} __fpos_t;\r\n# 41 \"/usr/include/stdio.h\" 2 3 4\r\n"]
[81.373104, "o", "# 1 \"/usr/include/bits/types/__fpos64_t.h\" 1 3 4\r\n# 10 \"/usr/include/bits/types/__fpos64_t.h\" 3 4\r\ntypedef struct _G_fpos64_t\r\n{\r\n  __off64_t __pos;\r\n"]
[81.373156, "o", "  __mbstate_t __state;\r\n} __fpos64_t;\r\n# 42 \"/usr/include/stdio.h\" 2 3 4\r\n"]
[81.373222, "o", "\r\n\r\n# 1 \"/usr/include/bits/types/struct_FILE.h\" 1 3 4\r\n# 35 \"/usr/include/bits/types/struct_FILE.h\" 3 4\r\nstruct _IO_FILE;\r\n"]
[81.373281, "o", "struct _IO_marker;\r\nstruct _IO_codecvt;\r\nstruct _IO_wide_data;\r\n\r\n\r\n\r\n\r\ntypedef void _IO_lock_t;\r\n\r\n\r\n\r\n\r\n\r\nstruct _IO_FILE\r\n{\r\n  int _flags;\r\n\r\n\r\n  char *_IO_read_ptr;\r\n  char *_IO_read_end;\r\n  char *_IO_read_base;\r\n  char *_IO_write_base;\r\n  char *_IO_write_ptr;\r\n  char *_IO_write_end;\r\n  char *_IO_buf_base;\r\n"]
[81.373354, "o", "  char *_IO_buf_end;\r\n\r\n\r\n  char *_IO_save_base;\r\n  char *_IO_backup_base;\r\n  char *_IO_save_end;\r\n\r\n  struct _IO_marker *_markers;\r\n\r\n  struct _IO_FILE *_chain;\r\n\r\n  int _fileno;\r\n  int _flags2;\r\n  __off_t _old_offset;\r\n\r\n\r\n  unsigned short _cur_column;\r\n  signed char _vtable_offset;\r\n  char _shortbuf[1];\r\n\r\n  _IO_lock_t *_lock;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  __off64_t _offset;\r\n\r\n  struct _IO_codecvt *_codecvt;\r\n  struct _IO_wide_data *_wide_data;\r\n  struct _IO_FILE *_freeres_list;\r\n  void *_freeres_buf;\r\n"]
[81.373389, "o", "  struct _IO_FILE **_prevchain;\r\n  int _mode;\r\n\r\n  char _unused2[15 * sizeof (int) - 5 * sizeof (void *)];\r\n};\r\n# 45 \"/usr/include/stdio.h\" 2 3 4\r\n"]
[81.373502, "o", "\r\n\r\n# 1 \"/usr/include/bits/types/cookie_io_functions_t.h\" 1 3 4\r\n# 27 \"/usr/include/bits/types/cookie_io_functions_t.h\" 3 4\r\ntypedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,\r\n                                          size_t __nbytes);\r\n\r\n\r\n\r\n\r\n"]
[81.373565, "o", "\r\n\r\n\r\ntypedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,\r\n                                           size_t __nbytes);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntypedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);\r\n\r\n\r\ntypedef int cookie_close_function_t (void *__cookie);\r\n\r\n\r\n\r\n\r\n\r\n\r\ntypedef struct _IO_cookie_io_functions_t\r\n{\r\n  cookie_read_function_t *read;\r\n  cookie_write_function_t *write;\r\n  cookie_seek_function_t *seek;\r\n  cookie_close_function_t *close;\r\n"]
[81.373594, "o", "} cookie_io_functions_t;\r\n# 48 \"/usr/include/stdio.h\" 2 3 4\r\n# 85 \"/usr/include/stdio.h\" 3 4\r\ntypedef __fpos_t fpos_t;\r\n\r\n\r\n\r\n\r\n"]
[81.373715, "o", "typedef __fpos64_t fpos64_t;\r\n# 129 \"/usr/include/stdio.h\" 3 4\r\n# 1 \"/usr/include/bits/stdio_lim.h\" 1 3 4\r\n# 130 \"/usr/include/stdio.h\" 2 3 4\r\n"]
[81.373777, "o", "# 149 \"/usr/include/stdio.h\" 3 4\r\nextern FILE *stdin;\r\nextern FILE *stdout;\r\nextern FILE *stderr;\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int remove (const char *__filename) noexcept (true);\r\n\r\nextern int rename (const char *__old, const char *__new) noexcept (true);\r\n\r\n\r\n\r\nextern int renameat (int __oldfd, const char *__old, int __newfd,\r\n       const char *__new) noexcept (true);\r\n"]
[81.373841, "o", "# 176 \"/usr/include/stdio.h\" 3 4\r\nextern int renameat2 (int __oldfd, const char *__old, int __newfd,\r\n        const char *__new, unsigned int __flags) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int fclose (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\n# 194 \"/usr/include/stdio.h\" 3 4\r\nextern FILE *tmpfile (void)\r\n  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;\r\n# 206 \"/usr/include/stdio.h\" 3 4\r\n"]
[81.373905, "o", "extern FILE *tmpfile64 (void)\r\n   __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;\r\n\r\n\r\n\r\nextern char *tmpnam (char[20]) noexcept (true) ;\r\n\r\n\r\n\r\n\r\nextern char *tmpnam_r (char __s[20]) noexcept (true) ;\r\n# 228 \"/usr/include/stdio.h\" 3 4\r\nextern char *tempnam (const char *__dir, const char *__pfx)\r\n   noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int fflush (FILE *__stream);\r\n# 245 \"/usr/include/stdio.h\" 3 4\r\n"]
[81.37397, "o", "extern int fflush_unlocked (FILE *__stream);\r\n# 255 \"/usr/include/stdio.h\" 3 4\r\nextern int fcloseall (void);\r\n# 264 \"/usr/include/stdio.h\" 3 4\r\nextern FILE *fopen (const char *__restrict __filename,\r\n      const char *__restrict __modes)\r\n  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;\r\n\r\n\r\n\r\n\r\nextern FILE *freopen (const char *__restrict __filename,\r\n        const char *__restrict __modes,\r\n        FILE *__restrict __stream) __attribute__ ((__nonnull__ (3)));\r\n# 289 \"/usr/include/stdio.h\" 3 4\r\n"]
[81.374033, "o", "extern FILE *fopen64 (const char *__restrict __filename,\r\n        const char *__restrict __modes)\r\n  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;\r\nextern FILE *freopen64 (const char *__restrict __filename,\r\n   const char *__restrict __modes,\r\n   FILE *__restrict __stream) __attribute__ ((__nonnull__ (3)));\r\n\r\n\r\n\r\n\r\nextern FILE *fdopen (int __fd, const char *__modes) noexcept (true)\r\n  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;\r\n\r\n\r\n\r\n\r\n\r\nextern FILE *fopencookie (void *__restrict __magic_cookie,\r\n"]
[81.374087, "o", "     const char *__restrict __modes,\r\n     cookie_io_functions_t __io_funcs) noexcept (true)\r\n  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;\r\n\r\n\r\n\r\n\r\nextern FILE *fmemopen (void *__s, size_t __len, const char *__modes)\r\n  noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;\r\n\r\n\r\n\r\n\r\nextern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) noexcept (true)\r\n"]
[81.374146, "o", "  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;\r\n\r\n\r\n\r\n\r\n\r\nextern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) noexcept (true)\r\n  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1)));\r\n\r\n\r\n\r\n\r\n\r\nextern void setbuf (FILE *__restrict __stream, char *__restrict __buf) noexcept (true)\r\n  __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,\r\n"]
[81.374212, "o", "      int __modes, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\nextern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,\r\n         size_t __size) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern void setlinebuf (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int fprintf (FILE *__restrict __stream,\r\n"]
[81.374244, "o", "      const char *__restrict __format, ...) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\nextern int printf (const char *__restrict __format, ...);\r\n\r\nextern int sprintf (char *__restrict __s,\r\n      const char *__restrict __format, ...) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.374272, "o", "extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,\r\n       __gnuc_va_list __arg) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n"]
[81.3743, "o", "\r\nextern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);\r\n\r\nextern int vsprintf (char *__restrict __s, const char *__restrict __format,\r\n"]
[81.374338, "o", "       __gnuc_va_list __arg) noexcept (true);\r\n\r\n\r\n\r\nextern int snprintf (char *__restrict __s, size_t __maxlen,\r\n       const char *__restrict __format, ...)\r\n     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 4)));\r\n\r\n"]
[81.374375, "o", "extern int vsnprintf (char *__restrict __s, size_t __maxlen,\r\n        const char *__restrict __format, __gnuc_va_list __arg)\r\n     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 0)));\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.374414, "o", "extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,\r\n        __gnuc_va_list __arg)\r\n     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0))) ;\r\nextern int __asprintf (char **__restrict __ptr,\r\n         const char *__restrict __fmt, ...)\r\n     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) ;\r\n"]
[81.374445, "o", "extern int asprintf (char **__restrict __ptr,\r\n       const char *__restrict __fmt, ...)\r\n     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) ;\r\n\r\n\r\n\r\n\r\nextern int vdprintf (int __fd, const char *__restrict __fmt,\r\n       __gnuc_va_list __arg)\r\n"]
[81.374479, "o", "     __attribute__ ((__format__ (__printf__, 2, 0)));\r\nextern int dprintf (int __fd, const char *__restrict __fmt, ...)\r\n     __attribute__ ((__format__ (__printf__, 2, 3)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.374512, "o", "\r\nextern int fscanf (FILE *__restrict __stream,\r\n     const char *__restrict __format, ...) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n"]
[81.374546, "o", "extern int scanf (const char *__restrict __format, ...) ;\r\n\r\nextern int sscanf (const char *__restrict __s,\r\n"]
[81.374579, "o", "     const char *__restrict __format, ...) noexcept (true);\r\n# 442 \"/usr/include/stdio.h\" 3 4\r\n"]
[81.374614, "o", "extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ (\"\" \"__isoc23_fscanf\")\r\n\r\n                                __attribute__ ((__nonnull__ (1)));\r\n"]
[81.375031, "o", "extern int scanf (const char *__restrict __format, ...) __asm__ (\"\" \"__isoc23_scanf\")\r\n                              ;\r\nextern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) noexcept (true) __asm__ (\"\" \"__isoc23_sscanf\")\r\n\r\n                      ;\r\n# 490 \"/usr/include/stdio.h\" 3 4\r\nextern int vfscanf (FILE *__restrict __s, const char *__restrict __format,\r\n      __gnuc_va_list __arg)\r\n     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\nextern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)\r\n     __attribute__ ((__format__ (__scanf__, 1, 0))) ;\r\n\r\n\r\nextern int vsscanf (const char *__restrict __s,\r\n      const char *__restrict __format, __gnuc_va_list __arg)\r\n     noexcept (true) __attribute__ ((__format__ (__scanf__, 2, 0)));\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ (\"\" \"__isoc23_vfscanf\")\r\n\r\n\r\n\r\n     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__nonnull__ (1)));\r\nextern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ (\"\" \"__isoc23_vscanf\")\r\n\r\n     __attribute__ ((__format__ (__scanf__, 1, 0))) ;\r\nextern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ (\"\" \"__isoc23_vsscanf\")\r\n\r\n\r\n\r\n     __attribute__ ((__format__ (__scanf__, 2, 0)));\r\n# 575 \"/usr/include/stdio.h\" 3 4\r\nextern int fgetc (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\nextern int getc (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\nextern int getchar (void);\r\n\r\n\r\n\r\n\r\n"]
[81.375072, "o", "\r\n\r\nextern int getc_unlocked (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\nextern int getchar_unlocked (void);\r\n# 600 \"/usr/include/stdio.h\" 3 4\r\nextern int fgetc_unlocked (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\n# 611 \"/usr/include/stdio.h\" 3 4\r\nextern int fputc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));\r\n"]
[81.375107, "o", "extern int putc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\n\r\n\r\n\r\nextern int putchar (int __c);\r\n# 627 \"/usr/include/stdio.h\" 3 4\r\n"]
[81.375137, "o", "extern int fputc_unlocked (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int putc_unlocked (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));\r\n"]
[81.375173, "o", "extern int putchar_unlocked (int __c);\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.375206, "o", "extern int getw (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern int putw (int __w, FILE *__stream) __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.375234, "o", "extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)\r\n"]
[81.375268, "o", "     __attribute__ ((__access__ (__write_only__, 1, 2))) __attribute__ ((__nonnull__ (3)));\r\n# 677 \"/usr/include/stdio.h\" 3 4\r\nextern char *fgets_unlocked (char *__restrict __s, int __n,\r\n        FILE *__restrict __stream)\r\n"]
[81.375524, "o", "    __attribute__ ((__access__ (__write_only__, 1, 2))) __attribute__ ((__nonnull__ (3)));\r\n# 689 \"/usr/include/stdio.h\" 3 4\r\nextern __ssize_t __getdelim (char **__restrict __lineptr,\r\n                             size_t *__restrict __n, int __delimiter,\r\n                             FILE *__restrict __stream) __attribute__ ((__nonnull__ (4)));\r\nextern __ssize_t getdelim (char **__restrict __lineptr,\r\n                           size_t *__restrict __n, int __delimiter,\r\n                           FILE *__restrict __stream) __attribute__ ((__nonnull__ (4)));\r\n\r\n\r\nextern __ssize_t getline (char **__restrict __lineptr,\r\n                          size_t *__restrict __n,\r\n                          FILE *__restrict __stream) __attribute__ ((__nonnull__ (3)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int fputs (const char *__restrict __s, FILE *__restrict __stream)\r\n  __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\n\r\n\r\n\r\nextern int puts (const char *__s);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int ungetc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern size_t fread (void *__restrict __ptr, size_t __size,\r\n       size_t __n, FILE *__restrict __stream)\r\n  __attribute__ ((__nonnull__ (4)));\r\n\r\n\r\n\r\n\r\nextern size_t fwrite (const void *__restrict __ptr, size_t __size,\r\n"]
[81.375558, "o", "        size_t __n, FILE *__restrict __s) __attribute__ ((__nonnull__ (4)));\r\n# 745 \"/usr/include/stdio.h\" 3 4\r\nextern int fputs_unlocked (const char *__restrict __s,\r\n      FILE *__restrict __stream) __attribute__ ((__nonnull__ (2)));\r\n# 756 \"/usr/include/stdio.h\" 3 4\r\nextern size_t fread_unlocked (void *__restrict __ptr, size_t __size,\r\n         size_t __n, FILE *__restrict __stream)\r\n  __attribute__ ((__nonnull__ (4)));\r\n"]
[81.375654, "o", "extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,\r\n          size_t __n, FILE *__restrict __stream)\r\n  __attribute__ ((__nonnull__ (4)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int fseek (FILE *__stream, long int __off, int __whence)\r\n  __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\nextern long int ftell (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n"]
[81.375691, "o", "extern void rewind (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\n# 793 \"/usr/include/stdio.h\" 3 4\r\nextern int fseeko (FILE *__stream, __off_t __off, int __whence)\r\n  __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n"]
[81.375725, "o", "extern __off_t ftello (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\n# 819 \"/usr/include/stdio.h\" 3 4\r\nextern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos)\r\n"]
[81.375753, "o", "  __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n"]
[81.375894, "o", "extern int fsetpos (FILE *__stream, const fpos_t *__pos) __attribute__ ((__nonnull__ (1)));\r\n# 841 \"/usr/include/stdio.h\" 3 4\r\nextern int fseeko64 (FILE *__stream, __off64_t __off, int __whence)\r\n  __attribute__ ((__nonnull__ (1)));\r\nextern __off64_t ftello64 (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\nextern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos)\r\n  __attribute__ ((__nonnull__ (1)));\r\nextern int fsetpos64 (FILE *__stream, const fpos64_t *__pos) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\nextern void clearerr (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\nextern int feof (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\nextern int ferror (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n"]
[81.375933, "o", "extern void clearerr_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\nextern int feof_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\nextern int ferror_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.375963, "o", "extern void perror (const char *__s) __attribute__ ((__cold__));\r\n\r\n\r\n\r\n\r\n"]
[81.375995, "o", "extern int fileno (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\nextern int fileno_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n# 887 \"/usr/include/stdio.h\" 3 4\r\n"]
[81.376034, "o", "extern int pclose (FILE *__stream) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n\r\n\r\nextern FILE *popen (const char *__command, const char *__modes)\r\n"]
[81.376069, "o", "  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern char *ctermid (char *__s) noexcept (true)\r\n"]
[81.376103, "o", "  __attribute__ ((__access__ (__write_only__, 1)));\r\n\r\n\r\n\r\n\r\n\r\nextern char *cuserid (char *__s)\r\n  __attribute__ ((__access__ (__write_only__, 1)));\r\n\r\n\r\n\r\n\r\n"]
[81.376139, "o", "struct obstack;\r\n\r\n\r\nextern int obstack_printf (struct obstack *__restrict __obstack,\r\n      const char *__restrict __format, ...)\r\n     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3)));\r\n"]
[81.376173, "o", "extern int obstack_vprintf (struct obstack *__restrict __obstack,\r\n       const char *__restrict __format,\r\n       __gnuc_va_list __args)\r\n     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0)));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.376202, "o", "extern void flockfile (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\n\r\n"]
[81.376231, "o", "extern int ftrylockfile (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n\r\n\r\nextern void funlockfile (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));\r\n"]
[81.376519, "o", "# 949 \"/usr/include/stdio.h\" 3 4\r\nextern int __uflow (FILE *);\r\nextern int __overflow (FILE *, int);\r\n# 973 \"/usr/include/stdio.h\" 3 4\r\n}\r\n# 43 \"/usr/include/c++/14.2.1/cstdio\" 2 3\r\n# 96 \"/usr/include/c++/14.2.1/cstdio\" 3\r\nnamespace std\r\n{\r\n  using ::FILE;\r\n  using ::fpos_t;\r\n\r\n  using ::clearerr;\r\n  using ::fclose;\r\n  using ::feof;\r\n  using ::ferror;\r\n  using ::fflush;\r\n  using ::fgetc;\r\n  using ::fgetpos;\r\n  using ::fgets;\r\n  using ::fopen;\r\n  using ::fprintf;\r\n  using ::fputc;\r\n  using ::fputs;\r\n  using ::fread;\r\n  using ::freopen;\r\n  using ::fscanf;\r\n  using ::fseek;\r\n  using ::fsetpos;\r\n  using ::ftell;\r\n  using ::fwrite;\r\n  using ::getc;\r\n  using ::getchar;\r\n\r\n\r\n\r\n\r\n  using ::perror;\r\n  using ::printf;\r\n  using ::putc;\r\n  using ::putchar;\r\n  using ::puts;\r\n  using ::remove;\r\n  using ::rename;\r\n  using ::rewind;\r\n  using ::scanf;\r\n  using ::setbuf;\r\n  using ::setvbuf;\r\n  using ::sprintf;\r\n  using ::sscanf;\r\n  using ::tmpfile;\r\n\r\n  using ::tmpnam;\r\n\r\n  using ::ungetc;\r\n  using ::vfprintf;\r\n  using ::vprintf;\r\n  using ::vsprintf;\r\n"]
[81.376558, "o", "}\r\n# 157 \"/usr/include/c++/14.2.1/cstdio\" 3\r\nnamespace __gnu_cxx\r\n{\r\n# 175 \"/usr/include/c++/14.2.1/cstdio\" 3\r\n  using ::snprintf;\r\n"]
[81.376597, "o", "  using ::vfscanf;\r\n  using ::vscanf;\r\n  using ::vsnprintf;\r\n  using ::vsscanf;\r\n\r\n}\r\n\r\nnamespace std\r\n{\r\n  using ::__gnu_cxx::snprintf;\r\n  using ::__gnu_cxx::vfscanf;\r\n"]
[81.37663, "o", "  using ::__gnu_cxx::vscanf;\r\n  using ::__gnu_cxx::vsnprintf;\r\n  using ::__gnu_cxx::vsscanf;\r\n}\r\n# 46 \"/usr/include/c++/14.2.1/ext/string_conversions.h\" 2 3\r\n"]
[81.376768, "o", "# 1 \"/usr/include/c++/14.2.1/cerrno\" 1 3\r\n# 39 \"/usr/include/c++/14.2.1/cerrno\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/cerrno\" 3\r\n"]
[81.376919, "o", "\r\n\r\n# 1 \"/usr/include/errno.h\" 1 3 4\r\n"]
[81.376993, "o", "# 28 \"/usr/include/errno.h\" 3 4\r\n# 1 \"/usr/include/bits/errno.h\" 1 3 4\r\n"]
[81.377117, "o", "# 26 \"/usr/include/bits/errno.h\" 3 4\r\n# 1 \"/usr/include/linux/errno.h\" 1 3 4\r\n"]
[81.377224, "o", "# 1 \"/usr/include/asm/errno.h\" 1 3 4\r\n"]
[81.377331, "o", "# 1 \"/usr/include/asm-generic/errno.h\" 1 3 4\r\n"]
[81.377455, "o", "\r\n\r\n\r\n\r\n# 1 \"/usr/include/asm-generic/errno-base.h\" 1 3 4\r\n"]
[81.377491, "o", "# 6 \"/usr/include/asm-generic/errno.h\" 2 3 4\r\n"]
[81.377662, "o", "# 2 \"/usr/include/asm/errno.h\" 2 3 4\r\n# 2 \"/usr/include/linux/errno.h\" 2 3 4\r\n# 27 \"/usr/include/bits/errno.h\" 2 3 4\r\n# 29 \"/usr/include/errno.h\" 2 3 4\r\n\r\n\r\n\r\n\r\n\r\nextern \"C\" {\r\n\r\n\r\nextern int *__errno_location (void) noexcept (true) __attribute__ ((__const__));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern char *program_invocation_name;\r\n"]
[81.377764, "o", "extern char *program_invocation_short_name;\r\n\r\n# 1 \"/usr/include/bits/types/error_t.h\" 1 3 4\r\n# 22 \"/usr/include/bits/types/error_t.h\" 3 4\r\ntypedef int error_t;\r\n# 49 \"/usr/include/errno.h\" 2 3 4\r\n\r\n\r\n\r\n"]
[81.377832, "o", "}\r\n# 43 \"/usr/include/c++/14.2.1/cerrno\" 2 3\r\n# 47 \"/usr/include/c++/14.2.1/ext/string_conversions.h\" 2 3\r\n\r\nnamespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n  template<typename _TRet, typename _Ret = _TRet, typename _CharT,\r\n    typename... _Base>\r\n    _Ret\r\n    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),\r\n    const char* __name, const _CharT* __str, std::size_t* __idx,\r\n    _Base... __base)\r\n    {\r\n      _Ret __ret;\r\n\r\n      _CharT* __endptr;\r\n\r\n"]
[81.377888, "o", "      struct _Save_errno {\r\n _Save_errno() : _M_errno((*__errno_location ())) { (*__errno_location ()) = 0; }\r\n ~_Save_errno() { if ((*__errno_location ()) == 0) (*__errno_location ()) = _M_errno; }\r\n int _M_errno;\r\n      } const __save_errno;\r\n\r\n      struct _Range_chk {\r\n   static bool\r\n   _S_chk(_TRet, std::false_type) { return false; }\r\n\r\n   static bool\r\n   _S_chk(_TRet __val, std::true_type)\r\n   {\r\n"]
[81.377942, "o", "     return __val < _TRet(__numeric_traits<int>::__min)\r\n       || __val > _TRet(__numeric_traits<int>::__max);\r\n   }\r\n      };\r\n\r\n      const _TRet __tmp = __convf(__str, &__endptr, __base...);\r\n\r\n      if (__endptr == __str)\r\n std::__throw_invalid_argument(__name);\r\n      else if ((*__errno_location ()) == 34\r\n   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))\r\n"]
[81.377971, "o", " std::__throw_out_of_range(__name);\r\n      else\r\n __ret = __tmp;\r\n\r\n      if (__idx)\r\n *__idx = __endptr - __str;\r\n\r\n      return __ret;\r\n    }\r\n\r\n"]
[81.377995, "o", "\r\n  template<typename _String, typename _CharT = typename _String::value_type>\r\n    _String\r\n    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,\r\n     __builtin_va_list), std::size_t __n,\r\n"]
[81.378096, "o", "   const _CharT* __fmt, ...)\r\n    {\r\n\r\n\r\n      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\r\n         * __n));\r\n\r\n      __builtin_va_list __args;\r\n      __builtin_va_start(__args, __fmt);\r\n\r\n      const int __len = __convf(__s, __n, __fmt, __args);\r\n\r\n      __builtin_va_end(__args);\r\n\r\n      return _String(__s, __s + __len);\r\n    }\r\n\r\n\r\n}\r\n# 4155 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 2 3\r\n"]
[81.378152, "o", "# 1 \"/usr/include/c++/14.2.1/bits/charconv.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/charconv.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/charconv.h\" 3\r\n\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\nnamespace __detail\r\n{\r\n\r\n"]
[81.378179, "o", "\r\n  template<typename _Tp>\r\n    constexpr bool __integer_to_chars_is_unsigned\r\n      = ! __gnu_cxx::__int_traits<_Tp>::__is_signed;\r\n\r\n\r\n\r\n  template<typename _Tp>\r\n    constexpr unsigned\r\n"]
[81.378261, "o", "    __to_chars_len(_Tp __value, int __base = 10) noexcept\r\n    {\r\n\r\n      static_assert(__integer_to_chars_is_unsigned<_Tp>, \"implementation bug\");\r\n\r\n\r\n      unsigned __n = 1;\r\n      const unsigned __b2 = __base * __base;\r\n      const unsigned __b3 = __b2 * __base;\r\n      const unsigned long __b4 = __b3 * __base;\r\n      for (;;)\r\n {\r\n   if (__value < (unsigned)__base) return __n;\r\n   if (__value < __b2) return __n + 1;\r\n   if (__value < __b3) return __n + 2;\r\n   if (__value < __b4) return __n + 3;\r\n   __value /= __b4;\r\n   __n += 4;\r\n }\r\n    }\r\n\r\n\r\n"]
[81.378289, "o", "\r\n\r\n  template<typename _Tp>\r\n    void\r\n    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept\r\n    {\r\n\r\n"]
[81.378374, "o", "      static_assert(__integer_to_chars_is_unsigned<_Tp>, \"implementation bug\");\r\n\r\n\r\n      constexpr char __digits[201] =\r\n \"0001020304050607080910111213141516171819\"\r\n \"2021222324252627282930313233343536373839\"\r\n \"4041424344454647484950515253545556575859\"\r\n \"6061626364656667686970717273747576777879\"\r\n \"8081828384858687888990919293949596979899\";\r\n      unsigned __pos = __len - 1;\r\n      while (__val >= 100)\r\n {\r\n   auto const __num = (__val % 100) * 2;\r\n   __val /= 100;\r\n   __first[__pos] = __digits[__num + 1];\r\n   __first[__pos - 1] = __digits[__num];\r\n   __pos -= 2;\r\n }\r\n      if (__val >= 10)\r\n {\r\n   auto const __num = __val * 2;\r\n   __first[1] = __digits[__num + 1];\r\n   __first[0] = __digits[__num];\r\n }\r\n      else\r\n"]
[81.378401, "o", " __first[0] = '0' + __val;\r\n    }\r\n\r\n}\r\n\r\n}\r\n# 4156 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n"]
[81.378428, "o", "{\r\n\r\nnamespace __cxx11 {\r\n\r\n\r\n  inline int\r\n  stoi(const string& __str, size_t* __idx = 0, int __base = 10)\r\n"]
[81.378523, "o", "  { return __gnu_cxx::__stoa<long, int>(&std::strtol, \"stoi\", __str.c_str(),\r\n     __idx, __base); }\r\n\r\n  inline long\r\n  stol(const string& __str, size_t* __idx = 0, int __base = 10)\r\n  { return __gnu_cxx::__stoa(&std::strtol, \"stol\", __str.c_str(),\r\n        __idx, __base); }\r\n\r\n  inline unsigned long\r\n  stoul(const string& __str, size_t* __idx = 0, int __base = 10)\r\n  { return __gnu_cxx::__stoa(&std::strtoul, \"stoul\", __str.c_str(),\r\n        __idx, __base); }\r\n\r\n\r\n  inline long long\r\n  stoll(const string& __str, size_t* __idx = 0, int __base = 10)\r\n  { return __gnu_cxx::__stoa(&std::strtoll, \"stoll\", __str.c_str(),\r\n        __idx, __base); }\r\n\r\n  inline unsigned long long\r\n  stoull(const string& __str, size_t* __idx = 0, int __base = 10)\r\n"]
[81.378553, "o", "  { return __gnu_cxx::__stoa(&std::strtoull, \"stoull\", __str.c_str(),\r\n        __idx, __base); }\r\n# 4198 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  inline double\r\n"]
[81.378578, "o", "  stod(const string& __str, size_t* __idx = 0)\r\n  { return __gnu_cxx::__stoa(&std::strtod, \"stod\", __str.c_str(), __idx); }\r\n\r\n\r\n\r\n  inline float\r\n"]
[81.378601, "o", "  stof(const string& __str, size_t* __idx = 0)\r\n  { return __gnu_cxx::__stoa(&std::strtof, \"stof\", __str.c_str(), __idx); }\r\n# 4226 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.378632, "o", "  inline long double\r\n  stold(const string& __str, size_t* __idx = 0)\r\n  { return __gnu_cxx::__stoa(&std::strtold, \"stold\", __str.c_str(), __idx); }\r\n# 4238 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n"]
[81.378658, "o", "  [[__nodiscard__]]\r\n  inline string\r\n  to_string(int __val)\r\n\r\n  noexcept\r\n\r\n  {\r\n    const bool __neg = __val < 0;\r\n"]
[81.378791, "o", "    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;\r\n    const auto __len = __detail::__to_chars_len(__uval);\r\n    string __str;\r\n    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {\r\n      __p[0] = '-';\r\n      __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);\r\n      return __n;\r\n    });\r\n    return __str;\r\n  }\r\n\r\n  [[__nodiscard__]]\r\n  inline string\r\n  to_string(unsigned __val)\r\n\r\n  noexcept\r\n\r\n  {\r\n    const auto __len = __detail::__to_chars_len(__val);\r\n    string __str;\r\n    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {\r\n      __detail::__to_chars_10_impl(__p, __n, __val);\r\n      return __n;\r\n    });\r\n    return __str;\r\n  }\r\n\r\n  [[__nodiscard__]]\r\n  inline string\r\n  to_string(long __val)\r\n\r\n\r\n\r\n  {\r\n"]
[81.378823, "o", "    const bool __neg = __val < 0;\r\n    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;\r\n    const auto __len = __detail::__to_chars_len(__uval);\r\n    string __str;\r\n    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {\r\n      __p[0] = '-';\r\n"]
[81.378861, "o", "      __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);\r\n      return __n;\r\n    });\r\n    return __str;\r\n  }\r\n\r\n  [[__nodiscard__]]\r\n  inline string\r\n"]
[81.378895, "o", "  to_string(unsigned long __val)\r\n\r\n\r\n\r\n  {\r\n    const auto __len = __detail::__to_chars_len(__val);\r\n    string __str;\r\n    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {\r\n      __detail::__to_chars_10_impl(__p, __n, __val);\r\n      return __n;\r\n    });\r\n"]
[81.378927, "o", "    return __str;\r\n  }\r\n\r\n  [[__nodiscard__]]\r\n  inline string\r\n  to_string(long long __val)\r\n  {\r\n    const bool __neg = __val < 0;\r\n    const unsigned long long __uval\r\n"]
[81.379068, "o", "      = __neg ? (unsigned long long)~__val + 1ull : __val;\r\n    const auto __len = __detail::__to_chars_len(__uval);\r\n    string __str;\r\n    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {\r\n      __p[0] = '-';\r\n      __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);\r\n      return __n;\r\n    });\r\n    return __str;\r\n  }\r\n\r\n  [[__nodiscard__]]\r\n  inline string\r\n  to_string(unsigned long long __val)\r\n  {\r\n    const auto __len = __detail::__to_chars_len(__val);\r\n    string __str;\r\n    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {\r\n      __detail::__to_chars_10_impl(__p, __n, __val);\r\n      return __n;\r\n    });\r\n    return __str;\r\n"]
[81.379129, "o", "  }\r\n# 4399 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  [[__nodiscard__]]\r\n  inline string\r\n  to_string(float __val)\r\n  {\r\n    const int __n =\r\n      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;\r\n    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,\r\n        \"%f\", __val);\r\n  }\r\n\r\n  [[__nodiscard__]]\r\n"]
[81.37918, "o", "  inline string\r\n  to_string(double __val)\r\n  {\r\n    const int __n =\r\n      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;\r\n    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,\r\n        \"%f\", __val);\r\n  }\r\n\r\n  [[__nodiscard__]]\r\n  inline string\r\n  to_string(long double __val)\r\n  {\r\n    const int __n =\r\n"]
[81.379232, "o", "      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;\r\n    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,\r\n        \"%Lf\", __val);\r\n  }\r\n\r\n\r\n\r\n  inline int\r\n  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)\r\n  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, \"stoi\", __str.c_str(),\r\n     __idx, __base); }\r\n\r\n  inline long\r\n"]
[81.379281, "o", "  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)\r\n  { return __gnu_cxx::__stoa(&std::wcstol, \"stol\", __str.c_str(),\r\n        __idx, __base); }\r\n\r\n  inline unsigned long\r\n  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)\r\n  { return __gnu_cxx::__stoa(&std::wcstoul, \"stoul\", __str.c_str(),\r\n        __idx, __base); }\r\n\r\n  inline long long\r\n"]
[81.379344, "o", "  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)\r\n  { return __gnu_cxx::__stoa(&std::wcstoll, \"stoll\", __str.c_str(),\r\n        __idx, __base); }\r\n\r\n  inline unsigned long long\r\n  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)\r\n  { return __gnu_cxx::__stoa(&std::wcstoull, \"stoull\", __str.c_str(),\r\n        __idx, __base); }\r\n\r\n\r\n  inline float\r\n  stof(const wstring& __str, size_t* __idx = 0)\r\n  { return __gnu_cxx::__stoa(&std::wcstof, \"stof\", __str.c_str(), __idx); }\r\n\r\n  inline double\r\n  stod(const wstring& __str, size_t* __idx = 0)\r\n"]
[81.379402, "o", "  { return __gnu_cxx::__stoa(&std::wcstod, \"stod\", __str.c_str(), __idx); }\r\n\r\n  inline long double\r\n  stold(const wstring& __str, size_t* __idx = 0)\r\n  { return __gnu_cxx::__stoa(&std::wcstold, \"stold\", __str.c_str(), __idx); }\r\n\r\n\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wc++17-extensions\"\r\n \r\n  inline void\r\n"]
[81.379455, "o", "  __to_wstring_numeric(const char* __s, int __len, wchar_t* __wout)\r\n  {\r\n\r\n\r\n    if constexpr (wchar_t('0') == L'0' && wchar_t('-') == L'-'\r\n      && wchar_t('.') == L'.' && wchar_t('e') == L'e')\r\n      {\r\n for (int __i = 0; __i < __len; ++__i)\r\n   __wout[__i] = (wchar_t) __s[__i];\r\n      }\r\n    else\r\n      {\r\n wchar_t __wc[256];\r\n for (int __i = '0'; __i <= '9'; ++__i)\r\n"]
[81.379507, "o", "   __wc[__i] = L'0' + __i;\r\n __wc['.'] = L'.';\r\n __wc['+'] = L'+';\r\n __wc['-'] = L'-';\r\n __wc['a'] = L'a';\r\n __wc['b'] = L'b';\r\n __wc['c'] = L'c';\r\n __wc['d'] = L'd';\r\n __wc['e'] = L'e';\r\n __wc['f'] = L'f';\r\n __wc['n'] = L'n';\r\n __wc['p'] = L'p';\r\n"]
[81.379561, "o", " __wc['x'] = L'x';\r\n __wc['A'] = L'A';\r\n __wc['B'] = L'B';\r\n __wc['C'] = L'C';\r\n __wc['D'] = L'D';\r\n __wc['E'] = L'E';\r\n __wc['F'] = L'F';\r\n __wc['N'] = L'N';\r\n __wc['P'] = L'P';\r\n __wc['X'] = L'X';\r\n\r\n for (int __i = 0; __i < __len; ++__i)\r\n"]
[81.379625, "o", "   __wout[__i] = __wc[(int)__s[__i]];\r\n      }\r\n  }\r\n\r\n\r\n\r\n\r\n  inline wstring\r\n\r\n  __to_wstring_numeric(string_view __s)\r\n\r\n\r\n\r\n  {\r\n    if constexpr (wchar_t('0') == L'0' && wchar_t('-') == L'-'\r\n      && wchar_t('.') == L'.' && wchar_t('e') == L'e')\r\n      return wstring(__s.data(), __s.data() + __s.size());\r\n    else\r\n      {\r\n wstring __ws;\r\n"]
[81.379681, "o", " auto __f = __s.data();\r\n __ws.__resize_and_overwrite(__s.size(),\r\n        [__f] (wchar_t* __to, int __n) {\r\n          std::__to_wstring_numeric(__f, __n, __to);\r\n          return __n;\r\n        });\r\n return __ws;\r\n      }\r\n  }\r\n#pragma GCC diagnostic pop\r\n\r\n  [[__nodiscard__]]\r\n  inline wstring\r\n  to_wstring(int __val)\r\n"]
[81.379741, "o", "  { return std::__to_wstring_numeric(std::to_string(__val)); }\r\n\r\n  [[__nodiscard__]]\r\n  inline wstring\r\n  to_wstring(unsigned __val)\r\n  { return std::__to_wstring_numeric(std::to_string(__val)); }\r\n\r\n  [[__nodiscard__]]\r\n  inline wstring\r\n  to_wstring(long __val)\r\n  { return std::__to_wstring_numeric(std::to_string(__val)); }\r\n\r\n  [[__nodiscard__]]\r\n  inline wstring\r\n  to_wstring(unsigned long __val)\r\n"]
[81.379803, "o", "  { return std::__to_wstring_numeric(std::to_string(__val)); }\r\n\r\n  [[__nodiscard__]]\r\n  inline wstring\r\n  to_wstring(long long __val)\r\n  { return std::__to_wstring_numeric(std::to_string(__val)); }\r\n\r\n  [[__nodiscard__]]\r\n  inline wstring\r\n  to_wstring(unsigned long long __val)\r\n  { return std::__to_wstring_numeric(std::to_string(__val)); }\r\n\r\n\r\n  [[__nodiscard__]]\r\n  inline wstring\r\n  to_wstring(float __val)\r\n"]
[81.379858, "o", "  { return std::__to_wstring_numeric(std::to_string(__val)); }\r\n\r\n  [[__nodiscard__]]\r\n  inline wstring\r\n  to_wstring(double __val)\r\n  { return std::__to_wstring_numeric(std::to_string(__val)); }\r\n\r\n  [[__nodiscard__]]\r\n  inline wstring\r\n  to_wstring(long double __val)\r\n  { return std::__to_wstring_numeric(std::to_string(__val)); }\r\n\r\n\r\n\r\n}\r\n"]
[81.379914, "o", "\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Alloc,\r\n"]
[81.379969, "o", "    typename _StrT = basic_string<_CharT, char_traits<_CharT>, _Alloc>>\r\n    struct __str_hash_base\r\n    : public __hash_base<size_t, _StrT>\r\n    {\r\n      [[__nodiscard__]]\r\n      size_t\r\n      operator()(const _StrT& __s) const noexcept\r\n      { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(_CharT)); }\r\n    };\r\n\r\n\r\n\r\n  template<typename _Alloc>\r\n"]
[81.380025, "o", "    struct hash<basic_string<char, char_traits<char>, _Alloc>>\r\n    : public __str_hash_base<char, _Alloc>\r\n    { };\r\n\r\n\r\n  template<typename _Alloc>\r\n    struct hash<basic_string<wchar_t, char_traits<wchar_t>, _Alloc>>\r\n    : public __str_hash_base<wchar_t, _Alloc>\r\n    { };\r\n\r\n  template<typename _Alloc>\r\n    struct __is_fast_hash<hash<basic_string<wchar_t, char_traits<wchar_t>,\r\n         _Alloc>>>\r\n    : std::false_type\r\n    { };\r\n# 4649 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  template<typename _Alloc>\r\n"]
[81.380081, "o", "    struct hash<basic_string<char16_t, char_traits<char16_t>, _Alloc>>\r\n    : public __str_hash_base<char16_t, _Alloc>\r\n    { };\r\n\r\n\r\n  template<typename _Alloc>\r\n    struct hash<basic_string<char32_t, char_traits<char32_t>, _Alloc>>\r\n    : public __str_hash_base<char32_t, _Alloc>\r\n    { };\r\n\r\n\r\n\r\n  template<> struct __is_fast_hash<hash<string>> : std::false_type { };\r\n"]
[81.380134, "o", "  template<> struct __is_fast_hash<hash<wstring>> : std::false_type { };\r\n  template<> struct __is_fast_hash<hash<u16string>> : std::false_type { };\r\n  template<> struct __is_fast_hash<hash<u32string>> : std::false_type { };\r\n# 4678 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n  inline namespace literals\r\n  {\r\n  inline namespace string_literals\r\n  {\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wliteral-suffix\"\r\n"]
[81.380191, "o", "\r\n\r\n\r\n\r\n\r\n\r\n\r\n    __attribute ((__abi_tag__ (\"cxx11\")))\r\n    inline basic_string<char>\r\n    operator\"\"s(const char* __str, size_t __len)\r\n    { return basic_string<char>{__str, __len}; }\r\n\r\n    __attribute ((__abi_tag__ (\"cxx11\")))\r\n    inline basic_string<wchar_t>\r\n"]
[81.380267, "o", "    operator\"\"s(const wchar_t* __str, size_t __len)\r\n    { return basic_string<wchar_t>{__str, __len}; }\r\n# 4708 \"/usr/include/c++/14.2.1/bits/basic_string.h\" 3\r\n    __attribute ((__abi_tag__ (\"cxx11\")))\r\n    inline basic_string<char16_t>\r\n    operator\"\"s(const char16_t* __str, size_t __len)\r\n    { return basic_string<char16_t>{__str, __len}; }\r\n\r\n    __attribute ((__abi_tag__ (\"cxx11\")))\r\n    inline basic_string<char32_t>\r\n    operator\"\"s(const char32_t* __str, size_t __len)\r\n    { return basic_string<char32_t>{__str, __len}; }\r\n\r\n\r\n#pragma GCC diagnostic pop\r\n  }\r\n  }\r\n\r\n\r\n\r\n  namespace __detail::__variant\r\n  {\r\n    template<typename> struct _Never_valueless_alt;\r\n\r\n"]
[81.380351, "o", "\r\n\r\n    template<typename _Tp, typename _Traits, typename _Alloc>\r\n      struct _Never_valueless_alt<std::basic_string<_Tp, _Traits, _Alloc>>\r\n      : __and_<\r\n is_nothrow_move_constructible<std::basic_string<_Tp, _Traits, _Alloc>>,\r\n is_nothrow_move_assignable<std::basic_string<_Tp, _Traits, _Alloc>>\r\n >::type\r\n      { };\r\n"]
[81.380387, "o", "  }\r\n\r\n\r\n\r\n}\r\n# 55 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.380422, "o", "# 1 \"/usr/include/c++/14.2.1/bits/basic_string.tcc\" 1 3\r\n# 42 \"/usr/include/c++/14.2.1/bits/basic_string.tcc\" 3\r\n       \r\n# 43 \"/usr/include/c++/14.2.1/bits/basic_string.tcc\" 3\r\n"]
[81.380462, "o", "\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    const typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n"]
[81.380505, "o", "    basic_string<_CharT, _Traits, _Alloc>::npos;\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    void\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    swap(basic_string& __s) noexcept\r\n    {\r\n      if (this == std::__addressof(__s))\r\n return;\r\n\r\n"]
[81.380544, "o", "      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());\r\n\r\n      if (_M_is_local())\r\n if (__s._M_is_local())\r\n   {\r\n     if (length() && __s.length())\r\n       {\r\n  _CharT __tmp_data[_S_local_capacity + 1];\r\n  traits_type::copy(__tmp_data, __s._M_local_buf,\r\n      __s.length() + 1);\r\n  traits_type::copy(__s._M_local_buf, _M_local_buf,\r\n      length() + 1);\r\n"]
[81.380576, "o", "  traits_type::copy(_M_local_buf, __tmp_data,\r\n      __s.length() + 1);\r\n       }\r\n     else if (__s.length())\r\n       {\r\n  _M_init_local_buf();\r\n  traits_type::copy(_M_local_buf, __s._M_local_buf,\r\n      __s.length() + 1);\r\n  _M_length(__s.length());\r\n  __s._M_set_length(0);\r\n"]
[81.380609, "o", "  return;\r\n       }\r\n     else if (length())\r\n       {\r\n  __s._M_init_local_buf();\r\n  traits_type::copy(__s._M_local_buf, _M_local_buf,\r\n      length() + 1);\r\n  __s._M_length(length());\r\n  _M_set_length(0);\r\n"]
[81.380645, "o", "  return;\r\n       }\r\n   }\r\n else\r\n   {\r\n     const size_type __tmp_capacity = __s._M_allocated_capacity;\r\n     __s._M_init_local_buf();\r\n     traits_type::copy(__s._M_local_buf, _M_local_buf,\r\n"]
[81.380945, "o", "         length() + 1);\r\n     _M_data(__s._M_data());\r\n     __s._M_data(__s._M_local_buf);\r\n     _M_capacity(__tmp_capacity);\r\n   }\r\n      else\r\n {\r\n   const size_type __tmp_capacity = _M_allocated_capacity;\r\n   if (__s._M_is_local())\r\n"]
[81.38105, "o", "     {\r\n       _M_init_local_buf();\r\n       traits_type::copy(_M_local_buf, __s._M_local_buf,\r\n    __s.length() + 1);\r\n       __s._M_data(_M_data());\r\n       _M_data(_M_local_buf);\r\n     }\r\n   else\r\n     {\r\n       pointer __tmp_ptr = _M_data();\r\n       _M_data(__s._M_data());\r\n       __s._M_data(__tmp_ptr);\r\n       _M_capacity(__s._M_allocated_capacity);\r\n     }\r\n   __s._M_capacity(__tmp_capacity);\r\n }\r\n\r\n      const size_type __tmp_length = length();\r\n      _M_length(__s.length());\r\n      __s._M_length(__tmp_length);\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::pointer\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    _M_create(size_type& __capacity, size_type __old_capacity)\r\n    {\r\n\r\n\r\n      if (__capacity > max_size())\r\n std::__throw_length_error((\"basic_string::_M_create\"));\r\n\r\n\r\n\r\n\r\n      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)\r\n {\r\n   __capacity = 2 * __old_capacity;\r\n\r\n   if (__capacity > max_size())\r\n     __capacity = max_size();\r\n }\r\n\r\n\r\n\r\n      return _S_allocate(_M_get_allocator(), __capacity + 1);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    template<typename _InIterator>\r\n     \r\n      void\r\n      basic_string<_CharT, _Traits, _Alloc>::\r\n      _M_construct(_InIterator __beg, _InIterator __end,\r\n     std::input_iterator_tag)\r\n      {\r\n size_type __len = 0;\r\n size_type __capacity = size_type(_S_local_capacity);\r\n\r\n _M_init_local_buf();\r\n\r\n while (__beg != __end && __len < __capacity)\r\n   {\r\n     _M_local_buf[__len++] = *__beg;\r\n     ++__beg;\r\n   }\r\n\r\n struct _Guard\r\n {\r\n  \r\n   explicit _Guard(basic_string* __s) : _M_guarded(__s) { }\r\n\r\n  \r\n   ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }\r\n\r\n   basic_string* _M_guarded;\r\n } __guard(this);\r\n\r\n while (__beg != __end)\r\n   {\r\n     if (__len == __capacity)\r\n       {\r\n\r\n  __capacity = __len + 1;\r\n  pointer __another = _M_create(__capacity, __len);\r\n  this->_S_copy(__another, _M_data(), __len);\r\n  _M_dispose();\r\n  _M_data(__another);\r\n  _M_capacity(__capacity);\r\n       }\r\n"]
[81.381133, "o", "     traits_type::assign(_M_data()[__len++], *__beg);\r\n     ++__beg;\r\n   }\r\n\r\n __guard._M_guarded = 0;\r\n\r\n _M_set_length(__len);\r\n      }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    template<typename _InIterator>\r\n     \r\n      void\r\n      basic_string<_CharT, _Traits, _Alloc>::\r\n      _M_construct(_InIterator __beg, _InIterator __end,\r\n     std::forward_iterator_tag)\r\n      {\r\n size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\r\n\r\n if (__dnew > size_type(_S_local_capacity))\r\n   {\r\n     _M_data(_M_create(__dnew, size_type(0)));\r\n     _M_capacity(__dnew);\r\n   }\r\n else\r\n   _M_init_local_buf();\r\n\r\n\r\n struct _Guard\r\n {\r\n  \r\n   explicit _Guard(basic_string* __s) : _M_guarded(__s) { }\r\n\r\n  \r\n"]
[81.381215, "o", "   ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }\r\n\r\n   basic_string* _M_guarded;\r\n } __guard(this);\r\n\r\n this->_S_copy_chars(_M_data(), __beg, __end);\r\n\r\n __guard._M_guarded = 0;\r\n\r\n _M_set_length(__dnew);\r\n      }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    void\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    _M_construct(size_type __n, _CharT __c)\r\n    {\r\n      if (__n > size_type(_S_local_capacity))\r\n {\r\n   _M_data(_M_create(__n, size_type(0)));\r\n"]
[81.381294, "o", "   _M_capacity(__n);\r\n }\r\n      else\r\n _M_init_local_buf();\r\n\r\n      if (__n)\r\n this->_S_assign(_M_data(), __n, __c);\r\n\r\n      _M_set_length(__n);\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    void\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    _M_assign(const basic_string& __str)\r\n    {\r\n      if (this != std::__addressof(__str))\r\n {\r\n   const size_type __rsize = __str.length();\r\n   const size_type __capacity = capacity();\r\n\r\n"]
[81.381337, "o", "   if (__rsize > __capacity)\r\n     {\r\n       size_type __new_capacity = __rsize;\r\n       pointer __tmp = _M_create(__new_capacity, __capacity);\r\n       _M_dispose();\r\n       _M_data(__tmp);\r\n       _M_capacity(__new_capacity);\r\n     }\r\n\r\n   if (__rsize)\r\n"]
[81.38138, "o", "     this->_S_copy(_M_data(), __str._M_data(), __rsize);\r\n\r\n   _M_set_length(__rsize);\r\n }\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    void\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    reserve(size_type __res)\r\n    {\r\n"]
[81.381543, "o", "      const size_type __capacity = capacity();\r\n\r\n\r\n\r\n\r\n      if (__res <= __capacity)\r\n return;\r\n\r\n      pointer __tmp = _M_create(__res, __capacity);\r\n      this->_S_copy(__tmp, _M_data(), length() + 1);\r\n      _M_dispose();\r\n      _M_data(__tmp);\r\n      _M_capacity(__res);\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    void\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\r\n       size_type __len2)\r\n    {\r\n      const size_type __how_much = length() - __pos - __len1;\r\n\r\n      size_type __new_capacity = length() + __len2 - __len1;\r\n      pointer __r = _M_create(__new_capacity, capacity());\r\n\r\n      if (__pos)\r\n this->_S_copy(__r, _M_data(), __pos);\r\n      if (__s && __len2)\r\n this->_S_copy(__r + __pos, __s, __len2);\r\n      if (__how_much)\r\n this->_S_copy(__r + __pos + __len2,\r\n        _M_data() + __pos + __len1, __how_much);\r\n\r\n      _M_dispose();\r\n      _M_data(__r);\r\n      _M_capacity(__new_capacity);\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    void\r\n"]
[81.381587, "o", "    basic_string<_CharT, _Traits, _Alloc>::\r\n    _M_erase(size_type __pos, size_type __n)\r\n    {\r\n      const size_type __how_much = length() - __pos - __n;\r\n\r\n      if (__how_much && __n)\r\n this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);\r\n\r\n      _M_set_length(length() - __n);\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    void\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    reserve()\r\n    {\r\n      if (_M_is_local())\r\n return;\r\n\r\n      const size_type __length = length();\r\n"]
[81.38162, "o", "      const size_type __capacity = _M_allocated_capacity;\r\n\r\n      if (__length <= size_type(_S_local_capacity))\r\n {\r\n   _M_init_local_buf();\r\n   this->_S_copy(_M_local_buf, _M_data(), __length + 1);\r\n   _M_destroy(__capacity);\r\n   _M_data(_M_local_data());\r\n }\r\n\r\n      else if (__length < __capacity)\r\n try\r\n   {\r\n"]
[81.381655, "o", "     pointer __tmp = _S_allocate(_M_get_allocator(), __length + 1);\r\n     this->_S_copy(__tmp, _M_data(), __length + 1);\r\n     _M_dispose();\r\n     _M_data(__tmp);\r\n     _M_capacity(__length);\r\n   }\r\n catch (const __cxxabiv1::__forced_unwind&)\r\n   { throw; }\r\n catch (...)\r\n   { }\r\n\r\n"]
[81.381692, "o", "    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    void\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    resize(size_type __n, _CharT __c)\r\n    {\r\n      const size_type __size = this->size();\r\n      if (__size < __n)\r\n this->append(__n - __size, __c);\r\n"]
[81.38185, "o", "      else if (__n < __size)\r\n this->_M_set_length(__n);\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    basic_string<_CharT, _Traits, _Alloc>&\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    _M_append(const _CharT* __s, size_type __n)\r\n    {\r\n      const size_type __len = __n + this->size();\r\n\r\n      if (__len <= this->capacity())\r\n {\r\n   if (__n)\r\n"]
[81.381924, "o", "     this->_S_copy(this->_M_data() + this->size(), __s, __n);\r\n }\r\n      else\r\n this->_M_mutate(this->size(), size_type(0), __s, __n);\r\n\r\n      this->_M_set_length(__len);\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    template<typename _InputIterator>\r\n     \r\n      basic_string<_CharT, _Traits, _Alloc>&\r\n      basic_string<_CharT, _Traits, _Alloc>::\r\n      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,\r\n     _InputIterator __k1, _InputIterator __k2,\r\n     std::__false_type)\r\n      {\r\n\r\n\r\n const basic_string __s(__k1, __k2, this->get_allocator());\r\n const size_type __n1 = __i2 - __i1;\r\n return _M_replace(__i1 - begin(), __n1, __s._M_data(),\r\n     __s.size());\r\n      }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    basic_string<_CharT, _Traits, _Alloc>&\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\r\n     _CharT __c)\r\n    {\r\n      _M_check_length(__n1, __n2, \"basic_string::_M_replace_aux\");\r\n\r\n      const size_type __old_size = this->size();\r\n      const size_type __new_size = __old_size + __n2 - __n1;\r\n\r\n      if (__new_size <= this->capacity())\r\n {\r\n   pointer __p = this->_M_data() + __pos1;\r\n\r\n   const size_type __how_much = __old_size - __pos1 - __n1;\r\n   if (__how_much && __n1 != __n2)\r\n     this->_S_move(__p + __n2, __p + __n1, __how_much);\r\n }\r\n      else\r\n this->_M_mutate(__pos1, __n1, 0, __n2);\r\n\r\n      if (__n2)\r\n this->_S_assign(this->_M_data() + __pos1, __n2, __c);\r\n\r\n      this->_M_set_length(__new_size);\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    __attribute__((__noinline__, __noclone__, __cold__)) void\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    _M_replace_cold(pointer __p, size_type __len1, const _CharT* __s,\r\n      const size_type __len2, const size_type __how_much)\r\n    {\r\n\r\n      if (__len2 && __len2 <= __len1)\r\n this->_S_move(__p, __s, __len2);\r\n      if (__how_much && __len1 != __len2)\r\n"]
[81.382004, "o", " this->_S_move(__p + __len2, __p + __len1, __how_much);\r\n      if (__len2 > __len1)\r\n {\r\n   if (__s + __len2 <= __p + __len1)\r\n     this->_S_move(__p, __s, __len2);\r\n   else if (__s >= __p + __len1)\r\n     {\r\n\r\n\r\n       const size_type __poff = (__s - __p) + (__len2 - __len1);\r\n       this->_S_copy(__p, __p + __poff, __len2);\r\n     }\r\n   else\r\n     {\r\n       const size_type __nleft = (__p + __len1) - __s;\r\n       this->_S_move(__p, __s, __nleft);\r\n       this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft);\r\n     }\r\n }\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    basic_string<_CharT, _Traits, _Alloc>&\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,\r\n        const size_type __len2)\r\n    {\r\n"]
[81.38207, "o", "      _M_check_length(__len1, __len2, \"basic_string::_M_replace\");\r\n\r\n      const size_type __old_size = this->size();\r\n      const size_type __new_size = __old_size + __len2 - __len1;\r\n\r\n      if (__new_size <= this->capacity())\r\n {\r\n   pointer __p = this->_M_data() + __pos;\r\n\r\n   const size_type __how_much = __old_size - __pos - __len1;\r\n# 537 \"/usr/include/c++/14.2.1/bits/basic_string.tcc\" 3\r\n   if (__builtin_expect(_M_disjunct(__s), true))\r\n     {\r\n       if (__how_much && __len1 != __len2)\r\n  this->_S_move(__p + __len2, __p + __len1, __how_much);\r\n       if (__len2)\r\n  this->_S_copy(__p, __s, __len2);\r\n     }\r\n   else\r\n"]
[81.382129, "o", "     _M_replace_cold(__p, __len1, __s, __len2, __how_much);\r\n }\r\n      else\r\n this->_M_mutate(__pos, __len1, __s, __len2);\r\n\r\n      this->_M_set_length(__new_size);\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    copy(_CharT* __s, size_type __n, size_type __pos) const\r\n    {\r\n      _M_check(__pos, \"basic_string::copy\");\r\n      __n = _M_limit(__pos, __n);\r\n      ;\r\n      if (__n)\r\n _S_copy(__s, _M_data() + __pos, __n);\r\n\r\n      return __n;\r\n"]
[81.382187, "o", "    }\r\n# 580 \"/usr/include/c++/14.2.1/bits/basic_string.tcc\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n  template<typename _Operation>\r\n    void\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n\r\n\r\n\r\n    __resize_and_overwrite(const size_type __n, _Operation __op)\r\n\r\n    {\r\n      reserve(__n);\r\n      _CharT* const __p = _M_data();\r\n\r\n\r\n\r\n\r\n      struct _Terminator {\r\n"]
[81.382249, "o", " ~_Terminator() { _M_this->_M_set_length(_M_r); }\r\n basic_string* _M_this;\r\n size_type _M_r;\r\n      };\r\n      _Terminator __term{this, 0};\r\n      auto __r = std::move(__op)(__p + 0, __n + 0);\r\n\r\n\r\n\r\n      static_assert(__gnu_cxx::__is_integer_nonstrict<decltype(__r)>::__value,\r\n      \"resize_and_overwrite operation must return an integer\");\r\n\r\n      ;\r\n      __term._M_r = size_type(__r);\r\n      if (__term._M_r > __n)\r\n __builtin_unreachable();\r\n    }\r\n# 623 \"/usr/include/c++/14.2.1/bits/basic_string.tcc\" 3\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n"]
[81.382316, "o", "   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    find(const _CharT* __s, size_type __pos, size_type __n) const\r\n    noexcept\r\n    {\r\n      ;\r\n      const size_type __size = this->size();\r\n\r\n      if (__n == 0)\r\n return __pos <= __size ? __pos : npos;\r\n      if (__pos >= __size)\r\n return npos;\r\n\r\n      const _CharT __elem0 = __s[0];\r\n      const _CharT* const __data = data();\r\n      const _CharT* __first = __data + __pos;\r\n      const _CharT* const __last = __data + __size;\r\n      size_type __len = __size - __pos;\r\n\r\n"]
[81.382351, "o", "      while (__len >= __n)\r\n {\r\n\r\n   __first = traits_type::find(__first, __len - __n + 1, __elem0);\r\n   if (!__first)\r\n     return npos;\r\n\r\n\r\n\r\n   if (traits_type::compare(__first, __s, __n) == 0)\r\n     return __first - __data;\r\n   __len = __last - ++__first;\r\n }\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n"]
[81.382447, "o", "   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    find(_CharT __c, size_type __pos) const noexcept\r\n    {\r\n      size_type __ret = npos;\r\n      const size_type __size = this->size();\r\n      if (__pos < __size)\r\n {\r\n   const _CharT* __data = _M_data();\r\n   const size_type __n = __size - __pos;\r\n"]
[81.382514, "o", "   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);\r\n   if (__p)\r\n     __ret = __p - __data;\r\n }\r\n      return __ret;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    rfind(const _CharT* __s, size_type __pos, size_type __n) const\r\n    noexcept\r\n    {\r\n      ;\r\n      const size_type __size = this->size();\r\n      if (__n <= __size)\r\n {\r\n   __pos = std::min(size_type(__size - __n), __pos);\r\n   const _CharT* __data = _M_data();\r\n   do\r\n     {\r\n       if (traits_type::compare(__data + __pos, __s, __n) == 0)\r\n  return __pos;\r\n     }\r\n   while (__pos-- > 0);\r\n }\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    rfind(_CharT __c, size_type __pos) const noexcept\r\n    {\r\n      size_type __size = this->size();\r\n      if (__size)\r\n {\r\n   if (--__size > __pos)\r\n     __size = __pos;\r\n   for (++__size; __size-- > 0; )\r\n"]
[81.382582, "o", "     if (traits_type::eq(_M_data()[__size], __c))\r\n       return __size;\r\n }\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\r\n    noexcept\r\n    {\r\n      ;\r\n      for (; __n && __pos < this->size(); ++__pos)\r\n {\r\n   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);\r\n   if (__p)\r\n     return __pos;\r\n }\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n"]
[81.382655, "o", "    basic_string<_CharT, _Traits, _Alloc>::\r\n    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\r\n    noexcept\r\n    {\r\n      ;\r\n      size_type __size = this->size();\r\n      if (__size && __n)\r\n {\r\n   if (--__size > __pos)\r\n     __size = __pos;\r\n   do\r\n     {\r\n       if (traits_type::find(__s, __n, _M_data()[__size]))\r\n  return __size;\r\n     }\r\n   while (__size-- != 0);\r\n }\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\r\n"]
[81.382698, "o", "    noexcept\r\n    {\r\n      ;\r\n      for (; __pos < this->size(); ++__pos)\r\n if (!traits_type::find(__s, __n, _M_data()[__pos]))\r\n   return __pos;\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    find_first_not_of(_CharT __c, size_type __pos) const noexcept\r\n    {\r\n      for (; __pos < this->size(); ++__pos)\r\n"]
[81.382735, "o", " if (!traits_type::eq(_M_data()[__pos], __c))\r\n   return __pos;\r\n      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\r\n    noexcept\r\n    {\r\n      ;\r\n"]
[81.38277, "o", "      size_type __size = this->size();\r\n      if (__size)\r\n {\r\n   if (--__size > __pos)\r\n     __size = __pos;\r\n   do\r\n     {\r\n       if (!traits_type::find(__s, __n, _M_data()[__size]))\r\n  return __size;\r\n     }\r\n   while (__size--);\r\n }\r\n"]
[81.38288, "o", "      return npos;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n   \r\n    typename basic_string<_CharT, _Traits, _Alloc>::size_type\r\n    basic_string<_CharT, _Traits, _Alloc>::\r\n    find_last_not_of(_CharT __c, size_type __pos) const noexcept\r\n    {\r\n      size_type __size = this->size();\r\n      if (__size)\r\n {\r\n   if (--__size > __pos)\r\n     __size = __pos;\r\n   do\r\n     {\r\n       if (!traits_type::eq(_M_data()[__size], __c))\r\n  return __size;\r\n     }\r\n   while (__size--);\r\n }\r\n      return npos;\r\n    }\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    basic_istream<_CharT, _Traits>&\r\n    operator>>(basic_istream<_CharT, _Traits>& __in,\r\n        basic_string<_CharT, _Traits, _Alloc>& __str)\r\n    {\r\n      typedef basic_istream<_CharT, _Traits> __istream_type;\r\n      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\r\n      typedef typename __istream_type::ios_base __ios_base;\r\n      typedef typename __istream_type::int_type __int_type;\r\n      typedef typename __string_type::size_type __size_type;\r\n      typedef ctype<_CharT> __ctype_type;\r\n"]
[81.382953, "o", "      typedef typename __ctype_type::ctype_base __ctype_base;\r\n\r\n      __size_type __extracted = 0;\r\n      typename __ios_base::iostate __err = __ios_base::goodbit;\r\n      typename __istream_type::sentry __cerb(__in, false);\r\n      if (__cerb)\r\n {\r\n   try\r\n     {\r\n\r\n       __str.erase();\r\n       _CharT __buf[128];\r\n       __size_type __len = 0;\r\n       const streamsize __w = __in.width();\r\n       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)\r\n                                : __str.max_size();\r\n       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\r\n       const __int_type __eof = _Traits::eof();\r\n       __int_type __c = __in.rdbuf()->sgetc();\r\n\r\n       while (__extracted < __n\r\n       && !_Traits::eq_int_type(__c, __eof)\r\n       && !__ct.is(__ctype_base::space,\r\n"]
[81.383018, "o", "     _Traits::to_char_type(__c)))\r\n  {\r\n    if (__len == sizeof(__buf) / sizeof(_CharT))\r\n      {\r\n        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));\r\n        __len = 0;\r\n      }\r\n    __buf[__len++] = _Traits::to_char_type(__c);\r\n    ++__extracted;\r\n    __c = __in.rdbuf()->snextc();\r\n  }\r\n       __str.append(__buf, __len);\r\n\r\n       if (__extracted < __n && _Traits::eq_int_type(__c, __eof))\r\n  __err |= __ios_base::eofbit;\r\n       __in.width(0);\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       __in._M_setstate(__ios_base::badbit);\r\n       throw;\r\n     }\r\n"]
[81.383094, "o", "   catch(...)\r\n     {\r\n\r\n\r\n\r\n       __in._M_setstate(__ios_base::badbit);\r\n     }\r\n }\r\n\r\n      if (!__extracted)\r\n __err |= __ios_base::failbit;\r\n      if (__err)\r\n __in.setstate(__err);\r\n      return __in;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    basic_istream<_CharT, _Traits>&\r\n    getline(basic_istream<_CharT, _Traits>& __in,\r\n     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)\r\n    {\r\n      typedef basic_istream<_CharT, _Traits> __istream_type;\r\n      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\r\n      typedef typename __istream_type::ios_base __ios_base;\r\n      typedef typename __istream_type::int_type __int_type;\r\n      typedef typename __string_type::size_type __size_type;\r\n\r\n      __size_type __extracted = 0;\r\n"]
[81.383181, "o", "      const __size_type __n = __str.max_size();\r\n      typename __ios_base::iostate __err = __ios_base::goodbit;\r\n      typename __istream_type::sentry __cerb(__in, true);\r\n      if (__cerb)\r\n {\r\n   try\r\n     {\r\n       __str.erase();\r\n       const __int_type __idelim = _Traits::to_int_type(__delim);\r\n       const __int_type __eof = _Traits::eof();\r\n       __int_type __c = __in.rdbuf()->sgetc();\r\n\r\n       while (__extracted < __n\r\n       && !_Traits::eq_int_type(__c, __eof)\r\n       && !_Traits::eq_int_type(__c, __idelim))\r\n  {\r\n    __str += _Traits::to_char_type(__c);\r\n    ++__extracted;\r\n    __c = __in.rdbuf()->snextc();\r\n  }\r\n\r\n       if (_Traits::eq_int_type(__c, __eof))\r\n  __err |= __ios_base::eofbit;\r\n       else if (_Traits::eq_int_type(__c, __idelim))\r\n  {\r\n    ++__extracted;\r\n    __in.rdbuf()->sbumpc();\r\n  }\r\n       else\r\n  __err |= __ios_base::failbit;\r\n     }\r\n"]
[81.383253, "o", "   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       __in._M_setstate(__ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     {\r\n\r\n\r\n\r\n       __in._M_setstate(__ios_base::badbit);\r\n     }\r\n }\r\n      if (!__extracted)\r\n __err |= __ios_base::failbit;\r\n      if (__err)\r\n __in.setstate(__err);\r\n      return __in;\r\n    }\r\n# 977 \"/usr/include/c++/14.2.1/bits/basic_string.tcc\" 3\r\n  extern template class basic_string<char>;\r\n# 990 \"/usr/include/c++/14.2.1/bits/basic_string.tcc\" 3\r\n  extern template\r\n    basic_istream<char>&\r\n"]
[81.383313, "o", "    operator>>(basic_istream<char>&, string&);\r\n  extern template\r\n    basic_ostream<char>&\r\n    operator<<(basic_ostream<char>&, const string&);\r\n  extern template\r\n    basic_istream<char>&\r\n    getline(basic_istream<char>&, string&, char);\r\n  extern template\r\n    basic_istream<char>&\r\n    getline(basic_istream<char>&, string&);\r\n\r\n\r\n\r\n  extern template class basic_string<wchar_t>;\r\n# 1016 \"/usr/include/c++/14.2.1/bits/basic_string.tcc\" 3\r\n  extern template\r\n    basic_istream<wchar_t>&\r\n    operator>>(basic_istream<wchar_t>&, wstring&);\r\n  extern template\r\n    basic_ostream<wchar_t>&\r\n"]
[81.383374, "o", "    operator<<(basic_ostream<wchar_t>&, const wstring&);\r\n  extern template\r\n    basic_istream<wchar_t>&\r\n    getline(basic_istream<wchar_t>&, wstring&, wchar_t);\r\n  extern template\r\n    basic_istream<wchar_t>&\r\n    getline(basic_istream<wchar_t>&, wstring&);\r\n\r\n\r\n\r\n\r\n}\r\n# 56 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.383433, "o", "# 65 \"/usr/include/c++/14.2.1/string\" 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.384616, "o", "# 66 \"/usr/include/c++/14.2.1/string\" 2 3\r\n"]
[81.384649, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 3\r\n"]
[81.384748, "o", "\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/cstddef\" 1 3\r\n# 42 \"/usr/include/c++/14.2.1/cstddef\" 3\r\n       \r\n# 43 \"/usr/include/c++/14.2.1/cstddef\" 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include/stddef.h\" 1 3 4\r\n"]
[81.38489, "o", "# 51 \"/usr/include/c++/14.2.1/cstddef\" 2 3\r\n"]
[81.384947, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.385956, "o", "# 54 \"/usr/include/c++/14.2.1/cstddef\" 2 3\r\n\r\nextern \"C++\"\r\n{\r\n\r\nnamespace std\r\n{\r\n\r\n  using ::max_align_t;\r\n"]
[81.38599, "o", "}\r\n\r\n\r\n\r\nnamespace std\r\n{\r\n\r\n\r\n  enum class byte : unsigned char {};\r\n\r\n  template<typename _IntegerType> struct __byte_operand { };\r\n  template<> struct __byte_operand<bool> { using __type = byte; };\r\n  template<> struct __byte_operand<char> { using __type = byte; };\r\n  template<> struct __byte_operand<signed char> { using __type = byte; };\r\n  template<> struct __byte_operand<unsigned char> { using __type = byte; };\r\n"]
[81.38602, "o", "  template<> struct __byte_operand<wchar_t> { using __type = byte; };\r\n\r\n\r\n\r\n  template<> struct __byte_operand<char16_t> { using __type = byte; };\r\n  template<> struct __byte_operand<char32_t> { using __type = byte; };\r\n  template<> struct __byte_operand<short> { using __type = byte; };\r\n  template<> struct __byte_operand<unsigned short> { using __type = byte; };\r\n"]
[81.386055, "o", "  template<> struct __byte_operand<int> { using __type = byte; };\r\n  template<> struct __byte_operand<unsigned int> { using __type = byte; };\r\n  template<> struct __byte_operand<long> { using __type = byte; };\r\n  template<> struct __byte_operand<unsigned long> { using __type = byte; };\r\n  template<> struct __byte_operand<long long> { using __type = byte; };\r\n  template<> struct __byte_operand<unsigned long long> { using __type = byte; };\r\n\r\n  template<> struct __byte_operand<__int128>\r\n"]
[81.38609, "o", "  { using __type = byte; };\r\n  template<> struct __byte_operand<unsigned __int128>\r\n  { using __type = byte; };\r\n# 109 \"/usr/include/c++/14.2.1/cstddef\" 3\r\n  template<typename _IntegerType>\r\n    struct __byte_operand<const _IntegerType>\r\n    : __byte_operand<_IntegerType> { };\r\n  template<typename _IntegerType>\r\n    struct __byte_operand<volatile _IntegerType>\r\n"]
[81.386123, "o", "    : __byte_operand<_IntegerType> { };\r\n  template<typename _IntegerType>\r\n    struct __byte_operand<const volatile _IntegerType>\r\n    : __byte_operand<_IntegerType> { };\r\n\r\n  template<typename _IntegerType>\r\n    using __byte_op_t = typename __byte_operand<_IntegerType>::__type;\r\n\r\n  template<typename _IntegerType>\r\n    [[__gnu__::__always_inline__]]\r\n    constexpr __byte_op_t<_IntegerType>\r\n    operator<<(byte __b, _IntegerType __shift) noexcept\r\n"]
[81.386163, "o", "    { return (byte)(unsigned char)((unsigned)__b << __shift); }\r\n\r\n  template<typename _IntegerType>\r\n    [[__gnu__::__always_inline__]]\r\n    constexpr __byte_op_t<_IntegerType>\r\n    operator>>(byte __b, _IntegerType __shift) noexcept\r\n    { return (byte)(unsigned char)((unsigned)__b >> __shift); }\r\n\r\n  [[__gnu__::__always_inline__]]\r\n  constexpr byte\r\n  operator|(byte __l, byte __r) noexcept\r\n"]
[81.386193, "o", "  { return (byte)(unsigned char)((unsigned)__l | (unsigned)__r); }\r\n\r\n  [[__gnu__::__always_inline__]]\r\n  constexpr byte\r\n  operator&(byte __l, byte __r) noexcept\r\n  { return (byte)(unsigned char)((unsigned)__l & (unsigned)__r); }\r\n\r\n  [[__gnu__::__always_inline__]]\r\n  constexpr byte\r\n  operator^(byte __l, byte __r) noexcept\r\n  { return (byte)(unsigned char)((unsigned)__l ^ (unsigned)__r); }\r\n\r\n  [[__gnu__::__always_inline__]]\r\n  constexpr byte\r\n"]
[81.386223, "o", "  operator~(byte __b) noexcept\r\n  { return (byte)(unsigned char)~(unsigned)__b; }\r\n\r\n  template<typename _IntegerType>\r\n    [[__gnu__::__always_inline__]]\r\n    constexpr __byte_op_t<_IntegerType>&\r\n    operator<<=(byte& __b, _IntegerType __shift) noexcept\r\n    { return __b = __b << __shift; }\r\n\r\n  template<typename _IntegerType>\r\n    [[__gnu__::__always_inline__]]\r\n"]
[81.386258, "o", "    constexpr __byte_op_t<_IntegerType>&\r\n    operator>>=(byte& __b, _IntegerType __shift) noexcept\r\n    { return __b = __b >> __shift; }\r\n\r\n  [[__gnu__::__always_inline__]]\r\n  constexpr byte&\r\n  operator|=(byte& __l, byte __r) noexcept\r\n  { return __l = __l | __r; }\r\n\r\n  [[__gnu__::__always_inline__]]\r\n  constexpr byte&\r\n  operator&=(byte& __l, byte __r) noexcept\r\n"]
[81.386291, "o", "  { return __l = __l & __r; }\r\n\r\n  [[__gnu__::__always_inline__]]\r\n  constexpr byte&\r\n  operator^=(byte& __l, byte __r) noexcept\r\n  { return __l = __l ^ __r; }\r\n\r\n  template<typename _IntegerType>\r\n    [[nodiscard,__gnu__::__always_inline__]]\r\n    constexpr _IntegerType\r\n    to_integer(__byte_op_t<_IntegerType> __b) noexcept\r\n    { return _IntegerType(__b); }\r\n\r\n"]
[81.386324, "o", "\r\n}\r\n\r\n}\r\n# 39 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 2 3\r\n"]
[81.386667, "o", "\r\n# 1 \"/usr/include/c++/14.2.1/bits/uses_allocator.h\" 1 3\r\n# 40 \"/usr/include/c++/14.2.1/bits/uses_allocator.h\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n  struct __erased_type { };\r\n\r\n\r\n\r\n\r\n  template<typename _Alloc, typename _Tp>\r\n    using __is_erased_or_convertible\r\n      = __or_<is_convertible<_Alloc, _Tp>, is_same<_Tp, __erased_type>>;\r\n\r\n\r\n  struct allocator_arg_t { explicit allocator_arg_t() = default; };\r\n\r\n  inline constexpr allocator_arg_t allocator_arg =\r\n    allocator_arg_t();\r\n\r\n  template<typename _Tp, typename _Alloc, typename = __void_t<>>\r\n    struct __uses_allocator_helper\r\n    : false_type { };\r\n\r\n  template<typename _Tp, typename _Alloc>\r\n    struct __uses_allocator_helper<_Tp, _Alloc,\r\n       __void_t<typename _Tp::allocator_type>>\r\n    : __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type\r\n    { };\r\n\r\n\r\n  template<typename _Tp, typename _Alloc>\r\n    struct uses_allocator\r\n    : __uses_allocator_helper<_Tp, _Alloc>::type\r\n    { };\r\n\r\n  struct __uses_alloc_base { };\r\n\r\n  struct __uses_alloc0 : __uses_alloc_base\r\n  {\r\n    struct _Sink { void operator=(const void*) { } } _M_a;\r\n  };\r\n\r\n  template<typename _Alloc>\r\n    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };\r\n\r\n  template<typename _Alloc>\r\n    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };\r\n\r\n  template<bool, typename _Tp, typename _Alloc, typename... _Args>\r\n    struct __uses_alloc;\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n    struct __uses_alloc<true, _Tp, _Alloc, _Args...>\r\n    : __conditional_t<\r\n        is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>::value,\r\n        __uses_alloc1<_Alloc>,\r\n        __uses_alloc2<_Alloc>>\r\n    {\r\n\r\n\r\n      static_assert(__or_<\r\n   is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>,\r\n   is_constructible<_Tp, _Args..., const _Alloc&>>::value,\r\n   \"construction with an allocator must be possible\"\r\n   \" if uses_allocator is true\");\r\n    };\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n    struct __uses_alloc<false, _Tp, _Alloc, _Args...>\r\n    : __uses_alloc0 { };\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n    using __uses_alloc_t =\r\n      __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n   \r\n    inline __uses_alloc_t<_Tp, _Alloc, _Args...>\r\n    __use_alloc(const _Alloc& __a)\r\n    {\r\n      __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;\r\n      __ret._M_a = std::__addressof(__a);\r\n      return __ret;\r\n    }\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n    void\r\n    __use_alloc(const _Alloc&&) = delete;\r\n\r\n\r\n  template <typename _Tp, typename _Alloc>\r\n    inline constexpr bool uses_allocator_v =\r\n      uses_allocator<_Tp, _Alloc>::value;\r\n\r\n\r\n  template<template<typename...> class _Predicate,\r\n    typename _Tp, typename _Alloc, typename... _Args>\r\n    struct __is_uses_allocator_predicate\r\n    : __conditional_t<uses_allocator<_Tp, _Alloc>::value,\r\n      __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>,\r\n     _Predicate<_Tp, _Args..., _Alloc>>,\r\n      _Predicate<_Tp, _Args...>> { };\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n    struct __is_uses_allocator_constructible\r\n    : __is_uses_allocator_predicate<is_constructible, _Tp, _Alloc, _Args...>\r\n    { };\r\n\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n    inline constexpr bool __is_uses_allocator_constructible_v =\r\n"]
[81.386731, "o", "      __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;\r\n\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n    struct __is_nothrow_uses_allocator_constructible\r\n    : __is_uses_allocator_predicate<is_nothrow_constructible,\r\n        _Tp, _Alloc, _Args...>\r\n    { };\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n    inline constexpr bool\r\n    __is_nothrow_uses_allocator_constructible_v =\r\n      __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;\r\n\r\n\r\n  template<typename _Tp, typename... _Args>\r\n    void __uses_allocator_construct_impl(__uses_alloc0, _Tp* __ptr,\r\n      _Args&&... __args)\r\n    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...); }\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n"]
[81.386799, "o", "    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,\r\n      _Args&&... __args)\r\n    {\r\n      ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a,\r\n          std::forward<_Args>(__args)...);\r\n    }\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,\r\n      _Args&&... __args)\r\n    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a); }\r\n\r\n  template<typename _Tp, typename _Alloc, typename... _Args>\r\n    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,\r\n        _Args&&... __args)\r\n    {\r\n      std::__uses_allocator_construct_impl(\r\n   std::__use_alloc<_Tp, _Alloc, _Args...>(__a), __ptr,\r\n   std::forward<_Args>(__args)...);\r\n    }\r\n\r\n\r\n\r\n}\r\n"]
[81.386832, "o", "# 41 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/uses_allocator_args.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/uses_allocator_args.h\" 3\r\n       \r\n"]
[81.386858, "o", "# 34 \"/usr/include/c++/14.2.1/bits/uses_allocator_args.h\" 3\r\n"]
[81.386945, "o", "\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.387939, "o", "# 36 \"/usr/include/c++/14.2.1/bits/uses_allocator_args.h\" 2 3\r\n"]
[81.388048, "o", "# 42 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 2 3\r\n"]
[81.3881, "o", "\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/tuple\" 1 3\r\n# 32 \"/usr/include/c++/14.2.1/tuple\" 3\r\n       \r\n"]
[81.388151, "o", "# 33 \"/usr/include/c++/14.2.1/tuple\" 3\r\n"]
[81.388202, "o", "# 54 \"/usr/include/c++/14.2.1/tuple\" 3\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.389305, "o", "# 55 \"/usr/include/c++/14.2.1/tuple\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.389368, "o", "\r\n\r\n  template<typename... _Elements>\r\n    class tuple;\r\n\r\n  template<typename _Tp>\r\n    struct __is_empty_non_tuple : is_empty<_Tp> { };\r\n\r\n\r\n  template<typename _El0, typename... _El>\r\n    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };\r\n\r\n\r\n  template<typename _Tp>\r\n    using __empty_not_final\r\n    = __conditional_t<__is_final(_Tp), false_type,\r\n        __is_empty_non_tuple<_Tp>>;\r\n\r\n  template<size_t _Idx, typename _Head,\r\n    bool = __empty_not_final<_Head>::value>\r\n    struct _Head_base;\r\n\r\n\r\n  template<size_t _Idx, typename _Head>\r\n"]
[81.389428, "o", "    struct _Head_base<_Idx, _Head, true>\r\n    {\r\n      constexpr _Head_base()\r\n      : _M_head_impl() { }\r\n\r\n      constexpr _Head_base(const _Head& __h)\r\n      : _M_head_impl(__h) { }\r\n\r\n      constexpr _Head_base(const _Head_base&) = default;\r\n      constexpr _Head_base(_Head_base&&) = default;\r\n\r\n      template<typename _UHead>\r\n constexpr _Head_base(_UHead&& __h)\r\n : _M_head_impl(std::forward<_UHead>(__h)) { }\r\n\r\n     \r\n      _Head_base(allocator_arg_t, __uses_alloc0)\r\n      : _M_head_impl() { }\r\n\r\n      template<typename _Alloc>\r\n\r\n"]
[81.389505, "o", " _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)\r\n : _M_head_impl(allocator_arg, *__a._M_a) { }\r\n\r\n      template<typename _Alloc>\r\n\r\n _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)\r\n : _M_head_impl(*__a._M_a) { }\r\n\r\n      template<typename _UHead>\r\n\r\n _Head_base(__uses_alloc0, _UHead&& __uhead)\r\n : _M_head_impl(std::forward<_UHead>(__uhead)) { }\r\n\r\n      template<typename _Alloc, typename _UHead>\r\n\r\n _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)\r\n"]
[81.389578, "o", " : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))\r\n { }\r\n\r\n      template<typename _Alloc, typename _UHead>\r\n\r\n _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)\r\n : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }\r\n\r\n      static constexpr _Head&\r\n      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }\r\n\r\n      static constexpr const _Head&\r\n      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }\r\n\r\n      [[__no_unique_address__]] _Head _M_head_impl;\r\n    };\r\n# 195 \"/usr/include/c++/14.2.1/tuple\" 3\r\n  template<size_t _Idx, typename _Head>\r\n    struct _Head_base<_Idx, _Head, false>\r\n    {\r\n      constexpr _Head_base()\r\n      : _M_head_impl() { }\r\n\r\n      constexpr _Head_base(const _Head& __h)\r\n      : _M_head_impl(__h) { }\r\n\r\n      constexpr _Head_base(const _Head_base&) = default;\r\n      constexpr _Head_base(_Head_base&&) = default;\r\n\r\n      template<typename _UHead>\r\n"]
[81.389665, "o", "        constexpr _Head_base(_UHead&& __h)\r\n : _M_head_impl(std::forward<_UHead>(__h)) { }\r\n\r\n     \r\n      _Head_base(allocator_arg_t, __uses_alloc0)\r\n      : _M_head_impl() { }\r\n\r\n      template<typename _Alloc>\r\n\r\n _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)\r\n : _M_head_impl(allocator_arg, *__a._M_a) { }\r\n\r\n      template<typename _Alloc>\r\n\r\n _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)\r\n : _M_head_impl(*__a._M_a) { }\r\n\r\n      template<typename _UHead>\r\n\r\n _Head_base(__uses_alloc0, _UHead&& __uhead)\r\n"]
[81.389735, "o", " : _M_head_impl(std::forward<_UHead>(__uhead)) { }\r\n\r\n      template<typename _Alloc, typename _UHead>\r\n\r\n _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)\r\n : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))\r\n { }\r\n\r\n      template<typename _Alloc, typename _UHead>\r\n\r\n _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)\r\n : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }\r\n\r\n      static constexpr _Head&\r\n      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }\r\n\r\n      static constexpr const _Head&\r\n      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }\r\n\r\n      _Head _M_head_impl;\r\n    };\r\n# 274 \"/usr/include/c++/14.2.1/tuple\" 3\r\n  template<size_t _Idx, typename... _Elements>\r\n    struct _Tuple_impl;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<size_t _Idx, typename _Head, typename... _Tail>\r\n    struct _Tuple_impl<_Idx, _Head, _Tail...>\r\n    : public _Tuple_impl<_Idx + 1, _Tail...>,\r\n      private _Head_base<_Idx, _Head>\r\n    {\r\n      template<size_t, typename...> friend struct _Tuple_impl;\r\n\r\n"]
[81.389802, "o", "      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;\r\n      typedef _Head_base<_Idx, _Head> _Base;\r\n\r\n      static constexpr _Head&\r\n      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\r\n\r\n      static constexpr const _Head&\r\n      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\r\n\r\n      static constexpr _Inherited&\r\n      _M_tail(_Tuple_impl& __t) noexcept { return __t; }\r\n\r\n      static constexpr const _Inherited&\r\n      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }\r\n\r\n      constexpr _Tuple_impl()\r\n      : _Inherited(), _Base() { }\r\n\r\n      explicit constexpr\r\n      _Tuple_impl(const _Head& __head, const _Tail&... __tail)\r\n      : _Inherited(__tail...), _Base(__head)\r\n      { }\r\n\r\n      template<typename _UHead, typename... _UTail,\r\n        typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>\r\n explicit constexpr\r\n"]
[81.389876, "o", " _Tuple_impl(_UHead&& __head, _UTail&&... __tail)\r\n : _Inherited(std::forward<_UTail>(__tail)...),\r\n   _Base(std::forward<_UHead>(__head))\r\n { }\r\n\r\n      constexpr _Tuple_impl(const _Tuple_impl&) = default;\r\n\r\n\r\n\r\n      _Tuple_impl& operator=(const _Tuple_impl&) = delete;\r\n\r\n      _Tuple_impl(_Tuple_impl&&) = default;\r\n\r\n      template<typename... _UElements>\r\n constexpr\r\n _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)\r\n : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),\r\n   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in))\r\n { }\r\n\r\n      template<typename _UHead, typename... _UTails>\r\n constexpr\r\n _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\r\n : _Inherited(std::move\r\n"]
[81.389938, "o", "       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),\r\n   _Base(std::forward<_UHead>\r\n  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))\r\n { }\r\n# 370 \"/usr/include/c++/14.2.1/tuple\" 3\r\n      template<typename _Alloc>\r\n\r\n _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)\r\n : _Inherited(__tag, __a),\r\n   _Base(__tag, __use_alloc<_Head>(__a))\r\n { }\r\n\r\n      template<typename _Alloc>\r\n\r\n _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\r\n      const _Head& __head, const _Tail&... __tail)\r\n : _Inherited(__tag, __a, __tail...),\r\n"]
[81.390004, "o", "   _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head)\r\n { }\r\n\r\n      template<typename _Alloc, typename _UHead, typename... _UTail,\r\n        typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>\r\n\r\n _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\r\n      _UHead&& __head, _UTail&&... __tail)\r\n : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),\r\n   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\r\n  std::forward<_UHead>(__head))\r\n { }\r\n\r\n      template<typename _Alloc>\r\n\r\n _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\r\n      const _Tuple_impl& __in)\r\n : _Inherited(__tag, __a, _M_tail(__in)),\r\n   _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in))\r\n { }\r\n\r\n"]
[81.390067, "o", "      template<typename _Alloc>\r\n\r\n _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\r\n      _Tuple_impl&& __in)\r\n : _Inherited(__tag, __a, std::move(_M_tail(__in))),\r\n   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\r\n  std::forward<_Head>(_M_head(__in)))\r\n { }\r\n\r\n      template<typename _Alloc, typename _UHead, typename... _UTails>\r\n\r\n _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\r\n      const _Tuple_impl<_Idx, _UHead, _UTails...>& __in)\r\n : _Inherited(__tag, __a,\r\n       _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),\r\n   _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),\r\n  _Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))\r\n { }\r\n\r\n      template<typename _Alloc, typename _UHead, typename... _UTails>\r\n\r\n _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\r\n"]
[81.390145, "o", "      _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\r\n : _Inherited(__tag, __a, std::move\r\n       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),\r\n   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\r\n  std::forward<_UHead>\r\n  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))\r\n { }\r\n# 465 \"/usr/include/c++/14.2.1/tuple\" 3\r\n      template<typename... _UElements>\r\n\r\n void\r\n _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)\r\n {\r\n   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);\r\n   _M_tail(*this)._M_assign(\r\n       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));\r\n }\r\n\r\n      template<typename _UHead, typename... _UTails>\r\n"]
[81.390216, "o", "\r\n void\r\n _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\r\n {\r\n   _M_head(*this) = std::forward<_UHead>\r\n     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));\r\n   _M_tail(*this)._M_assign(\r\n       std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));\r\n }\r\n# 525 \"/usr/include/c++/14.2.1/tuple\" 3\r\n    protected:\r\n     \r\n      void\r\n      _M_swap(_Tuple_impl& __in)\r\n      {\r\n using std::swap;\r\n swap(_M_head(*this), _M_head(__in));\r\n _Inherited::_M_swap(_M_tail(__in));\r\n"]
[81.390285, "o", "      }\r\n# 544 \"/usr/include/c++/14.2.1/tuple\" 3\r\n    };\r\n\r\n\r\n  template<size_t _Idx, typename _Head>\r\n    struct _Tuple_impl<_Idx, _Head>\r\n    : private _Head_base<_Idx, _Head>\r\n    {\r\n      template<size_t, typename...> friend struct _Tuple_impl;\r\n\r\n      typedef _Head_base<_Idx, _Head> _Base;\r\n\r\n      static constexpr _Head&\r\n      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\r\n\r\n      static constexpr const _Head&\r\n      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\r\n\r\n      constexpr\r\n      _Tuple_impl()\r\n      : _Base() { }\r\n\r\n      explicit constexpr\r\n      _Tuple_impl(const _Head& __head)\r\n"]
[81.390348, "o", "      : _Base(__head)\r\n      { }\r\n\r\n      template<typename _UHead>\r\n explicit constexpr\r\n _Tuple_impl(_UHead&& __head)\r\n : _Base(std::forward<_UHead>(__head))\r\n { }\r\n\r\n      constexpr _Tuple_impl(const _Tuple_impl&) = default;\r\n\r\n\r\n\r\n      _Tuple_impl& operator=(const _Tuple_impl&) = delete;\r\n\r\n\r\n\r\n\r\n      constexpr\r\n      _Tuple_impl(_Tuple_impl&& __in)\r\n      noexcept(is_nothrow_move_constructible<_Head>::value)\r\n      : _Base(static_cast<_Base&&>(__in))\r\n      { }\r\n\r\n\r\n      template<typename _UHead>\r\n constexpr\r\n _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)\r\n"]
[81.390415, "o", " : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))\r\n { }\r\n\r\n      template<typename _UHead>\r\n constexpr\r\n _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)\r\n : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))\r\n { }\r\n# 626 \"/usr/include/c++/14.2.1/tuple\" 3\r\n      template<typename _Alloc>\r\n\r\n _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)\r\n : _Base(__tag, __use_alloc<_Head>(__a))\r\n { }\r\n\r\n      template<typename _Alloc>\r\n\r\n _Tuple_impl(allocator_arg_t, const _Alloc& __a,\r\n      const _Head& __head)\r\n : _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), __head)\r\n { }\r\n"]
[81.390483, "o", "\r\n      template<typename _Alloc, typename _UHead>\r\n\r\n _Tuple_impl(allocator_arg_t, const _Alloc& __a,\r\n      _UHead&& __head)\r\n : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\r\n  std::forward<_UHead>(__head))\r\n { }\r\n\r\n      template<typename _Alloc>\r\n\r\n _Tuple_impl(allocator_arg_t, const _Alloc& __a,\r\n      const _Tuple_impl& __in)\r\n : _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), _M_head(__in))\r\n { }\r\n\r\n      template<typename _Alloc>\r\n\r\n _Tuple_impl(allocator_arg_t, const _Alloc& __a,\r\n      _Tuple_impl&& __in)\r\n : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\r\n  std::forward<_Head>(_M_head(__in)))\r\n { }\r\n\r\n      template<typename _Alloc, typename _UHead>\r\n\r\n"]
[81.390515, "o", " _Tuple_impl(allocator_arg_t, const _Alloc& __a,\r\n      const _Tuple_impl<_Idx, _UHead>& __in)\r\n : _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),\r\n  _Tuple_impl<_Idx, _UHead>::_M_head(__in))\r\n { }\r\n\r\n      template<typename _Alloc, typename _UHead>\r\n\r\n _Tuple_impl(allocator_arg_t, const _Alloc& __a,\r\n      _Tuple_impl<_Idx, _UHead>&& __in)\r\n : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\r\n"]
[81.390543, "o", "  std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))\r\n { }\r\n# 705 \"/usr/include/c++/14.2.1/tuple\" 3\r\n      template<typename _UHead>\r\n\r\n"]
[81.390578, "o", " void\r\n _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)\r\n {\r\n   _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);\r\n }\r\n\r\n      template<typename _UHead>\r\n\r\n void\r\n _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)\r\n {\r\n   _M_head(*this)\r\n"]
[81.39062, "o", "     = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));\r\n }\r\n# 751 \"/usr/include/c++/14.2.1/tuple\" 3\r\n    protected:\r\n     \r\n      void\r\n      _M_swap(_Tuple_impl& __in)\r\n      {\r\n using std::swap;\r\n"]
[81.39066, "o", " swap(_M_head(*this), _M_head(__in));\r\n      }\r\n# 768 \"/usr/include/c++/14.2.1/tuple\" 3\r\n    };\r\n\r\n\r\n\r\n  template<bool, typename... _Types>\r\n    struct _TupleConstraints\r\n    {\r\n      template<typename... _UTypes>\r\n using __constructible = __and_<is_constructible<_Types, _UTypes>...>;\r\n\r\n      template<typename... _UTypes>\r\n using __convertible = __and_<is_convertible<_UTypes, _Types>...>;\r\n\r\n\r\n\r\n"]
[81.390699, "o", "\r\n      template<typename... _UTypes>\r\n static constexpr bool __is_implicitly_constructible()\r\n {\r\n   return __and_<__constructible<_UTypes...>,\r\n   __convertible<_UTypes...>\r\n   >::value;\r\n }\r\n\r\n\r\n\r\n\r\n      template<typename... _UTypes>\r\n static constexpr bool __is_explicitly_constructible()\r\n {\r\n   return __and_<__constructible<_UTypes...>,\r\n"]
[81.390877, "o", "   __not_<__convertible<_UTypes...>>\r\n   >::value;\r\n }\r\n\r\n      static constexpr bool __is_implicitly_default_constructible()\r\n      {\r\n return __and_<std::__is_implicitly_default_constructible<_Types>...\r\n        >::value;\r\n      }\r\n\r\n      static constexpr bool __is_explicitly_default_constructible()\r\n      {\r\n return __and_<is_default_constructible<_Types>...,\r\n        __not_<__and_<\r\n   std::__is_implicitly_default_constructible<_Types>...>\r\n        >>::value;\r\n      }\r\n    };\r\n\r\n\r\n\r\n  template<typename... _Types>\r\n    struct _TupleConstraints<false, _Types...>\r\n    {\r\n      template<typename... _UTypes>\r\n static constexpr bool __is_implicitly_constructible()\r\n { return false; }\r\n\r\n      template<typename... _UTypes>\r\n static constexpr bool __is_explicitly_constructible()\r\n { return false; }\r\n    };\r\n\r\n\r\n  template<typename... _Elements>\r\n    class tuple : public _Tuple_impl<0, _Elements...>\r\n    {\r\n"]
[81.391133, "o", "      using _Inherited = _Tuple_impl<0, _Elements...>;\r\n# 1351 \"/usr/include/c++/14.2.1/tuple\" 3\r\n      template<bool _Cond>\r\n using _TCC = _TupleConstraints<_Cond, _Elements...>;\r\n\r\n\r\n      template<bool _Dummy>\r\n using _ImplicitDefaultCtor = __enable_if_t<\r\n   _TCC<_Dummy>::__is_implicitly_default_constructible(),\r\n   bool>;\r\n"]
[81.391216, "o", "\r\n\r\n      template<bool _Dummy>\r\n using _ExplicitDefaultCtor = __enable_if_t<\r\n   _TCC<_Dummy>::__is_explicitly_default_constructible(),\r\n   bool>;\r\n\r\n\r\n      template<bool _Cond, typename... _Args>\r\n using _ImplicitCtor = __enable_if_t<\r\n   _TCC<_Cond>::template __is_implicitly_constructible<_Args...>(),\r\n   bool>;\r\n\r\n\r\n      template<bool _Cond, typename... _Args>\r\n using _ExplicitCtor = __enable_if_t<\r\n   _TCC<_Cond>::template __is_explicitly_constructible<_Args...>(),\r\n   bool>;\r\n\r\n\r\n      template<typename... _UElements>\r\n static constexpr bool __nothrow_constructible()\r\n {\r\n   return\r\n     __and_<is_nothrow_constructible<_Elements, _UElements>...>::value;\r\n }\r\n\r\n\r\n      template<typename _Up>\r\n static constexpr bool __valid_args()\r\n {\r\n"]
[81.391293, "o", "   return sizeof...(_Elements) == 1\r\n     && !is_same<tuple, __remove_cvref_t<_Up>>::value;\r\n }\r\n\r\n\r\n      template<typename, typename, typename... _Tail>\r\n static constexpr bool __valid_args()\r\n { return (sizeof...(_Tail) + 2) == sizeof...(_Elements); }\r\n# 1408 \"/usr/include/c++/14.2.1/tuple\" 3\r\n      template<typename _Tuple, typename = tuple,\r\n        typename = __remove_cvref_t<_Tuple>>\r\n struct _UseOtherCtor\r\n : false_type\r\n { };\r\n\r\n\r\n      template<typename _Tuple, typename _Tp, typename _Up>\r\n struct _UseOtherCtor<_Tuple, tuple<_Tp>, tuple<_Up>>\r\n : __or_<is_convertible<_Tuple, _Tp>, is_constructible<_Tp, _Tuple>>::type\r\n { };\r\n\r\n\r\n      template<typename _Tuple, typename _Tp>\r\n struct _UseOtherCtor<_Tuple, tuple<_Tp>, tuple<_Tp>>\r\n : true_type\r\n { };\r\n\r\n\r\n\r\n\r\n"]
[81.391357, "o", "      template<typename _Tuple>\r\n static constexpr bool __use_other_ctor()\r\n { return _UseOtherCtor<_Tuple>::value; }\r\n# 1454 \"/usr/include/c++/14.2.1/tuple\" 3\r\n    public:\r\n      template<typename _Dummy = void,\r\n        _ImplicitDefaultCtor<is_void<_Dummy>::value> = true>\r\n constexpr\r\n tuple()\r\n noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)\r\n : _Inherited() { }\r\n\r\n      template<typename _Dummy = void,\r\n        _ExplicitDefaultCtor<is_void<_Dummy>::value> = false>\r\n explicit constexpr\r\n tuple()\r\n noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)\r\n"]
[81.391418, "o", " : _Inherited() { }\r\n\r\n      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),\r\n        _ImplicitCtor<_NotEmpty, const _Elements&...> = true>\r\n constexpr\r\n tuple(const _Elements&... __elements)\r\n noexcept(__nothrow_constructible<const _Elements&...>())\r\n : _Inherited(__elements...) { }\r\n\r\n      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),\r\n        _ExplicitCtor<_NotEmpty, const _Elements&...> = false>\r\n explicit constexpr\r\n tuple(const _Elements&... __elements)\r\n noexcept(__nothrow_constructible<const _Elements&...>())\r\n : _Inherited(__elements...) { }\r\n\r\n      template<typename... _UElements,\r\n        bool _Valid = __valid_args<_UElements...>(),\r\n        _ImplicitCtor<_Valid, _UElements...> = true>\r\n constexpr\r\n"]
[81.391496, "o", " tuple(_UElements&&... __elements)\r\n noexcept(__nothrow_constructible<_UElements...>())\r\n : _Inherited(std::forward<_UElements>(__elements)...)\r\n { ; }\r\n\r\n      template<typename... _UElements,\r\n        bool _Valid = __valid_args<_UElements...>(),\r\n        _ExplicitCtor<_Valid, _UElements...> = false>\r\n explicit constexpr\r\n tuple(_UElements&&... __elements)\r\n noexcept(__nothrow_constructible<_UElements...>())\r\n : _Inherited(std::forward<_UElements>(__elements)...)\r\n { ; }\r\n\r\n      constexpr tuple(const tuple&) = default;\r\n\r\n      constexpr tuple(tuple&&) = default;\r\n\r\n      template<typename... _UElements,\r\n        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\r\n      && !__use_other_ctor<const tuple<_UElements...>&>(),\r\n        _ImplicitCtor<_Valid, const _UElements&...> = true>\r\n constexpr\r\n tuple(const tuple<_UElements...>& __in)\r\n noexcept(__nothrow_constructible<const _UElements&...>())\r\n : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\r\n"]
[81.391568, "o", " { ; }\r\n\r\n      template<typename... _UElements,\r\n        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\r\n      && !__use_other_ctor<const tuple<_UElements...>&>(),\r\n        _ExplicitCtor<_Valid, const _UElements&...> = false>\r\n explicit constexpr\r\n tuple(const tuple<_UElements...>& __in)\r\n noexcept(__nothrow_constructible<const _UElements&...>())\r\n : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\r\n { ; }\r\n\r\n      template<typename... _UElements,\r\n        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\r\n        && !__use_other_ctor<tuple<_UElements...>&&>(),\r\n        _ImplicitCtor<_Valid, _UElements...> = true>\r\n constexpr\r\n tuple(tuple<_UElements...>&& __in)\r\n noexcept(__nothrow_constructible<_UElements...>())\r\n : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in))\r\n { ; }\r\n\r\n      template<typename... _UElements,\r\n"]
[81.391643, "o", "        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\r\n        && !__use_other_ctor<tuple<_UElements...>&&>(),\r\n        _ExplicitCtor<_Valid, _UElements...> = false>\r\n explicit constexpr\r\n tuple(tuple<_UElements...>&& __in)\r\n noexcept(__nothrow_constructible<_UElements...>())\r\n : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in))\r\n { ; }\r\n\r\n\r\n\r\n      template<typename _Alloc,\r\n        _ImplicitDefaultCtor<is_object<_Alloc>::value> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a)\r\n : _Inherited(__tag, __a) { }\r\n\r\n      template<typename _Alloc,\r\n        _ExplicitDefaultCtor<is_object<_Alloc>::value> = false>\r\n\r\n explicit\r\n tuple(allocator_arg_t __tag, const _Alloc& __a)\r\n : _Inherited(__tag, __a) { }\r\n\r\n      template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),\r\n"]
[81.391722, "o", "        _ImplicitCtor<_NotEmpty, const _Elements&...> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       const _Elements&... __elements)\r\n : _Inherited(__tag, __a, __elements...) { }\r\n\r\n      template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),\r\n        _ExplicitCtor<_NotEmpty, const _Elements&...> = false>\r\n\r\n explicit\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       const _Elements&... __elements)\r\n : _Inherited(__tag, __a, __elements...) { }\r\n\r\n      template<typename _Alloc, typename... _UElements,\r\n        bool _Valid = __valid_args<_UElements...>(),\r\n        _ImplicitCtor<_Valid, _UElements...> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       _UElements&&... __elements)\r\n : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)\r\n { ; }\r\n\r\n      template<typename _Alloc, typename... _UElements,\r\n   bool _Valid = __valid_args<_UElements...>(),\r\n        _ExplicitCtor<_Valid, _UElements...> = false>\r\n\r\n"]
[81.391754, "o", " explicit\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       _UElements&&... __elements)\r\n : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)\r\n { ; }\r\n\r\n      template<typename _Alloc>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)\r\n : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }\r\n\r\n      template<typename _Alloc>\r\n\r\n"]
[81.391787, "o", " tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)\r\n : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }\r\n\r\n      template<typename _Alloc, typename... _UElements,\r\n        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\r\n        && !__use_other_ctor<const tuple<_UElements...>&>(),\r\n        _ImplicitCtor<_Valid, const _UElements&...> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       const tuple<_UElements...>& __in)\r\n"]
[81.391821, "o", " : _Inherited(__tag, __a,\r\n       static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\r\n { ; }\r\n\r\n      template<typename _Alloc, typename... _UElements,\r\n        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\r\n        && !__use_other_ctor<const tuple<_UElements...>&>(),\r\n        _ExplicitCtor<_Valid, const _UElements&...> = false>\r\n\r\n explicit\r\n"]
[81.391955, "o", " tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       const tuple<_UElements...>& __in)\r\n : _Inherited(__tag, __a,\r\n       static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\r\n { ; }\r\n\r\n      template<typename _Alloc, typename... _UElements,\r\n        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\r\n        && !__use_other_ctor<tuple<_UElements...>&&>(),\r\n        _ImplicitCtor<_Valid, _UElements...> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       tuple<_UElements...>&& __in)\r\n : _Inherited(__tag, __a,\r\n       static_cast<_Tuple_impl<0, _UElements...>&&>(__in))\r\n { ; }\r\n\r\n      template<typename _Alloc, typename... _UElements,\r\n        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\r\n        && !__use_other_ctor<tuple<_UElements...>&&>(),\r\n        _ExplicitCtor<_Valid, _UElements...> = false>\r\n\r\n explicit\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       tuple<_UElements...>&& __in)\r\n : _Inherited(__tag, __a,\r\n       static_cast<_Tuple_impl<0, _UElements...>&&>(__in))\r\n"]
[81.392027, "o", " { ; }\r\n# 1886 \"/usr/include/c++/14.2.1/tuple\" 3\r\n    private:\r\n      template<typename... _UElements>\r\n static constexpr\r\n __enable_if_t<sizeof...(_UElements) == sizeof...(_Elements), bool>\r\n __assignable()\r\n"]
[81.3921, "o", " { return __and_<is_assignable<_Elements&, _UElements>...>::value; }\r\n\r\n\r\n      template<typename... _UElements>\r\n static constexpr bool __nothrow_assignable()\r\n {\r\n   return\r\n     __and_<is_nothrow_assignable<_Elements&, _UElements>...>::value;\r\n }\r\n\r\n    public:\r\n\r\n     \r\n      tuple&\r\n      operator=(__conditional_t<__assignable<const _Elements&...>(),\r\n    const tuple&,\r\n    const __nonesuch&> __in)\r\n      noexcept(__nothrow_assignable<const _Elements&...>())\r\n      {\r\n this->_M_assign(__in);\r\n return *this;\r\n      }\r\n\r\n     \r\n      tuple&\r\n      operator=(__conditional_t<__assignable<_Elements...>(),\r\n"]
[81.392173, "o", "    tuple&&,\r\n    __nonesuch&&> __in)\r\n      noexcept(__nothrow_assignable<_Elements...>())\r\n      {\r\n this->_M_assign(std::move(__in));\r\n return *this;\r\n      }\r\n\r\n      template<typename... _UElements>\r\n\r\n __enable_if_t<__assignable<const _UElements&...>(), tuple&>\r\n operator=(const tuple<_UElements...>& __in)\r\n noexcept(__nothrow_assignable<const _UElements&...>())\r\n {\r\n   this->_M_assign(__in);\r\n   return *this;\r\n }\r\n\r\n      template<typename... _UElements>\r\n\r\n __enable_if_t<__assignable<_UElements...>(), tuple&>\r\n operator=(tuple<_UElements...>&& __in)\r\n noexcept(__nothrow_assignable<_UElements...>())\r\n {\r\n   this->_M_assign(std::move(__in));\r\n   return *this;\r\n }\r\n\r\n\r\n\r\n"]
[81.392251, "o", "     \r\n      void\r\n      swap(tuple& __in)\r\n      noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)\r\n      { _Inherited::_M_swap(__in); }\r\n# 1966 \"/usr/include/c++/14.2.1/tuple\" 3\r\n    };\r\n\r\n\r\n  template<typename... _UTypes>\r\n    tuple(_UTypes...) -> tuple<_UTypes...>;\r\n  template<typename _T1, typename _T2>\r\n    tuple(pair<_T1, _T2>) -> tuple<_T1, _T2>;\r\n  template<typename _Alloc, typename... _UTypes>\r\n    tuple(allocator_arg_t, _Alloc, _UTypes...) -> tuple<_UTypes...>;\r\n  template<typename _Alloc, typename _T1, typename _T2>\r\n    tuple(allocator_arg_t, _Alloc, pair<_T1, _T2>) -> tuple<_T1, _T2>;\r\n  template<typename _Alloc, typename... _UTypes>\r\n    tuple(allocator_arg_t, _Alloc, tuple<_UTypes...>) -> tuple<_UTypes...>;\r\n\r\n\r\n\r\n  template<>\r\n    class tuple<>\r\n"]
[81.39232, "o", "    {\r\n    public:\r\n     \r\n      void swap(tuple&) noexcept { }\r\n\r\n\r\n\r\n\r\n\r\n      tuple() = default;\r\n\r\n      template<typename _Alloc>\r\n\r\n tuple(allocator_arg_t, const _Alloc&) noexcept { }\r\n      template<typename _Alloc>\r\n\r\n tuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept { }\r\n    };\r\n\r\n\r\n\r\n\r\n  template<typename _T1, typename _T2>\r\n    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>\r\n    {\r\n      typedef _Tuple_impl<0, _T1, _T2> _Inherited;\r\n\r\n\r\n      template<bool _Dummy, typename _U1, typename _U2>\r\n"]
[81.392357, "o", " using _ImplicitDefaultCtor = __enable_if_t<\r\n   _TupleConstraints<_Dummy, _U1, _U2>::\r\n     __is_implicitly_default_constructible(),\r\n   bool>;\r\n\r\n\r\n      template<bool _Dummy, typename _U1, typename _U2>\r\n using _ExplicitDefaultCtor = __enable_if_t<\r\n   _TupleConstraints<_Dummy, _U1, _U2>::\r\n     __is_explicitly_default_constructible(),\r\n   bool>;\r\n\r\n      template<bool _Dummy>\r\n using _TCC = _TupleConstraints<_Dummy, _T1, _T2>;\r\n\r\n\r\n"]
[81.392448, "o", "      template<bool _Cond, typename _U1, typename _U2>\r\n using _ImplicitCtor = __enable_if_t<\r\n   _TCC<_Cond>::template __is_implicitly_constructible<_U1, _U2>(),\r\n   bool>;\r\n\r\n\r\n      template<bool _Cond, typename _U1, typename _U2>\r\n using _ExplicitCtor = __enable_if_t<\r\n   _TCC<_Cond>::template __is_explicitly_constructible<_U1, _U2>(),\r\n   bool>;\r\n\r\n      template<typename _U1, typename _U2>\r\n static constexpr bool __assignable()\r\n {\r\n   return __and_<is_assignable<_T1&, _U1>,\r\n   is_assignable<_T2&, _U2>>::value;\r\n }\r\n\r\n      template<typename _U1, typename _U2>\r\n static constexpr bool __nothrow_assignable()\r\n {\r\n   return __and_<is_nothrow_assignable<_T1&, _U1>,\r\n   is_nothrow_assignable<_T2&, _U2>>::value;\r\n }\r\n\r\n      template<typename _U1, typename _U2>\r\n static constexpr bool __nothrow_constructible()\r\n {\r\n   return __and_<is_nothrow_constructible<_T1, _U1>,\r\n       is_nothrow_constructible<_T2, _U2>>::value;\r\n }\r\n\r\n"]
[81.392515, "o", "      static constexpr bool __nothrow_default_constructible()\r\n      {\r\n return __and_<is_nothrow_default_constructible<_T1>,\r\n        is_nothrow_default_constructible<_T2>>::value;\r\n      }\r\n\r\n      template<typename _U1>\r\n static constexpr bool __is_alloc_arg()\r\n { return is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value; }\r\n# 2085 \"/usr/include/c++/14.2.1/tuple\" 3\r\n    public:\r\n      template<bool _Dummy = true,\r\n        _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>\r\n constexpr\r\n tuple()\r\n noexcept(__nothrow_default_constructible())\r\n : _Inherited() { }\r\n\r\n      template<bool _Dummy = true,\r\n        _ExplicitDefaultCtor<_Dummy, _T1, _T2> = false>\r\n"]
[81.392575, "o", " explicit constexpr\r\n tuple()\r\n noexcept(__nothrow_default_constructible())\r\n : _Inherited() { }\r\n\r\n      template<bool _Dummy = true,\r\n        _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>\r\n constexpr\r\n tuple(const _T1& __a1, const _T2& __a2)\r\n noexcept(__nothrow_constructible<const _T1&, const _T2&>())\r\n : _Inherited(__a1, __a2) { }\r\n\r\n      template<bool _Dummy = true,\r\n        _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>\r\n explicit constexpr\r\n tuple(const _T1& __a1, const _T2& __a2)\r\n noexcept(__nothrow_constructible<const _T1&, const _T2&>())\r\n : _Inherited(__a1, __a2) { }\r\n\r\n      template<typename _U1, typename _U2,\r\n        _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>\r\n constexpr\r\n"]
[81.392658, "o", " tuple(_U1&& __a1, _U2&& __a2)\r\n noexcept(__nothrow_constructible<_U1, _U2>())\r\n : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2))\r\n { ; }\r\n\r\n      template<typename _U1, typename _U2,\r\n        _ExplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = false>\r\n explicit constexpr\r\n tuple(_U1&& __a1, _U2&& __a2)\r\n noexcept(__nothrow_constructible<_U1, _U2>())\r\n : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2))\r\n { ; }\r\n\r\n      constexpr tuple(const tuple&) = default;\r\n\r\n      constexpr tuple(tuple&&) = default;\r\n\r\n      template<typename _U1, typename _U2,\r\n        _ImplicitCtor<true, const _U1&, const _U2&> = true>\r\n constexpr\r\n tuple(const tuple<_U1, _U2>& __in)\r\n noexcept(__nothrow_constructible<const _U1&, const _U2&>())\r\n : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))\r\n"]
[81.392719, "o", " { ; }\r\n\r\n      template<typename _U1, typename _U2,\r\n        _ExplicitCtor<true, const _U1&, const _U2&> = false>\r\n explicit constexpr\r\n tuple(const tuple<_U1, _U2>& __in)\r\n noexcept(__nothrow_constructible<const _U1&, const _U2&>())\r\n : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))\r\n { ; }\r\n\r\n      template<typename _U1, typename _U2,\r\n        _ImplicitCtor<true, _U1, _U2> = true>\r\n constexpr\r\n tuple(tuple<_U1, _U2>&& __in)\r\n noexcept(__nothrow_constructible<_U1, _U2>())\r\n : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))\r\n { ; }\r\n\r\n      template<typename _U1, typename _U2,\r\n        _ExplicitCtor<true, _U1, _U2> = false>\r\n explicit constexpr\r\n tuple(tuple<_U1, _U2>&& __in)\r\n noexcept(__nothrow_constructible<_U1, _U2>())\r\n"]
[81.392789, "o", " : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))\r\n { ; }\r\n\r\n      template<typename _U1, typename _U2,\r\n        _ImplicitCtor<true, const _U1&, const _U2&> = true>\r\n constexpr\r\n tuple(const pair<_U1, _U2>& __in)\r\n noexcept(__nothrow_constructible<const _U1&, const _U2&>())\r\n : _Inherited(__in.first, __in.second)\r\n { ; }\r\n\r\n      template<typename _U1, typename _U2,\r\n        _ExplicitCtor<true, const _U1&, const _U2&> = false>\r\n explicit constexpr\r\n tuple(const pair<_U1, _U2>& __in)\r\n noexcept(__nothrow_constructible<const _U1&, const _U2&>())\r\n : _Inherited(__in.first, __in.second)\r\n { ; }\r\n\r\n      template<typename _U1, typename _U2,\r\n        _ImplicitCtor<true, _U1, _U2> = true>\r\n constexpr\r\n"]
[81.392827, "o", " tuple(pair<_U1, _U2>&& __in)\r\n noexcept(__nothrow_constructible<_U1, _U2>())\r\n : _Inherited(std::forward<_U1>(__in.first),\r\n       std::forward<_U2>(__in.second))\r\n { ; }\r\n\r\n      template<typename _U1, typename _U2,\r\n        _ExplicitCtor<true, _U1, _U2> = false>\r\n explicit constexpr\r\n tuple(pair<_U1, _U2>&& __in)\r\n noexcept(__nothrow_constructible<_U1, _U2>())\r\n : _Inherited(std::forward<_U1>(__in.first),\r\n"]
[81.392922, "o", "       std::forward<_U2>(__in.second))\r\n { ; }\r\n\r\n\r\n\r\n      template<typename _Alloc,\r\n        _ImplicitDefaultCtor<is_object<_Alloc>::value, _T1, _T2> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a)\r\n : _Inherited(__tag, __a) { }\r\n\r\n      template<typename _Alloc,\r\n        _ExplicitDefaultCtor<is_object<_Alloc>::value, _T1, _T2> = false>\r\n\r\n explicit\r\n tuple(allocator_arg_t __tag, const _Alloc& __a)\r\n : _Inherited(__tag, __a) { }\r\n\r\n      template<typename _Alloc, bool _Dummy = true,\r\n        _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       const _T1& __a1, const _T2& __a2)\r\n : _Inherited(__tag, __a, __a1, __a2) { }\r\n\r\n      template<typename _Alloc, bool _Dummy = true,\r\n        _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>\r\n explicit\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       const _T1& __a1, const _T2& __a2)\r\n"]
[81.39298, "o", " : _Inherited(__tag, __a, __a1, __a2) { }\r\n\r\n      template<typename _Alloc, typename _U1, typename _U2,\r\n        _ImplicitCtor<true, _U1, _U2> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)\r\n : _Inherited(__tag, __a, std::forward<_U1>(__a1),\r\n       std::forward<_U2>(__a2))\r\n { ; }\r\n\r\n      template<typename _Alloc, typename _U1, typename _U2,\r\n        _ExplicitCtor<true, _U1, _U2> = false>\r\n explicit\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       _U1&& __a1, _U2&& __a2)\r\n : _Inherited(__tag, __a, std::forward<_U1>(__a1),\r\n       std::forward<_U2>(__a2))\r\n { ; }\r\n\r\n      template<typename _Alloc>\r\n\r\n"]
[81.39306, "o", " tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)\r\n : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }\r\n\r\n      template<typename _Alloc>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)\r\n : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }\r\n\r\n      template<typename _Alloc, typename _U1, typename _U2,\r\n        _ImplicitCtor<true, const _U1&, const _U2&> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       const tuple<_U1, _U2>& __in)\r\n : _Inherited(__tag, __a,\r\n       static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))\r\n { ; }\r\n\r\n      template<typename _Alloc, typename _U1, typename _U2,\r\n        _ExplicitCtor<true, const _U1&, const _U2&> = false>\r\n explicit\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       const tuple<_U1, _U2>& __in)\r\n"]
[81.393126, "o", " : _Inherited(__tag, __a,\r\n       static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))\r\n { ; }\r\n\r\n      template<typename _Alloc, typename _U1, typename _U2,\r\n        _ImplicitCtor<true, _U1, _U2> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\r\n : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))\r\n { ; }\r\n\r\n      template<typename _Alloc, typename _U1, typename _U2,\r\n        _ExplicitCtor<true, _U1, _U2> = false>\r\n explicit\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\r\n : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))\r\n { ; }\r\n\r\n      template<typename _Alloc, typename _U1, typename _U2,\r\n        _ImplicitCtor<true, const _U1&, const _U2&> = true>\r\n\r\n"]
[81.393188, "o", " tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       const pair<_U1, _U2>& __in)\r\n : _Inherited(__tag, __a, __in.first, __in.second)\r\n { ; }\r\n\r\n      template<typename _Alloc, typename _U1, typename _U2,\r\n        _ExplicitCtor<true, const _U1&, const _U2&> = false>\r\n explicit\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a,\r\n       const pair<_U1, _U2>& __in)\r\n : _Inherited(__tag, __a, __in.first, __in.second)\r\n { ; }\r\n\r\n      template<typename _Alloc, typename _U1, typename _U2,\r\n        _ImplicitCtor<true, _U1, _U2> = true>\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)\r\n : _Inherited(__tag, __a, std::forward<_U1>(__in.first),\r\n"]
[81.393225, "o", "       std::forward<_U2>(__in.second))\r\n { ; }\r\n\r\n      template<typename _Alloc, typename _U1, typename _U2,\r\n        _ExplicitCtor<true, _U1, _U2> = false>\r\n explicit\r\n\r\n tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)\r\n : _Inherited(__tag, __a, std::forward<_U1>(__in.first),\r\n       std::forward<_U2>(__in.second))\r\n { ; }\r\n\r\n\r\n\r\n"]
[81.393259, "o", "     \r\n      tuple&\r\n      operator=(__conditional_t<__assignable<const _T1&, const _T2&>(),\r\n    const tuple&,\r\n    const __nonesuch&> __in)\r\n      noexcept(__nothrow_assignable<const _T1&, const _T2&>())\r\n      {\r\n this->_M_assign(__in);\r\n return *this;\r\n      }\r\n\r\n     \r\n      tuple&\r\n"]
[81.393372, "o", "      operator=(__conditional_t<__assignable<_T1, _T2>(),\r\n    tuple&&,\r\n    __nonesuch&&> __in)\r\n      noexcept(__nothrow_assignable<_T1, _T2>())\r\n      {\r\n this->_M_assign(std::move(__in));\r\n return *this;\r\n      }\r\n\r\n      template<typename _U1, typename _U2>\r\n\r\n __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>\r\n operator=(const tuple<_U1, _U2>& __in)\r\n noexcept(__nothrow_assignable<const _U1&, const _U2&>())\r\n {\r\n   this->_M_assign(__in);\r\n   return *this;\r\n }\r\n\r\n      template<typename _U1, typename _U2>\r\n\r\n __enable_if_t<__assignable<_U1, _U2>(), tuple&>\r\n operator=(tuple<_U1, _U2>&& __in)\r\n noexcept(__nothrow_assignable<_U1, _U2>())\r\n {\r\n   this->_M_assign(std::move(__in));\r\n   return *this;\r\n }\r\n\r\n      template<typename _U1, typename _U2>\r\n\r\n __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>\r\n operator=(const pair<_U1, _U2>& __in)\r\n noexcept(__nothrow_assignable<const _U1&, const _U2&>())\r\n {\r\n   this->_M_head(*this) = __in.first;\r\n   this->_M_tail(*this)._M_head(*this) = __in.second;\r\n   return *this;\r\n"]
[81.393439, "o", " }\r\n\r\n      template<typename _U1, typename _U2>\r\n\r\n __enable_if_t<__assignable<_U1, _U2>(), tuple&>\r\n operator=(pair<_U1, _U2>&& __in)\r\n noexcept(__nothrow_assignable<_U1, _U2>())\r\n {\r\n   this->_M_head(*this) = std::forward<_U1>(__in.first);\r\n   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);\r\n   return *this;\r\n }\r\n\r\n     \r\n      void\r\n      swap(tuple& __in)\r\n      noexcept(__and_<__is_nothrow_swappable<_T1>,\r\n        __is_nothrow_swappable<_T2>>::value)\r\n      { _Inherited::_M_swap(__in); }\r\n    };\r\n\r\n\r\n\r\n  template<typename... _Elements>\r\n    struct tuple_size<tuple<_Elements...>>\r\n    : public integral_constant<size_t, sizeof...(_Elements)> { };\r\n\r\n\r\n  template<typename... _Types>\r\n"]
[81.39351, "o", "    inline constexpr size_t tuple_size_v<tuple<_Types...>>\r\n      = sizeof...(_Types);\r\n\r\n  template<typename... _Types>\r\n    inline constexpr size_t tuple_size_v<const tuple<_Types...>>\r\n      = sizeof...(_Types);\r\n\r\n\r\n\r\n  template<size_t __i, typename... _Types>\r\n    struct tuple_element<__i, tuple<_Types...>>\r\n    {\r\n      static_assert(__i < sizeof...(_Types), \"tuple index must be in range\");\r\n\r\n      using type = typename _Nth_type<__i, _Types...>::type;\r\n    };\r\n\r\n  template<size_t __i, typename _Head, typename... _Tail>\r\n    constexpr _Head&\r\n    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\r\n    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\r\n\r\n  template<size_t __i, typename _Head, typename... _Tail>\r\n    constexpr const _Head&\r\n"]
[81.393582, "o", "    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\r\n    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\r\n\r\n\r\n  template<size_t __i, typename... _Types>\r\n    __enable_if_t<(__i >= sizeof...(_Types))>\r\n    __get_helper(const tuple<_Types...>&) = delete;\r\n\r\n\r\n  template<size_t __i, typename... _Elements>\r\n    constexpr __tuple_element_t<__i, tuple<_Elements...>>&\r\n    get(tuple<_Elements...>& __t) noexcept\r\n    { return std::__get_helper<__i>(__t); }\r\n\r\n\r\n  template<size_t __i, typename... _Elements>\r\n    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&\r\n    get(const tuple<_Elements...>& __t) noexcept\r\n    { return std::__get_helper<__i>(__t); }\r\n\r\n\r\n  template<size_t __i, typename... _Elements>\r\n    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&\r\n    get(tuple<_Elements...>&& __t) noexcept\r\n    {\r\n"]
[81.39365, "o", "      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;\r\n      return std::forward<__element_type>(std::__get_helper<__i>(__t));\r\n    }\r\n\r\n\r\n  template<size_t __i, typename... _Elements>\r\n    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&\r\n    get(const tuple<_Elements...>&& __t) noexcept\r\n    {\r\n      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;\r\n      return std::forward<const __element_type>(std::__get_helper<__i>(__t));\r\n    }\r\n\r\n\r\n\r\n  template<size_t __i, typename... _Elements>\r\n    constexpr __enable_if_t<(__i >= sizeof...(_Elements))>\r\n    get(const tuple<_Elements...>&) = delete;\r\n\r\n\r\n\r\n\r\n  template <typename _Tp, typename... _Types>\r\n    constexpr _Tp&\r\n"]
[81.393724, "o", "    get(tuple<_Types...>& __t) noexcept\r\n    {\r\n      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();\r\n      static_assert(__idx < sizeof...(_Types),\r\n   \"the type T in std::get<T> must occur exactly once in the tuple\");\r\n      return std::__get_helper<__idx>(__t);\r\n    }\r\n\r\n\r\n  template <typename _Tp, typename... _Types>\r\n    constexpr _Tp&&\r\n    get(tuple<_Types...>&& __t) noexcept\r\n    {\r\n      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();\r\n      static_assert(__idx < sizeof...(_Types),\r\n   \"the type T in std::get<T> must occur exactly once in the tuple\");\r\n      return std::forward<_Tp>(std::__get_helper<__idx>(__t));\r\n    }\r\n\r\n\r\n  template <typename _Tp, typename... _Types>\r\n    constexpr const _Tp&\r\n    get(const tuple<_Types...>& __t) noexcept\r\n    {\r\n      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();\r\n      static_assert(__idx < sizeof...(_Types),\r\n   \"the type T in std::get<T> must occur exactly once in the tuple\");\r\n"]
[81.393794, "o", "      return std::__get_helper<__idx>(__t);\r\n    }\r\n\r\n\r\n\r\n  template <typename _Tp, typename... _Types>\r\n    constexpr const _Tp&&\r\n    get(const tuple<_Types...>&& __t) noexcept\r\n    {\r\n      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();\r\n      static_assert(__idx < sizeof...(_Types),\r\n   \"the type T in std::get<T> must occur exactly once in the tuple\");\r\n      return std::forward<const _Tp>(std::__get_helper<__idx>(__t));\r\n    }\r\n\r\n\r\n\r\n  template<typename _Tp, typename _Up, size_t __i, size_t __size>\r\n    struct __tuple_compare\r\n    {\r\n      static constexpr bool\r\n      __eq(const _Tp& __t, const _Up& __u)\r\n      {\r\n return bool(std::get<__i>(__t) == std::get<__i>(__u))\r\n"]
[81.393864, "o", "   && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);\r\n      }\r\n\r\n      static constexpr bool\r\n      __less(const _Tp& __t, const _Up& __u)\r\n      {\r\n return bool(std::get<__i>(__t) < std::get<__i>(__u))\r\n   || (!bool(std::get<__i>(__u) < std::get<__i>(__t))\r\n       && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));\r\n      }\r\n    };\r\n\r\n  template<typename _Tp, typename _Up, size_t __size>\r\n    struct __tuple_compare<_Tp, _Up, __size, __size>\r\n    {\r\n      static constexpr bool\r\n      __eq(const _Tp&, const _Up&) { return true; }\r\n\r\n      static constexpr bool\r\n      __less(const _Tp&, const _Up&) { return false; }\r\n    };\r\n\r\n  template<typename... _TElements, typename... _UElements>\r\n    constexpr bool\r\n    operator==(const tuple<_TElements...>& __t,\r\n        const tuple<_UElements...>& __u)\r\n"]
[81.393926, "o", "    {\r\n      static_assert(sizeof...(_TElements) == sizeof...(_UElements),\r\n   \"tuple objects can only be compared if they have equal sizes.\");\r\n      using __compare = __tuple_compare<tuple<_TElements...>,\r\n     tuple<_UElements...>,\r\n     0, sizeof...(_TElements)>;\r\n      return __compare::__eq(__t, __u);\r\n    }\r\n# 2596 \"/usr/include/c++/14.2.1/tuple\" 3\r\n  template<typename... _TElements, typename... _UElements>\r\n    constexpr bool\r\n    operator<(const tuple<_TElements...>& __t,\r\n       const tuple<_UElements...>& __u)\r\n    {\r\n      static_assert(sizeof...(_TElements) == sizeof...(_UElements),\r\n"]
[81.393999, "o", "   \"tuple objects can only be compared if they have equal sizes.\");\r\n      using __compare = __tuple_compare<tuple<_TElements...>,\r\n     tuple<_UElements...>,\r\n     0, sizeof...(_TElements)>;\r\n      return __compare::__less(__t, __u);\r\n    }\r\n\r\n  template<typename... _TElements, typename... _UElements>\r\n    constexpr bool\r\n    operator!=(const tuple<_TElements...>& __t,\r\n        const tuple<_UElements...>& __u)\r\n    { return !(__t == __u); }\r\n\r\n  template<typename... _TElements, typename... _UElements>\r\n    constexpr bool\r\n    operator>(const tuple<_TElements...>& __t,\r\n       const tuple<_UElements...>& __u)\r\n    { return __u < __t; }\r\n\r\n  template<typename... _TElements, typename... _UElements>\r\n    constexpr bool\r\n    operator<=(const tuple<_TElements...>& __t,\r\n        const tuple<_UElements...>& __u)\r\n    { return !(__u < __t); }\r\n\r\n"]
[81.394075, "o", "  template<typename... _TElements, typename... _UElements>\r\n    constexpr bool\r\n    operator>=(const tuple<_TElements...>& __t,\r\n        const tuple<_UElements...>& __u)\r\n    { return !(__t < __u); }\r\n\r\n\r\n\r\n\r\n  template<typename... _Elements>\r\n    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>\r\n    make_tuple(_Elements&&... __args)\r\n    {\r\n      typedef tuple<typename __decay_and_strip<_Elements>::__type...>\r\n __result_type;\r\n      return __result_type(std::forward<_Elements>(__args)...);\r\n    }\r\n\r\n\r\n\r\n\r\n  template<typename... _Elements>\r\n    constexpr tuple<_Elements&&...>\r\n    forward_as_tuple(_Elements&&... __args) noexcept\r\n    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }\r\n\r\n\r\n  template<size_t, typename, typename, size_t>\r\n"]
[81.394145, "o", "    struct __make_tuple_impl;\r\n\r\n  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>\r\n    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>\r\n    : __make_tuple_impl<_Idx + 1,\r\n   tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,\r\n   _Tuple, _Nm>\r\n    { };\r\n\r\n  template<size_t _Nm, typename _Tuple, typename... _Tp>\r\n    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>\r\n    {\r\n      typedef tuple<_Tp...> __type;\r\n    };\r\n\r\n  template<typename _Tuple>\r\n    struct __do_make_tuple\r\n    : __make_tuple_impl<0, tuple<>, _Tuple, tuple_size<_Tuple>::value>\r\n    { };\r\n\r\n\r\n  template<typename _Tuple>\r\n    struct __make_tuple\r\n    : public __do_make_tuple<__remove_cvref_t<_Tuple>>\r\n    { };\r\n\r\n\r\n  template<typename...>\r\n"]
[81.394222, "o", "    struct __combine_tuples;\r\n\r\n  template<>\r\n    struct __combine_tuples<>\r\n    {\r\n      typedef tuple<> __type;\r\n    };\r\n\r\n  template<typename... _Ts>\r\n    struct __combine_tuples<tuple<_Ts...>>\r\n    {\r\n      typedef tuple<_Ts...> __type;\r\n    };\r\n\r\n  template<typename... _T1s, typename... _T2s, typename... _Rem>\r\n    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>\r\n    {\r\n      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,\r\n     _Rem...>::__type __type;\r\n    };\r\n\r\n\r\n"]
[81.394297, "o", "  template<typename... _Tpls>\r\n    struct __tuple_cat_result\r\n    {\r\n      typedef typename __combine_tuples\r\n        <typename __make_tuple<_Tpls>::__type...>::__type __type;\r\n    };\r\n\r\n\r\n\r\n  template<typename...>\r\n    struct __make_1st_indices;\r\n\r\n  template<>\r\n    struct __make_1st_indices<>\r\n    {\r\n      typedef _Index_tuple<> __type;\r\n    };\r\n\r\n  template<typename _Tp, typename... _Tpls>\r\n    struct __make_1st_indices<_Tp, _Tpls...>\r\n    {\r\n      typedef typename _Build_index_tuple<tuple_size<\r\n typename remove_reference<_Tp>::type>::value>::__type __type;\r\n    };\r\n\r\n\r\n\r\n\r\n  template<typename _Ret, typename _Indices, typename... _Tpls>\r\n    struct __tuple_concater;\r\n\r\n"]
[81.394332, "o", "  template<typename _Ret, size_t... _Is, typename _Tp, typename... _Tpls>\r\n    struct __tuple_concater<_Ret, _Index_tuple<_Is...>, _Tp, _Tpls...>\r\n    {\r\n      template<typename... _Us>\r\n        static constexpr _Ret\r\n        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)\r\n        {\r\n   typedef typename __make_1st_indices<_Tpls...>::__type __idx;\r\n   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;\r\n   return __next::_S_do(std::forward<_Tpls>(__tps)...,\r\n          std::forward<_Us>(__us)...,\r\n"]
[81.394368, "o", "          std::get<_Is>(std::forward<_Tp>(__tp))...);\r\n }\r\n    };\r\n\r\n  template<typename _Ret>\r\n    struct __tuple_concater<_Ret, _Index_tuple<>>\r\n    {\r\n      template<typename... _Us>\r\n static constexpr _Ret\r\n _S_do(_Us&&... __us)\r\n        {\r\n   return _Ret(std::forward<_Us>(__us)...);\r\n }\r\n    };\r\n"]
[81.394483, "o", "\r\n  template<typename... _Tps>\r\n    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type\r\n    { };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename... _Tpls, typename = typename\r\n           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>\r\n\r\n    constexpr auto\r\n    tuple_cat(_Tpls&&... __tpls)\r\n    -> typename __tuple_cat_result<_Tpls...>::__type\r\n    {\r\n      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;\r\n      typedef typename __make_1st_indices<_Tpls...>::__type __idx;\r\n      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;\r\n      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);\r\n    }\r\n\r\n\r\n\r\n\r\n  template<typename... _Elements>\r\n    constexpr tuple<_Elements&...>\r\n    tie(_Elements&... __args) noexcept\r\n    { return tuple<_Elements&...>(__args...); }\r\n\r\n\r\n  template<typename... _Elements>\r\n   \r\n    inline\r\n\r\n\r\n    typename enable_if<__and_<__is_swappable<_Elements>...>::value\r\n      >::type\r\n\r\n\r\n\r\n"]
[81.394543, "o", "    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)\r\n    noexcept(noexcept(__x.swap(__y)))\r\n    { __x.swap(__y); }\r\n# 2818 \"/usr/include/c++/14.2.1/tuple\" 3\r\n  template<typename... _Elements>\r\n   \r\n    typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type\r\n    swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  struct _Swallow_assign\r\n  {\r\n    template<class _Tp>\r\n      constexpr const _Swallow_assign&\r\n      operator=(const _Tp&) const\r\n      { return *this; }\r\n  };\r\n# 2853 \"/usr/include/c++/14.2.1/tuple\" 3\r\n"]
[81.394615, "o", "  inline constexpr _Swallow_assign ignore{};\r\n\r\n\r\n  template<typename... _Types, typename _Alloc>\r\n    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };\r\n# 2868 \"/usr/include/c++/14.2.1/tuple\" 3\r\n  template<class _T1, class _T2>\r\n    template<typename... _Args1, typename... _Args2>\r\n     \r\n      inline\r\n      pair<_T1, _T2>::\r\n      pair(piecewise_construct_t,\r\n    tuple<_Args1...> __first, tuple<_Args2...> __second)\r\n      : pair(__first, __second,\r\n      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),\r\n      typename _Build_index_tuple<sizeof...(_Args2)>::__type())\r\n      { }\r\n\r\n  template<class _T1, class _T2>\r\n"]
[81.394676, "o", "    template<typename... _Args1, size_t... _Indexes1,\r\n      typename... _Args2, size_t... _Indexes2>\r\n      inline\r\n      pair<_T1, _T2>::\r\n      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,\r\n    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)\r\n      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),\r\n second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)\r\n      { }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<template<typename...> class _Trait, typename _Tp, typename _Tuple>\r\n    inline constexpr bool __unpack_std_tuple = false;\r\n\r\n  template<template<typename...> class _Trait, typename _Tp, typename... _Up>\r\n    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, tuple<_Up...>>\r\n      = _Trait<_Tp, _Up...>::value;\r\n\r\n  template<template<typename...> class _Trait, typename _Tp, typename... _Up>\r\n"]
[81.39475, "o", "    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, tuple<_Up...>&>\r\n      = _Trait<_Tp, _Up&...>::value;\r\n\r\n  template<template<typename...> class _Trait, typename _Tp, typename... _Up>\r\n    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, const tuple<_Up...>>\r\n      = _Trait<_Tp, const _Up...>::value;\r\n\r\n  template<template<typename...> class _Trait, typename _Tp, typename... _Up>\r\n    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, const tuple<_Up...>&>\r\n      = _Trait<_Tp, const _Up&...>::value;\r\n\r\n\r\n\r\n  template <typename _Fn, typename _Tuple, size_t... _Idx>\r\n    constexpr decltype(auto)\r\n    __apply_impl(_Fn&& __f, _Tuple&& __t, index_sequence<_Idx...>)\r\n    {\r\n"]
[81.39482, "o", "      return std::__invoke(std::forward<_Fn>(__f),\r\n      std::get<_Idx>(std::forward<_Tuple>(__t))...);\r\n    }\r\n\r\n\r\n\r\n\r\n  template <typename _Fn, typename _Tuple>\r\n\r\n    constexpr decltype(auto)\r\n    apply(_Fn&& __f, _Tuple&& __t)\r\n    noexcept(__unpack_std_tuple<is_nothrow_invocable, _Fn, _Tuple>)\r\n    {\r\n      using _Indices\r\n = make_index_sequence<tuple_size_v<remove_reference_t<_Tuple>>>;\r\n      return std::__apply_impl(std::forward<_Fn>(__f),\r\n          std::forward<_Tuple>(__t),\r\n          _Indices{});\r\n    }\r\n\r\n\r\n\r\n  template <typename _Tp, typename _Tuple, size_t... _Idx>\r\n    constexpr _Tp\r\n    __make_from_tuple_impl(_Tuple&& __t, index_sequence<_Idx...>)\r\n    { return _Tp(std::get<_Idx>(std::forward<_Tuple>(__t))...); }\r\n\r\n\r\n\r\n\r\n  template <typename _Tp, typename _Tuple>\r\n\r\n    constexpr _Tp\r\n    make_from_tuple(_Tuple&& __t)\r\n"]
[81.39488, "o", "    noexcept(__unpack_std_tuple<is_nothrow_constructible, _Tp, _Tuple>)\r\n    {\r\n      constexpr size_t __n = tuple_size_v<remove_reference_t<_Tuple>>;\r\n\r\n      if constexpr (__n == 1)\r\n {\r\n   using _Elt = decltype(std::get<0>(std::declval<_Tuple>()));\r\n   static_assert(!__reference_constructs_from_temporary(_Tp, _Elt));\r\n }\r\n\r\n      return __make_from_tuple_impl<_Tp>(std::forward<_Tuple>(__t),\r\n      make_index_sequence<__n>{});\r\n"]
[81.394942, "o", "    }\r\n# 3030 \"/usr/include/c++/14.2.1/tuple\" 3\r\n\r\n}\r\n# 48 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 2 3\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\nnamespace pmr\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n  class memory_resource\r\n  {\r\n    static constexpr size_t _S_max_align = alignof(max_align_t);\r\n\r\n  public:\r\n"]
[81.395003, "o", "    memory_resource() = default;\r\n    memory_resource(const memory_resource&) = default;\r\n    virtual ~memory_resource();\r\n\r\n    memory_resource& operator=(const memory_resource&) = default;\r\n\r\n    [[nodiscard]]\r\n    void*\r\n    allocate(size_t __bytes, size_t __alignment = _S_max_align)\r\n    __attribute__((__returns_nonnull__,__alloc_size__(2),__alloc_align__(3)))\r\n    { return ::operator new(__bytes, do_allocate(__bytes, __alignment)); }\r\n\r\n    void\r\n    deallocate(void* __p, size_t __bytes, size_t __alignment = _S_max_align)\r\n    __attribute__((__nonnull__))\r\n    { return do_deallocate(__p, __bytes, __alignment); }\r\n\r\n    [[nodiscard]]\r\n"]
[81.395078, "o", "    bool\r\n    is_equal(const memory_resource& __other) const noexcept\r\n    { return do_is_equal(__other); }\r\n\r\n  private:\r\n    virtual void*\r\n    do_allocate(size_t __bytes, size_t __alignment) = 0;\r\n\r\n    virtual void\r\n    do_deallocate(void* __p, size_t __bytes, size_t __alignment) = 0;\r\n\r\n    virtual bool\r\n    do_is_equal(const memory_resource& __other) const noexcept = 0;\r\n  };\r\n\r\n  [[nodiscard]]\r\n  inline bool\r\n  operator==(const memory_resource& __a, const memory_resource& __b) noexcept\r\n  { return &__a == &__b || __a.is_equal(__b); }\r\n\r\n\r\n  [[nodiscard]]\r\n  inline bool\r\n  operator!=(const memory_resource& __a, const memory_resource& __b) noexcept\r\n  { return !(__a == __b); }\r\n# 119 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 3\r\n  template<typename _Tp>\r\n    class polymorphic_allocator\r\n    {\r\n\r\n\r\n"]
[81.395146, "o", "      template<typename _Up>\r\n struct __not_pair { using type = void; };\r\n\r\n      template<typename _Up1, typename _Up2>\r\n struct __not_pair<pair<_Up1, _Up2>> { };\r\n\r\n    public:\r\n      using value_type = _Tp;\r\n\r\n      polymorphic_allocator() noexcept\r\n      {\r\n extern memory_resource* get_default_resource() noexcept\r\n   __attribute__((__returns_nonnull__));\r\n _M_resource = get_default_resource();\r\n      }\r\n\r\n      polymorphic_allocator(memory_resource* __r) noexcept\r\n      __attribute__((__nonnull__))\r\n      : _M_resource(__r)\r\n      { ; }\r\n\r\n      polymorphic_allocator(const polymorphic_allocator& __other) = default;\r\n\r\n      template<typename _Up>\r\n"]
[81.395208, "o", " polymorphic_allocator(const polymorphic_allocator<_Up>& __x) noexcept\r\n : _M_resource(__x.resource())\r\n { }\r\n\r\n      polymorphic_allocator&\r\n      operator=(const polymorphic_allocator&) = delete;\r\n\r\n      [[nodiscard]]\r\n      _Tp*\r\n      allocate(size_t __n)\r\n      __attribute__((__returns_nonnull__))\r\n      {\r\n if ((__gnu_cxx::__int_traits<size_t>::__max / sizeof(_Tp)) < __n)\r\n   std::__throw_bad_array_new_length();\r\n return static_cast<_Tp*>(_M_resource->allocate(__n * sizeof(_Tp),\r\n             alignof(_Tp)));\r\n      }\r\n\r\n      void\r\n      deallocate(_Tp* __p, size_t __n) noexcept\r\n      __attribute__((__nonnull__))\r\n"]
[81.395272, "o", "      { _M_resource->deallocate(__p, __n * sizeof(_Tp), alignof(_Tp)); }\r\n# 224 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 3\r\n      template<typename _Tp1, typename... _Args>\r\n __attribute__((__nonnull__))\r\n typename __not_pair<_Tp1>::type\r\n construct(_Tp1* __p, _Args&&... __args)\r\n {\r\n\r\n\r\n   using __use_tag\r\n     = std::__uses_alloc_t<_Tp1, polymorphic_allocator, _Args...>;\r\n   if constexpr (is_base_of_v<__uses_alloc0, __use_tag>)\r\n     ::new(__p) _Tp1(std::forward<_Args>(__args)...);\r\n"]
[81.395343, "o", "   else if constexpr (is_base_of_v<__uses_alloc1_, __use_tag>)\r\n     ::new(__p) _Tp1(allocator_arg, *this,\r\n       std::forward<_Args>(__args)...);\r\n   else\r\n     ::new(__p) _Tp1(std::forward<_Args>(__args)..., *this);\r\n }\r\n\r\n      template<typename _Tp1, typename _Tp2,\r\n        typename... _Args1, typename... _Args2>\r\n __attribute__((__nonnull__))\r\n void\r\n construct(pair<_Tp1, _Tp2>* __p, piecewise_construct_t,\r\n    tuple<_Args1...> __x, tuple<_Args2...> __y)\r\n {\r\n   auto __x_tag =\r\n     __use_alloc<_Tp1, polymorphic_allocator, _Args1...>(*this);\r\n   auto __y_tag =\r\n     __use_alloc<_Tp2, polymorphic_allocator, _Args2...>(*this);\r\n   index_sequence_for<_Args1...> __x_i;\r\n   index_sequence_for<_Args2...> __y_i;\r\n\r\n   ::new(__p) pair<_Tp1, _Tp2>(piecewise_construct,\r\n          _S_construct_p(__x_tag, __x_i, __x),\r\n          _S_construct_p(__y_tag, __y_i, __y));\r\n }"]
[81.395413, "o", "\r\n\r\n      template<typename _Tp1, typename _Tp2>\r\n __attribute__((__nonnull__))\r\n void\r\n construct(pair<_Tp1, _Tp2>* __p)\r\n { this->construct(__p, piecewise_construct, tuple<>(), tuple<>()); }\r\n\r\n      template<typename _Tp1, typename _Tp2, typename _Up, typename _Vp>\r\n __attribute__((__nonnull__))\r\n void\r\n construct(pair<_Tp1, _Tp2>* __p, _Up&& __x, _Vp&& __y)\r\n {\r\n   this->construct(__p, piecewise_construct,\r\n       std::forward_as_tuple(std::forward<_Up>(__x)),\r\n       std::forward_as_tuple(std::forward<_Vp>(__y)));\r\n }\r\n\r\n      template <typename _Tp1, typename _Tp2, typename _Up, typename _Vp>\r\n __attribute__((__nonnull__))\r\n void\r\n construct(pair<_Tp1, _Tp2>* __p, const std::pair<_Up, _Vp>& __pr)\r\n {\r\n"]
[81.395487, "o", "   this->construct(__p, piecewise_construct,\r\n       std::forward_as_tuple(__pr.first),\r\n       std::forward_as_tuple(__pr.second));\r\n }\r\n\r\n      template<typename _Tp1, typename _Tp2, typename _Up, typename _Vp>\r\n __attribute__((__nonnull__))\r\n void\r\n construct(pair<_Tp1, _Tp2>* __p, pair<_Up, _Vp>&& __pr)\r\n {\r\n   this->construct(__p, piecewise_construct,\r\n       std::forward_as_tuple(std::forward<_Up>(__pr.first)),\r\n       std::forward_as_tuple(std::forward<_Vp>(__pr.second)));\r\n }\r\n# 307 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 3\r\n      template<typename _Up>\r\n\r\n __attribute__((__nonnull__))\r\n void\r\n destroy(_Up* __p)\r\n { __p->~_Up(); }\r\n\r\n      polymorphic_allocator\r\n      select_on_container_copy_construction() const noexcept\r\n      { return polymorphic_allocator(); }\r\n\r\n"]
[81.395554, "o", "      memory_resource*\r\n      resource() const noexcept\r\n      __attribute__((__returns_nonnull__))\r\n      { return _M_resource; }\r\n\r\n\r\n\r\n      [[nodiscard]]\r\n      friend bool\r\n      operator==(const polymorphic_allocator& __a,\r\n   const polymorphic_allocator& __b) noexcept\r\n      { return *__a.resource() == *__b.resource(); }\r\n\r\n\r\n      [[nodiscard]]\r\n      friend bool\r\n      operator!=(const polymorphic_allocator& __a,\r\n   const polymorphic_allocator& __b) noexcept\r\n      { return !(__a == __b); }\r\n\r\n\r\n    private:\r\n\r\n      using __uses_alloc1_ = __uses_alloc1<polymorphic_allocator>;\r\n      using __uses_alloc2_ = __uses_alloc2<polymorphic_allocator>;\r\n\r\n"]
[81.395638, "o", "      template<typename _Ind, typename... _Args>\r\n static tuple<_Args&&...>\r\n _S_construct_p(__uses_alloc0, _Ind, tuple<_Args...>& __t)\r\n { return std::move(__t); }\r\n\r\n      template<size_t... _Ind, typename... _Args>\r\n static tuple<allocator_arg_t, polymorphic_allocator, _Args&&...>\r\n _S_construct_p(__uses_alloc1_ __ua, index_sequence<_Ind...>,\r\n         tuple<_Args...>& __t)\r\n {\r\n   return {\r\n       allocator_arg, *__ua._M_a, std::get<_Ind>(std::move(__t))...\r\n   };\r\n }\r\n\r\n      template<size_t... _Ind, typename... _Args>\r\n static tuple<_Args&&..., polymorphic_allocator>\r\n _S_construct_p(__uses_alloc2_ __ua, index_sequence<_Ind...>,\r\n         tuple<_Args...>& __t)\r\n { return { std::get<_Ind>(std::move(__t))..., *__ua._M_a }; }\r\n\r\n\r\n      memory_resource* _M_resource;\r\n    };\r\n\r\n  template<typename _Tp1, typename _Tp2>\r\n    [[nodiscard]]\r\n    inline bool\r\n    operator==(const polymorphic_allocator<_Tp1>& __a,\r\n        const polymorphic_allocator<_Tp2>& __b) noexcept\r\n    { return *__a.resource() == *__b.resource(); }\r\n\r\n\r\n"]
[81.395701, "o", "  template<typename _Tp1, typename _Tp2>\r\n    [[nodiscard]]\r\n    inline bool\r\n    operator!=(const polymorphic_allocator<_Tp1>& __a,\r\n        const polymorphic_allocator<_Tp2>& __b) noexcept\r\n    { return !(__a == __b); }\r\n\r\n\r\n}\r\n\r\n  template<typename _Alloc> struct allocator_traits;\r\n\r\n\r\n  template<typename _Tp>\r\n    struct allocator_traits<pmr::polymorphic_allocator<_Tp>>\r\n    {\r\n\r\n      using allocator_type = pmr::polymorphic_allocator<_Tp>;\r\n\r\n\r\n      using value_type = _Tp;\r\n\r\n\r\n      using pointer = _Tp*;\r\n\r\n\r\n"]
[81.395773, "o", "      using const_pointer = const _Tp*;\r\n\r\n\r\n      using void_pointer = void*;\r\n\r\n\r\n      using const_void_pointer = const void*;\r\n\r\n\r\n      using difference_type = std::ptrdiff_t;\r\n\r\n\r\n      using size_type = std::size_t;\r\n\r\n\r\n\r\n\r\n\r\n      using propagate_on_container_copy_assignment = false_type;\r\n      using propagate_on_container_move_assignment = false_type;\r\n      using propagate_on_container_swap = false_type;\r\n\r\n      static allocator_type\r\n      select_on_container_copy_construction(const allocator_type&) noexcept\r\n      { return allocator_type(); }\r\n\r\n\r\n\r\n      using is_always_equal = false_type;\r\n\r\n      template<typename _Up>\r\n using rebind_alloc = pmr::polymorphic_allocator<_Up>;\r\n\r\n      template<typename _Up>\r\n"]
[81.395847, "o", " using rebind_traits = allocator_traits<pmr::polymorphic_allocator<_Up>>;\r\n# 446 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 3\r\n      [[nodiscard]] static pointer\r\n      allocate(allocator_type& __a, size_type __n)\r\n      { return __a.allocate(__n); }\r\n# 461 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 3\r\n      [[nodiscard]] static pointer\r\n      allocate(allocator_type& __a, size_type __n, const_void_pointer)\r\n      { return __a.allocate(__n); }\r\n# 473 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 3\r\n      static void\r\n      deallocate(allocator_type& __a, pointer __p, size_type __n)\r\n      { __a.deallocate(__p, __n); }\r\n# 488 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 3\r\n      template<typename _Up, typename... _Args>\r\n static void\r\n construct(allocator_type& __a, _Up* __p, _Args&&... __args)\r\n { __a.construct(__p, std::forward<_Args>(__args)...); }\r\n# 500 \"/usr/include/c++/14.2.1/bits/memory_resource.h\" 3\r\n      template<typename _Up>\r\n static void\r\n destroy(allocator_type&, _Up* __p)\r\n noexcept(is_nothrow_destructible<_Up>::value)\r\n"]
[81.395917, "o", " { __p->~_Up(); }\r\n\r\n\r\n\r\n\r\n\r\n      static size_type\r\n      max_size(const allocator_type&) noexcept\r\n      { return size_t(-1) / sizeof(value_type); }\r\n    };\r\n\r\n\r\n}\r\n# 69 \"/usr/include/c++/14.2.1/string\" 2 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n  namespace pmr {\r\n    template<typename _CharT, typename _Traits = char_traits<_CharT>>\r\n      using basic_string = std::basic_string<_CharT, _Traits,\r\n          polymorphic_allocator<_CharT>>;\r\n    using string = basic_string<char>;\r\n\r\n\r\n\r\n    using u16string = basic_string<char16_t>;\r\n"]
[81.395984, "o", "    using u32string = basic_string<char32_t>;\r\n    using wstring = basic_string<wchar_t>;\r\n  }\r\n\r\n}\r\n# 41 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 2 3\r\n\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 66 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n  class locale\r\n  {\r\n"]
[81.396046, "o", "  public:\r\n\r\n\r\n    typedef int category;\r\n\r\n\r\n    class facet;\r\n    class id;\r\n    class _Impl;\r\n\r\n    friend class facet;\r\n    friend class _Impl;\r\n\r\n    template<typename _Facet>\r\n      friend bool\r\n      has_facet(const locale&) throw();\r\n\r\n    template<typename _Facet>\r\n      friend const _Facet&\r\n      use_facet(const locale&);\r\n\r\n    template<typename _Facet>\r\n      friend const _Facet*\r\n      __try_use_facet(const locale&) noexcept;\r\n\r\n    template<typename _Cache>\r\n      friend struct __use_cache;\r\n# 106 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n"]
[81.396114, "o", "    static const category none = 0;\r\n    static const category ctype = 1L << 0;\r\n    static const category numeric = 1L << 1;\r\n    static const category collate = 1L << 2;\r\n    static const category time = 1L << 3;\r\n    static const category monetary = 1L << 4;\r\n    static const category messages = 1L << 5;\r\n    static const category all = (ctype | numeric | collate |\r\n        time | monetary | messages);\r\n# 125 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    locale() throw();\r\n# 134 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    locale(const locale& __other) throw();\r\n# 144 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    explicit\r\n    locale(const char* __s);\r\n# 159 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    locale(const locale& __base, const char* __s, category __cat);\r\n"]
[81.396174, "o", "# 170 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    explicit\r\n    locale(const std::string& __s) : locale(__s.c_str()) { }\r\n# 185 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    locale(const locale& __base, const std::string& __s, category __cat)\r\n    : locale(__base, __s.c_str(), __cat) { }\r\n# 200 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    locale(const locale& __base, const locale& __add, category __cat);\r\n# 213 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    template<typename _Facet>\r\n      locale(const locale& __other, _Facet* __f);\r\n\r\n\r\n    ~locale() throw();\r\n# 227 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    const locale&\r\n    operator=(const locale& __other) throw();\r\n# 242 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    template<typename _Facet>\r\n"]
[81.396243, "o", "      [[__nodiscard__]]\r\n      locale\r\n      combine(const locale& __other) const;\r\n\r\n\r\n\r\n\r\n\r\n\r\n    [[__nodiscard__]] __attribute ((__abi_tag__ (\"cxx11\")))\r\n    string\r\n    name() const;\r\n# 273 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    [[__nodiscard__]]\r\n    bool\r\n    operator==(const locale& __other) const throw();\r\n# 284 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    [[__nodiscard__]]\r\n    bool\r\n    operator!=(const locale& __other) const throw()\r\n    { return !(this->operator==(__other)); }\r\n# 305 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    template<typename _Char, typename _Traits, typename _Alloc>\r\n      [[__nodiscard__]]\r\n      bool\r\n"]
[81.396304, "o", "      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,\r\n   const basic_string<_Char, _Traits, _Alloc>& __s2) const;\r\n# 322 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    static locale\r\n    global(const locale& __loc);\r\n\r\n\r\n\r\n\r\n    [[__nodiscard__]]\r\n    static const locale&\r\n    classic();\r\n\r\n  private:\r\n\r\n    _Impl* _M_impl;\r\n\r\n\r\n    static _Impl* _S_classic;\r\n\r\n\r\n    static _Impl* _S_global;\r\n\r\n\r\n\r\n\r\n\r\n    static const char* const* const _S_categories;\r\n# 358 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n"]
[81.396335, "o", "    enum { _S_categories_size = 6 + 6 };\r\n\r\n\r\n    static __gthread_once_t _S_once;\r\n\r\n\r\n    explicit\r\n    locale(_Impl*) throw();\r\n\r\n    static void\r\n    _S_initialize();\r\n\r\n    static void\r\n    _S_initialize_once() throw();\r\n\r\n    static category\r\n"]
[81.396438, "o", "    _S_normalize_category(category);\r\n\r\n    void\r\n    _M_coalesce(const locale& __base, const locale& __add, category __cat);\r\n\r\n\r\n    static const id* const _S_twinned_facets[];\r\n\r\n  };\r\n# 396 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n  class locale::facet\r\n  {\r\n  private:\r\n    friend class locale;\r\n"]
[81.396511, "o", "    friend class locale::_Impl;\r\n\r\n    mutable _Atomic_word _M_refcount;\r\n\r\n\r\n    static __c_locale _S_c_locale;\r\n\r\n\r\n    static const char _S_c_name[2];\r\n\r\n\r\n    static __gthread_once_t _S_once;\r\n\r\n\r\n    static void\r\n    _S_initialize_once();\r\n\r\n  protected:\r\n# 427 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    explicit\r\n    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)\r\n    { }\r\n\r\n\r\n    virtual\r\n    ~facet();\r\n\r\n    static void\r\n    _S_create_c_locale(__c_locale& __cloc, const char* __s,\r\n         __c_locale __old = 0);\r\n\r\n    static __c_locale\r\n    _S_clone_c_locale(__c_locale& __cloc) throw();\r\n\r\n    static void\r\n    _S_destroy_c_locale(__c_locale& __cloc);\r\n\r\n    static __c_locale\r\n    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);\r\n\r\n\r\n\r\n    static __c_locale\r\n    _S_get_c_locale();\r\n\r\n    __attribute__ ((__const__)) static const char*\r\n    _S_get_c_name() throw();\r\n# 463 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n    facet(const facet&) = delete;\r\n\r\n    facet&\r\n    operator=(const facet&) = delete;\r\n\r\n\r\n  private:\r\n    void\r\n    _M_add_reference() const throw()\r\n"]
[81.396587, "o", "    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }\r\n\r\n    void\r\n    _M_remove_reference() const throw()\r\n    {\r\n\r\n      ;\r\n      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)\r\n {\r\n          ;\r\n   try\r\n     { delete this; }\r\n   catch(...)\r\n     { }\r\n }\r\n    }\r\n\r\n    const facet* _M_sso_shim(const id*) const;\r\n    const facet* _M_cow_shim(const id*) const;\r\n\r\n  protected:\r\n    class __shim;\r\n  };\r\n# 508 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n  class locale::id\r\n  {\r\n  private:\r\n    friend class locale;\r\n    friend class locale::_Impl;\r\n\r\n    template<typename _Facet>\r\n      friend const _Facet&\r\n"]
[81.396657, "o", "      use_facet(const locale&);\r\n\r\n    template<typename _Facet>\r\n      friend bool\r\n      has_facet(const locale&) throw();\r\n\r\n    template<typename _Facet>\r\n      friend const _Facet*\r\n      __try_use_facet(const locale&) noexcept;\r\n\r\n\r\n\r\n\r\n    mutable size_t _M_index;\r\n\r\n\r\n    static _Atomic_word _S_refcount;\r\n\r\n    void\r\n    operator=(const id&);\r\n\r\n    id(const id&);\r\n\r\n  public:\r\n\r\n\r\n\r\n    id() { }\r\n\r\n    size_t\r\n    _M_id() const throw();\r\n  };\r\n\r\n\r\n"]
[81.396722, "o", "\r\n  class locale::_Impl\r\n  {\r\n  public:\r\n\r\n    friend class locale;\r\n    friend class locale::facet;\r\n\r\n    template<typename _Facet>\r\n      friend bool\r\n      has_facet(const locale&) throw();\r\n\r\n    template<typename _Facet>\r\n      friend const _Facet&\r\n      use_facet(const locale&);\r\n\r\n    template<typename _Facet>\r\n      friend const _Facet*\r\n      __try_use_facet(const locale&) noexcept;\r\n\r\n    template<typename _Cache>\r\n      friend struct __use_cache;\r\n\r\n  private:\r\n\r\n    _Atomic_word _M_refcount;\r\n    const facet** _M_facets;\r\n    size_t _M_facets_size;\r\n    const facet** _M_caches;\r\n    char** _M_names;\r\n    static const locale::id* const _S_id_ctype[];\r\n"]
[81.396791, "o", "    static const locale::id* const _S_id_numeric[];\r\n    static const locale::id* const _S_id_collate[];\r\n    static const locale::id* const _S_id_time[];\r\n    static const locale::id* const _S_id_monetary[];\r\n    static const locale::id* const _S_id_messages[];\r\n    static const locale::id* const* const _S_facet_categories[];\r\n\r\n    void\r\n    _M_add_reference() throw()\r\n    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }\r\n\r\n    void\r\n    _M_remove_reference() throw()\r\n    {\r\n\r\n      ;\r\n      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)\r\n {\r\n          ;\r\n   try\r\n     { delete this; }\r\n"]
[81.396829, "o", "   catch(...)\r\n     { }\r\n }\r\n    }\r\n\r\n    _Impl(const _Impl&, size_t);\r\n    _Impl(const char*, size_t);\r\n    _Impl(size_t) throw();\r\n\r\n   ~_Impl() throw();\r\n\r\n    _Impl(const _Impl&);\r\n\r\n    void\r\n    operator=(const _Impl&);\r\n\r\n    bool\r\n    _M_check_same_name()\r\n    {\r\n"]
[81.396866, "o", "      bool __ret = true;\r\n      if (_M_names[1])\r\n\r\n for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)\r\n   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;\r\n      return __ret;\r\n    }\r\n\r\n    void\r\n    _M_replace_categories(const _Impl*, category);\r\n\r\n    void\r\n    _M_replace_category(const _Impl*, const locale::id* const*);\r\n\r\n"]
[81.396897, "o", "    void\r\n    _M_replace_facet(const _Impl*, const locale::id*);\r\n\r\n    void\r\n    _M_install_facet(const locale::id*, const facet*);\r\n\r\n    template<typename _Facet>\r\n      void\r\n      _M_init_facet(_Facet* __facet)\r\n      { _M_install_facet(&_Facet::id, __facet); }\r\n\r\n    template<typename _Facet>\r\n      void\r\n"]
[81.397019, "o", "      _M_init_facet_unchecked(_Facet* __facet)\r\n      {\r\n __facet->_M_add_reference();\r\n _M_facets[_Facet::id._M_id()] = __facet;\r\n      }\r\n\r\n    void\r\n    _M_install_cache(const facet*, size_t);\r\n\r\n    void _M_init_extra(facet**);\r\n    void _M_init_extra(void*, void*, const char*, const char*);\r\n\r\n"]
[81.397085, "o", "\r\n\r\n\r\n  };\r\n# 678 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n  template<typename _CharT>\r\n    class __cxx11:: collate : public locale::facet\r\n    {\r\n    public:\r\n\r\n\r\n\r\n      typedef _CharT char_type;\r\n      typedef basic_string<_CharT> string_type;\r\n\r\n\r\n    protected:\r\n\r\n\r\n      __c_locale _M_c_locale_collate;\r\n\r\n    public:\r\n\r\n      static locale::id id;\r\n# 705 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n      explicit\r\n      collate(size_t __refs = 0)\r\n      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())\r\n      { }\r\n# 719 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n      explicit\r\n      collate(__c_locale __cloc, size_t __refs = 0)\r\n      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))\r\n      { }\r\n# 736 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n      int\r\n      compare(const _CharT* __lo1, const _CharT* __hi1,\r\n       const _CharT* __lo2, const _CharT* __hi2) const\r\n      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }\r\n# 755 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n      string_type\r\n      transform(const _CharT* __lo, const _CharT* __hi) const\r\n      { return this->do_transform(__lo, __hi); }\r\n# 769 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n      long\r\n      hash(const _CharT* __lo, const _CharT* __hi) const\r\n      { return this->do_hash(__lo, __hi); }\r\n\r\n\r\n      int\r\n      _M_compare(const _CharT*, const _CharT*) const throw();\r\n\r\n      size_t\r\n      _M_transform(_CharT*, const _CharT*, size_t) const throw();\r\n\r\n  protected:\r\n\r\n      virtual\r\n      ~collate()\r\n"]
[81.397153, "o", "      { _S_destroy_c_locale(_M_c_locale_collate); }\r\n# 798 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n      virtual int\r\n      do_compare(const _CharT* __lo1, const _CharT* __hi1,\r\n   const _CharT* __lo2, const _CharT* __hi2) const;\r\n# 812 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n      virtual string_type\r\n      do_transform(const _CharT* __lo, const _CharT* __hi) const;\r\n# 825 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 3\r\n      virtual long\r\n      do_hash(const _CharT* __lo, const _CharT* __hi) const;\r\n    };\r\n\r\n  template<typename _CharT>\r\n    locale::id collate<_CharT>::id;\r\n\r\n\r\n  template<>\r\n    int\r\n    collate<char>::_M_compare(const char*, const char*) const throw();\r\n\r\n  template<>\r\n    size_t\r\n    collate<char>::_M_transform(char*, const char*, size_t) const throw();\r\n\r\n\r\n"]
[81.397217, "o", "  template<>\r\n    int\r\n    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();\r\n\r\n  template<>\r\n    size_t\r\n    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();\r\n\r\n\r\n\r\n  template<typename _CharT>\r\n    class __cxx11:: collate_byname : public collate<_CharT>\r\n    {\r\n    public:\r\n\r\n\r\n      typedef _CharT char_type;\r\n      typedef basic_string<_CharT> string_type;\r\n\r\n\r\n      explicit\r\n      collate_byname(const char* __s, size_t __refs = 0)\r\n      : collate<_CharT>(__refs)\r\n      {\r\n if (__builtin_strcmp(__s, \"C\") != 0\r\n     && __builtin_strcmp(__s, \"POSIX\") != 0)\r\n   {\r\n"]
[81.397254, "o", "     this->_S_destroy_c_locale(this->_M_c_locale_collate);\r\n     this->_S_create_c_locale(this->_M_c_locale_collate, __s);\r\n   }\r\n      }\r\n\r\n\r\n      explicit\r\n      collate_byname(const string& __s, size_t __refs = 0)\r\n      : collate_byname(__s.c_str(), __refs) { }\r\n\r\n\r\n    protected:\r\n      virtual\r\n      ~collate_byname() { }\r\n    };\r\n\r\n"]
[81.397282, "o", "\r\n"]
[81.3974, "o", "}\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/locale_classes.tcc\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/locale_classes.tcc\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/locale_classes.tcc\" 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  template<typename _Facet>\r\n    locale::\r\n    locale(const locale& __other, _Facet* __f)\r\n    {\r\n      _M_impl = new _Impl(*__other._M_impl, 1);\r\n\r\n      try\r\n { _M_impl->_M_install_facet(&_Facet::id, __f); }\r\n      catch(...)\r\n {\r\n   _M_impl->_M_remove_reference();\r\n   throw;\r\n }\r\n      delete [] _M_impl->_M_names[0];\r\n      _M_impl->_M_names[0] = 0;\r\n    }\r\n\r\n  template<typename _Facet>\r\n    locale\r\n    locale::\r\n    combine(const locale& __other) const\r\n    {\r\n      _Impl* __tmp = new _Impl(*_M_impl, 1);\r\n      try\r\n {\r\n"]
[81.397461, "o", "   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);\r\n }\r\n      catch(...)\r\n {\r\n   __tmp->_M_remove_reference();\r\n   throw;\r\n }\r\n      return locale(__tmp);\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    bool\r\n    locale::\r\n    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,\r\n        const basic_string<_CharT, _Traits, _Alloc>& __s2) const\r\n    {\r\n      typedef std::collate<_CharT> __collate_type;\r\n      const __collate_type& __collate = use_facet<__collate_type>(*this);\r\n      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),\r\n    __s2.data(), __s2.data() + __s2.length()) < 0);\r\n    }\r\n\r\n"]
[81.39753, "o", "#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wc++17-extensions\"\r\n  template<typename _Facet>\r\n    inline const _Facet*\r\n    __try_use_facet(const locale& __loc) noexcept\r\n    {\r\n      const size_t __i = _Facet::id._M_id();\r\n"]
[81.39759, "o", "      const locale::facet** __facets = __loc._M_impl->_M_facets;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      if constexpr (__is_same(_Facet, ctype<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, num_get<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n"]
[81.397651, "o", "      if constexpr (__is_same(_Facet, num_put<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, codecvt<char, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, collate<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, moneypunct<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, moneypunct<char, true>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, money_get<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, money_put<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, numpunct<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, time_get<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n"]
[81.397717, "o", "      if constexpr (__is_same(_Facet, time_put<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, messages<char>)) return static_cast<const _Facet*>(__facets[__i]);\r\n\r\n\r\n      if constexpr (__is_same(_Facet, ctype<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, num_get<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, num_put<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, codecvt<wchar_t, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, collate<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, moneypunct<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, moneypunct<wchar_t, true>)) return static_cast<const _Facet*>(__facets[__i]);\r\n"]
[81.397748, "o", "      if constexpr (__is_same(_Facet, money_get<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, money_put<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, numpunct<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, time_get<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, time_put<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n"]
[81.397782, "o", "      if constexpr (__is_same(_Facet, messages<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n\r\n\r\n      if constexpr (__is_same(_Facet, codecvt<char16_t, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n      if constexpr (__is_same(_Facet, codecvt<char32_t, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);\r\n\r\n\r\n\r\n\r\n      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])\r\n"]
[81.39789, "o", " return 0;\r\n\r\n\r\n      return dynamic_cast<const _Facet*>(__facets[__i]);\r\n\r\n\r\n\r\n    }\r\n#pragma GCC diagnostic pop\r\n# 164 \"/usr/include/c++/14.2.1/bits/locale_classes.tcc\" 3\r\n  template<typename _Facet>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    has_facet(const locale& __loc) throw()\r\n    {\r\n\r\n      static_assert(__is_base_of(locale::facet, _Facet),\r\n      \"template argument must be derived from locale::facet\");\r\n\r\n\r\n\r\n      return std::__try_use_facet<_Facet>(__loc) != 0;\r\n    }\r\n# 192 \"/usr/include/c++/14.2.1/bits/locale_classes.tcc\" 3\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdangling-reference\"\r\n  template<typename _Facet>\r\n    [[__nodiscard__]]\r\n    inline const _Facet&\r\n    use_facet(const locale& __loc)\r\n    {\r\n\r\n"]
[81.397931, "o", "      static_assert(__is_base_of(locale::facet, _Facet),\r\n      \"template argument must be derived from locale::facet\");\r\n\r\n\r\n\r\n      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))\r\n return *__f;\r\n      __throw_bad_cast();\r\n    }\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n\r\n  template<typename _CharT>\r\n    int\r\n    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()\r\n    { return 0; }\r\n\r\n\r\n  template<typename _CharT>\r\n"]
[81.398014, "o", "    size_t\r\n    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()\r\n    { return 0; }\r\n\r\n  template<typename _CharT>\r\n    int\r\n    collate<_CharT>::\r\n    do_compare(const _CharT* __lo1, const _CharT* __hi1,\r\n        const _CharT* __lo2, const _CharT* __hi2) const\r\n    {\r\n\r\n\r\n      const string_type __one(__lo1, __hi1);\r\n      const string_type __two(__lo2, __hi2);\r\n\r\n      const _CharT* __p = __one.c_str();\r\n      const _CharT* __pend = __one.data() + __one.length();\r\n      const _CharT* __q = __two.c_str();\r\n      const _CharT* __qend = __two.data() + __two.length();\r\n\r\n\r\n\r\n\r\n      for (;;)\r\n {\r\n   const int __res = _M_compare(__p, __q);\r\n   if (__res)\r\n     return __res;\r\n\r\n"]
[81.398082, "o", "   __p += char_traits<_CharT>::length(__p);\r\n   __q += char_traits<_CharT>::length(__q);\r\n   if (__p == __pend && __q == __qend)\r\n     return 0;\r\n   else if (__p == __pend)\r\n     return -1;\r\n   else if (__q == __qend)\r\n     return 1;\r\n\r\n   __p++;\r\n   __q++;\r\n }\r\n    }\r\n\r\n  template<typename _CharT>\r\n    typename collate<_CharT>::string_type\r\n    collate<_CharT>::\r\n    do_transform(const _CharT* __lo, const _CharT* __hi) const\r\n    {\r\n      string_type __ret;\r\n\r\n\r\n      const string_type __str(__lo, __hi);\r\n\r\n      const _CharT* __p = __str.c_str();\r\n      const _CharT* __pend = __str.data() + __str.length();\r\n\r\n"]
[81.39816, "o", "      size_t __len = (__hi - __lo) * 2;\r\n\r\n      _CharT* __c = new _CharT[__len];\r\n\r\n      try\r\n {\r\n\r\n\r\n\r\n   for (;;)\r\n     {\r\n\r\n       size_t __res = _M_transform(__c, __p, __len);\r\n\r\n\r\n       if (__res >= __len)\r\n  {\r\n    __len = __res + 1;\r\n    delete [] __c, __c = 0;\r\n    __c = new _CharT[__len];\r\n    __res = _M_transform(__c, __p, __len);\r\n  }\r\n\r\n       __ret.append(__c, __res);\r\n       __p += char_traits<_CharT>::length(__p);\r\n       if (__p == __pend)\r\n  break;\r\n\r\n       __p++;\r\n       __ret.push_back(_CharT());\r\n     }\r\n }\r\n"]
[81.398222, "o", "      catch(...)\r\n {\r\n   delete [] __c;\r\n   throw;\r\n }\r\n\r\n      delete [] __c;\r\n\r\n      return __ret;\r\n    }\r\n\r\n  template<typename _CharT>\r\n    long\r\n    collate<_CharT>::\r\n    do_hash(const _CharT* __lo, const _CharT* __hi) const\r\n    {\r\n      unsigned long __val = 0;\r\n      for (; __lo < __hi; ++__lo)\r\n __val =\r\n   *__lo + ((__val << 7)\r\n     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::\r\n    __digits - 7)));\r\n      return static_cast<long>(__val);\r\n    }\r\n\r\n\r\n"]
[81.39829, "o", "\r\n\r\n  extern template class collate<char>;\r\n  extern template class collate_byname<char>;\r\n\r\n  extern template\r\n    const collate<char>*\r\n    __try_use_facet<collate<char> >(const locale&) noexcept;\r\n\r\n  extern template\r\n    const collate<char>&\r\n    use_facet<collate<char> >(const locale&);\r\n\r\n  extern template\r\n    bool\r\n    has_facet<collate<char> >(const locale&);\r\n\r\n\r\n  extern template class collate<wchar_t>;\r\n  extern template class collate_byname<wchar_t>;\r\n\r\n  extern template\r\n    const collate<wchar_t>*\r\n    __try_use_facet<collate<wchar_t> >(const locale&) noexcept;\r\n\r\n  extern template\r\n"]
[81.398359, "o", "    const collate<wchar_t>&\r\n    use_facet<collate<wchar_t> >(const locale&);\r\n\r\n  extern template\r\n    bool\r\n    has_facet<collate<wchar_t> >(const locale&);\r\n\r\n\r\n\r\n\r\n}\r\n# 889 \"/usr/include/c++/14.2.1/bits/locale_classes.h\" 2 3\r\n# 42 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 2 3\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/system_error\" 1 3\r\n"]
[81.398416, "o", "# 32 \"/usr/include/c++/14.2.1/system_error\" 3\r\n       \r\n# 33 \"/usr/include/c++/14.2.1/system_error\" 3\r\n"]
[81.398478, "o", "# 41 \"/usr/include/c++/14.2.1/system_error\" 3\r\n# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/error_constants.h\" 1 3\r\n# 34 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/error_constants.h\" 3\r\n# 1 \"/usr/include/c++/14.2.1/cerrno\" 1 3\r\n# 39 \"/usr/include/c++/14.2.1/cerrno\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/cerrno\" 3\r\n# 35 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/error_constants.h\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  enum class errc\r\n    {\r\n      address_family_not_supported = 97,\r\n      address_in_use = 98,\r\n      address_not_available = 99,\r\n"]
[81.398541, "o", "      already_connected = 106,\r\n      argument_list_too_long = 7,\r\n      argument_out_of_domain = 33,\r\n      bad_address = 14,\r\n      bad_file_descriptor = 9,\r\n\r\n\r\n      bad_message = 74,\r\n\r\n\r\n      broken_pipe = 32,\r\n      connection_aborted = 103,\r\n      connection_already_in_progress = 114,\r\n      connection_refused = 111,\r\n      connection_reset = 104,\r\n      cross_device_link = 18,\r\n      destination_address_required = 89,\r\n      device_or_resource_busy = 16,\r\n      directory_not_empty = 39,\r\n"]
[81.398594, "o", "      executable_format_error = 8,\r\n      file_exists = 17,\r\n      file_too_large = 27,\r\n      filename_too_long = 36,\r\n      function_not_supported = 38,\r\n      host_unreachable = 113,\r\n\r\n\r\n      identifier_removed = 43,\r\n\r\n\r\n      illegal_byte_sequence = 84,\r\n      inappropriate_io_control_operation = 25,\r\n      interrupted = 4,\r\n      invalid_argument = 22,\r\n      invalid_seek = 29,\r\n      io_error = 5,\r\n      is_a_directory = 21,\r\n"]
[81.398665, "o", "      message_size = 90,\r\n      network_down = 100,\r\n      network_reset = 102,\r\n      network_unreachable = 101,\r\n      no_buffer_space = 105,\r\n      no_child_process = 10,\r\n\r\n\r\n      no_link = 67,\r\n\r\n\r\n      no_lock_available = 37,\r\n\r\n\r\n      no_message_available = 61,\r\n\r\n\r\n      no_message = 42,\r\n      no_protocol_option = 92,\r\n      no_space_on_device = 28,\r\n\r\n\r\n      no_stream_resources = 63,\r\n\r\n\r\n      no_such_device_or_address = 6,\r\n      no_such_device = 19,\r\n"]
[81.398732, "o", "      no_such_file_or_directory = 2,\r\n      no_such_process = 3,\r\n      not_a_directory = 20,\r\n      not_a_socket = 88,\r\n\r\n\r\n      not_a_stream = 60,\r\n\r\n\r\n      not_connected = 107,\r\n      not_enough_memory = 12,\r\n\r\n\r\n      not_supported = 95,\r\n\r\n\r\n\r\n      operation_canceled = 125,\r\n\r\n\r\n      operation_in_progress = 115,\r\n      operation_not_permitted = 1,\r\n      operation_not_supported = 95,\r\n      operation_would_block = 11,\r\n\r\n\r\n      owner_dead = 130,\r\n\r\n\r\n"]
[81.398815, "o", "      permission_denied = 13,\r\n\r\n\r\n      protocol_error = 71,\r\n\r\n\r\n      protocol_not_supported = 93,\r\n      read_only_file_system = 30,\r\n      resource_deadlock_would_occur = 35,\r\n      resource_unavailable_try_again = 11,\r\n      result_out_of_range = 34,\r\n\r\n\r\n      state_not_recoverable = 131,\r\n\r\n\r\n\r\n      stream_timeout = 62,\r\n\r\n\r\n\r\n      text_file_busy = 26,\r\n\r\n\r\n      timed_out = 110,\r\n      too_many_files_open_in_system = 23,\r\n      too_many_files_open = 24,\r\n      too_many_links = 31,\r\n      too_many_symbolic_link_levels = 40,\r\n\r\n\r\n"]
[81.39887, "o", "      value_too_large = 75,\r\n\r\n\r\n\r\n\r\n      wrong_protocol_type = 91\r\n    };\r\n\r\n\r\n}\r\n# 42 \"/usr/include/c++/14.2.1/system_error\" 2 3\r\n\r\n# 1 \"/usr/include/c++/14.2.1/stdexcept\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/stdexcept\" 3\r\n       \r\n# 37 \"/usr/include/c++/14.2.1/stdexcept\" 3\r\n"]
[81.398943, "o", "\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n  struct __cow_string\r\n  {\r\n    union {\r\n      const char* _M_p;\r\n      char _M_bytes[sizeof(const char*)];\r\n    };\r\n\r\n    __cow_string();\r\n    __cow_string(const std::string&);\r\n    __cow_string(const char*, size_t);\r\n    __cow_string(const __cow_string&) noexcept;\r\n    __cow_string& operator=(const __cow_string&) noexcept;\r\n"]
[81.399015, "o", "    ~__cow_string();\r\n\r\n    __cow_string(__cow_string&&) noexcept;\r\n    __cow_string& operator=(__cow_string&&) noexcept;\r\n\r\n  };\r\n\r\n  typedef basic_string<char> __sso_string;\r\n# 113 \"/usr/include/c++/14.2.1/stdexcept\" 3\r\n  class logic_error : public exception\r\n  {\r\n    __cow_string _M_msg;\r\n\r\n  public:\r\n\r\n    explicit\r\n    logic_error(const string& __arg) ;\r\n\r\n\r\n    explicit\r\n    logic_error(const char*) ;\r\n\r\n    logic_error(logic_error&&) noexcept;\r\n    logic_error& operator=(logic_error&&) noexcept;\r\n\r\n\r\n\r\n"]
[81.399083, "o", "    logic_error(const logic_error&) noexcept;\r\n    logic_error& operator=(const logic_error&) noexcept;\r\n\r\n\r\n\r\n\r\n\r\n    virtual ~logic_error() noexcept;\r\n\r\n\r\n\r\n    virtual const char*\r\n    what() const noexcept;\r\n\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n  class domain_error : public logic_error\r\n  {\r\n  public:\r\n    explicit domain_error(const string& __arg) ;\r\n\r\n    explicit domain_error(const char*) ;\r\n"]
[81.399142, "o", "    domain_error(const domain_error&) = default;\r\n    domain_error& operator=(const domain_error&) = default;\r\n    domain_error(domain_error&&) = default;\r\n    domain_error& operator=(domain_error&&) = default;\r\n\r\n    virtual ~domain_error() noexcept;\r\n  };\r\n\r\n\r\n  class invalid_argument : public logic_error\r\n  {\r\n  public:\r\n    explicit invalid_argument(const string& __arg) ;\r\n\r\n    explicit invalid_argument(const char*) ;\r\n    invalid_argument(const invalid_argument&) = default;\r\n    invalid_argument& operator=(const invalid_argument&) = default;\r\n    invalid_argument(invalid_argument&&) = default;\r\n    invalid_argument& operator=(invalid_argument&&) = default;\r\n\r\n    virtual ~invalid_argument() noexcept;\r\n  };\r\n"]
[81.399208, "o", "\r\n\r\n\r\n  class length_error : public logic_error\r\n  {\r\n  public:\r\n    explicit length_error(const string& __arg) ;\r\n\r\n    explicit length_error(const char*) ;\r\n    length_error(const length_error&) = default;\r\n    length_error& operator=(const length_error&) = default;\r\n    length_error(length_error&&) = default;\r\n    length_error& operator=(length_error&&) = default;\r\n\r\n    virtual ~length_error() noexcept;\r\n  };\r\n\r\n\r\n\r\n  class out_of_range : public logic_error\r\n  {\r\n  public:\r\n    explicit out_of_range(const string& __arg) ;\r\n\r\n    explicit out_of_range(const char*) ;\r\n"]
[81.399277, "o", "    out_of_range(const out_of_range&) = default;\r\n    out_of_range& operator=(const out_of_range&) = default;\r\n    out_of_range(out_of_range&&) = default;\r\n    out_of_range& operator=(out_of_range&&) = default;\r\n\r\n    virtual ~out_of_range() noexcept;\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  class runtime_error : public exception\r\n  {\r\n    __cow_string _M_msg;\r\n\r\n  public:\r\n\r\n    explicit\r\n    runtime_error(const string& __arg) ;\r\n\r\n\r\n    explicit\r\n    runtime_error(const char*) ;\r\n\r\n    runtime_error(runtime_error&&) noexcept;\r\n    runtime_error& operator=(runtime_error&&) noexcept;\r\n\r\n\r\n\r\n"]
[81.399339, "o", "    runtime_error(const runtime_error&) noexcept;\r\n    runtime_error& operator=(const runtime_error&) noexcept;\r\n\r\n\r\n\r\n\r\n\r\n    virtual ~runtime_error() noexcept;\r\n\r\n\r\n\r\n    virtual const char*\r\n    what() const noexcept;\r\n\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n\r\n  class range_error : public runtime_error\r\n  {\r\n  public:\r\n    explicit range_error(const string& __arg) ;\r\n\r\n    explicit range_error(const char*) ;\r\n"]
[81.399412, "o", "    range_error(const range_error&) = default;\r\n    range_error& operator=(const range_error&) = default;\r\n    range_error(range_error&&) = default;\r\n    range_error& operator=(range_error&&) = default;\r\n\r\n    virtual ~range_error() noexcept;\r\n  };\r\n\r\n\r\n  class overflow_error : public runtime_error\r\n  {\r\n  public:\r\n    explicit overflow_error(const string& __arg) ;\r\n\r\n    explicit overflow_error(const char*) ;\r\n    overflow_error(const overflow_error&) = default;\r\n    overflow_error& operator=(const overflow_error&) = default;\r\n    overflow_error(overflow_error&&) = default;\r\n    overflow_error& operator=(overflow_error&&) = default;\r\n\r\n    virtual ~overflow_error() noexcept;\r\n  };\r\n\r\n\r\n  class underflow_error : public runtime_error\r\n  {\r\n"]
[81.399481, "o", "  public:\r\n    explicit underflow_error(const string& __arg) ;\r\n\r\n    explicit underflow_error(const char*) ;\r\n    underflow_error(const underflow_error&) = default;\r\n    underflow_error& operator=(const underflow_error&) = default;\r\n    underflow_error(underflow_error&&) = default;\r\n    underflow_error& operator=(underflow_error&&) = default;\r\n\r\n    virtual ~underflow_error() noexcept;\r\n  };\r\n\r\n\r\n\r\n\r\n}\r\n# 44 \"/usr/include/c++/14.2.1/system_error\" 2 3\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.399555, "o", "  class error_code;\r\n  class error_condition;\r\n  class system_error;\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_error_code_enum : public false_type { };\r\n\r\n\r\n  template<typename _Tp>\r\n    struct is_error_condition_enum : public false_type { };\r\n\r\n  template<>\r\n    struct is_error_condition_enum<errc>\r\n    : public true_type { };\r\n\r\n\r\n  template <typename _Tp>\r\n    inline constexpr bool is_error_code_enum_v =\r\n      is_error_code_enum<_Tp>::value;\r\n  template <typename _Tp>\r\n    inline constexpr bool is_error_condition_enum_v =\r\n      is_error_condition_enum<_Tp>::value;\r\n\r\n\r\n\r\ninline namespace _V2 {\r\n# 106 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  class error_category\r\n  {"]
[81.399622, "o", "\r\n  public:\r\n    constexpr error_category() noexcept = default;\r\n\r\n    virtual ~error_category();\r\n\r\n    error_category(const error_category&) = delete;\r\n    error_category& operator=(const error_category&) = delete;\r\n\r\n\r\n    virtual const char*\r\n    name() const noexcept = 0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  private:\r\n    __attribute ((__abi_tag__ (\"cxx11\")))\r\n    virtual __cow_string\r\n    _M_message(int) const;\r\n\r\n  public:\r\n\r\n    __attribute ((__abi_tag__ (\"cxx11\")))\r\n    virtual string\r\n"]
[81.399685, "o", "    message(int) const = 0;\r\n# 144 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  public:\r\n\r\n    virtual error_condition\r\n    default_error_condition(int __i) const noexcept;\r\n\r\n\r\n    virtual bool\r\n    equivalent(int __i, const error_condition& __cond) const noexcept;\r\n\r\n\r\n    virtual bool\r\n    equivalent(const error_code& __code, int __i) const noexcept;\r\n\r\n\r\n    [[__nodiscard__]]\r\n    bool\r\n    operator==(const error_category& __other) const noexcept\r\n    { return this == &__other; }\r\n# 170 \"/usr/include/c++/14.2.1/system_error\" 3\r\n    bool\r\n    operator<(const error_category& __other) const noexcept\r\n    { return less<const error_category*>()(this, &__other); }\r\n\r\n    bool\r\n"]
[81.399748, "o", "    operator!=(const error_category& __other) const noexcept\r\n    { return this != &__other; }\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n  [[__nodiscard__, __gnu__::__const__]]\r\n  const error_category&\r\n  generic_category() noexcept;\r\n\r\n\r\n  [[__nodiscard__, __gnu__::__const__]]\r\n  const error_category&\r\n  system_category() noexcept;\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nnamespace __adl_only\r\n{\r\n  void make_error_code() = delete;\r\n  void make_error_condition() = delete;\r\n}\r\n"]
[81.399815, "o", "# 223 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  class error_code\r\n  {\r\n    template<typename _ErrorCodeEnum>\r\n      using _Check\r\n = __enable_if_t<is_error_code_enum<_ErrorCodeEnum>::value>;\r\n\r\n  public:\r\n    error_code() noexcept\r\n    : _M_value(0), _M_cat(&system_category()) { }\r\n\r\n    error_code(int __v, const error_category& __cat) noexcept\r\n    : _M_value(__v), _M_cat(&__cat) { }\r\n\r\n\r\n    template<typename _ErrorCodeEnum,\r\n      typename = _Check<_ErrorCodeEnum>>\r\n      error_code(_ErrorCodeEnum __e) noexcept\r\n      {\r\n using __adl_only::make_error_code;\r\n *this = make_error_code(__e);\r\n      }\r\n\r\n    error_code(const error_code&) = default;\r\n    error_code& operator=(const error_code&) = default;\r\n\r\n    void\r\n"]
[81.399888, "o", "    assign(int __v, const error_category& __cat) noexcept\r\n    {\r\n      _M_value = __v;\r\n      _M_cat = &__cat;\r\n    }\r\n\r\n    void\r\n    clear() noexcept\r\n    { assign(0, system_category()); }\r\n\r\n\r\n    [[__nodiscard__]]\r\n    int\r\n    value() const noexcept { return _M_value; }\r\n\r\n\r\n    [[__nodiscard__]]\r\n    const error_category&\r\n    category() const noexcept { return *_M_cat; }\r\n\r\n\r\n    error_condition\r\n    default_error_condition() const noexcept;\r\n\r\n\r\n    __attribute ((__abi_tag__ (\"cxx11\")))\r\n    string\r\n    message() const\r\n    { return category().message(value()); }\r\n\r\n"]
[81.399945, "o", "\r\n    [[__nodiscard__]]\r\n    explicit operator bool() const noexcept\r\n    { return _M_value != 0; }\r\n\r\n\r\n  private:\r\n    int _M_value;\r\n    const error_category* _M_cat;\r\n  };\r\n# 300 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  [[__nodiscard__]]\r\n  inline error_code\r\n  make_error_code(errc __e) noexcept\r\n  { return error_code(static_cast<int>(__e), generic_category()); }\r\n# 323 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  inline bool\r\n  operator<(const error_code& __lhs, const error_code& __rhs) noexcept\r\n  {\r\n    return (__lhs.category() < __rhs.category()\r\n"]
[81.400007, "o", "     || (__lhs.category() == __rhs.category()\r\n  && __lhs.value() < __rhs.value()));\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ostream<_CharT, _Traits>&\r\n    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)\r\n    { return (__os << __e.category().name() << ':' << __e.value()); }\r\n# 354 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  class error_condition\r\n  {\r\n    template<typename _ErrorConditionEnum>\r\n      using _Check\r\n = __enable_if_t<is_error_condition_enum<_ErrorConditionEnum>::value>;\r\n\r\n  public:\r\n\r\n"]
[81.400076, "o", "    error_condition() noexcept\r\n    : _M_value(0), _M_cat(&generic_category()) { }\r\n\r\n\r\n    error_condition(int __v, const error_category& __cat) noexcept\r\n    : _M_value(__v), _M_cat(&__cat) { }\r\n\r\n\r\n    template<typename _ErrorConditionEnum,\r\n      typename = _Check<_ErrorConditionEnum>>\r\n      error_condition(_ErrorConditionEnum __e) noexcept\r\n      {\r\n using __adl_only::make_error_condition;\r\n *this = make_error_condition(__e);\r\n      }\r\n\r\n    error_condition(const error_condition&) = default;\r\n    error_condition& operator=(const error_condition&) = default;\r\n\r\n\r\n    void\r\n    assign(int __v, const error_category& __cat) noexcept\r\n    {\r\n      _M_value = __v;\r\n      _M_cat = &__cat;\r\n    }\r\n\r\n\r\n    void\r\n    clear() noexcept\r\n"]
[81.400144, "o", "    { assign(0, generic_category()); }\r\n\r\n\r\n\r\n\r\n    [[__nodiscard__]]\r\n    int\r\n    value() const noexcept { return _M_value; }\r\n\r\n\r\n    [[__nodiscard__]]\r\n    const error_category&\r\n    category() const noexcept { return *_M_cat; }\r\n\r\n\r\n    __attribute ((__abi_tag__ (\"cxx11\")))\r\n    string\r\n    message() const\r\n    { return category().message(value()); }\r\n\r\n\r\n    [[__nodiscard__]]\r\n    explicit operator bool() const noexcept\r\n    { return _M_value != 0; }\r\n\r\n\r\n  private:\r\n    int _M_value;\r\n    const error_category* _M_cat;\r\n  };\r\n# 433 \"/usr/include/c++/14.2.1/system_error\" 3\r\n"]
[81.400213, "o", "  [[__nodiscard__]]\r\n  inline error_condition\r\n  make_error_condition(errc __e) noexcept\r\n  { return error_condition(static_cast<int>(__e), generic_category()); }\r\n# 447 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  [[__nodiscard__]]\r\n  inline bool\r\n  operator==(const error_code& __lhs, const error_code& __rhs) noexcept\r\n  {\r\n    return __lhs.category() == __rhs.category()\r\n      && __lhs.value() == __rhs.value();\r\n  }\r\n# 463 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  [[__nodiscard__]]\r\n  inline bool\r\n  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept\r\n  {\r\n    return __lhs.category().equivalent(__lhs.value(), __rhs)\r\n      || __rhs.category().equivalent(__lhs, __rhs.value());\r\n  }\r\n# 478 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  [[__nodiscard__]]\r\n"]
[81.400288, "o", "  inline bool\r\n  operator==(const error_condition& __lhs,\r\n      const error_condition& __rhs) noexcept\r\n  {\r\n    return __lhs.category() == __rhs.category()\r\n      && __lhs.value() == __rhs.value();\r\n  }\r\n# 506 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  inline bool\r\n  operator<(const error_condition& __lhs,\r\n     const error_condition& __rhs) noexcept\r\n  {\r\n    return (__lhs.category() < __rhs.category()\r\n     || (__lhs.category() == __rhs.category()\r\n  && __lhs.value() < __rhs.value()));\r\n  }\r\n\r\n\r\n  inline bool\r\n  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept\r\n  {\r\n    return (__rhs.category().equivalent(__rhs.value(), __lhs)\r\n     || __lhs.category().equivalent(__rhs, __lhs.value()));\r\n  }\r\n\r\n\r\n"]
[81.400347, "o", "  inline bool\r\n  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept\r\n  { return !(__lhs == __rhs); }\r\n\r\n\r\n  inline bool\r\n  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept\r\n  { return !(__lhs == __rhs); }\r\n\r\n\r\n  inline bool\r\n  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept\r\n  { return !(__lhs == __rhs); }\r\n\r\n\r\n  inline bool\r\n  operator!=(const error_condition& __lhs,\r\n      const error_condition& __rhs) noexcept\r\n  { return !(__lhs == __rhs); }\r\n# 556 \"/usr/include/c++/14.2.1/system_error\" 3\r\n  class system_error : public std::runtime_error\r\n  {\r\n  private:\r\n    error_code _M_code;\r\n\r\n"]
[81.400406, "o", "  public:\r\n    system_error(error_code __ec = error_code())\r\n    : runtime_error(__ec.message()), _M_code(__ec) { }\r\n\r\n    system_error(error_code __ec, const string& __what)\r\n    : runtime_error(__what + (\": \" + __ec.message())), _M_code(__ec) { }\r\n\r\n    system_error(error_code __ec, const char* __what)\r\n    : runtime_error(__what + (\": \" + __ec.message())), _M_code(__ec) { }\r\n\r\n    system_error(int __v, const error_category& __ecat, const char* __what)\r\n    : system_error(error_code(__v, __ecat), __what) { }\r\n\r\n    system_error(int __v, const error_category& __ecat)\r\n    : runtime_error(error_code(__v, __ecat).message()),\r\n      _M_code(__v, __ecat) { }\r\n\r\n"]
[81.40047, "o", "    system_error(int __v, const error_category& __ecat, const string& __what)\r\n    : runtime_error(__what + (\": \" + error_code(__v, __ecat).message())),\r\n      _M_code(__v, __ecat) { }\r\n\r\n\r\n    system_error (const system_error &) = default;\r\n    system_error &operator= (const system_error &) = default;\r\n\r\n\r\n    virtual ~system_error() noexcept;\r\n\r\n    const error_code&\r\n    code() const noexcept { return _M_code; }\r\n  };\r\n\r\n\r\n}\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<>\r\n    struct hash<error_code>\r\n    : public __hash_base<size_t, error_code>\r\n"]
[81.400509, "o", "    {\r\n      size_t\r\n      operator()(const error_code& __e) const noexcept\r\n      {\r\n const size_t __tmp = std::_Hash_impl::hash(__e.value());\r\n return std::_Hash_impl::__hash_combine(&__e.category(), __tmp);\r\n      }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<>\r\n    struct hash<error_condition>\r\n"]
[81.40061, "o", "    : public __hash_base<size_t, error_condition>\r\n    {\r\n      size_t\r\n      operator()(const error_condition& __e) const noexcept\r\n      {\r\n const size_t __tmp = std::_Hash_impl::hash(__e.value());\r\n return std::_Hash_impl::__hash_combine(&__e.category(), __tmp);\r\n      }\r\n    };\r\n\r\n\r\n\r\n}\r\n# 47 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 2 3\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n  enum _Ios_Fmtflags\r\n    {\r\n      _S_boolalpha = 1L << 0,\r\n      _S_dec = 1L << 1,\r\n      _S_fixed = 1L << 2,\r\n      _S_hex = 1L << 3,\r\n      _S_internal = 1L << 4,\r\n      _S_left = 1L << 5,\r\n      _S_oct = 1L << 6,\r\n      _S_right = 1L << 7,\r\n      _S_scientific = 1L << 8,\r\n      _S_showbase = 1L << 9,\r\n      _S_showpoint = 1L << 10,\r\n      _S_showpos = 1L << 11,\r\n"]
[81.400671, "o", "      _S_skipws = 1L << 12,\r\n      _S_unitbuf = 1L << 13,\r\n      _S_uppercase = 1L << 14,\r\n      _S_adjustfield = _S_left | _S_right | _S_internal,\r\n      _S_basefield = _S_dec | _S_oct | _S_hex,\r\n      _S_floatfield = _S_scientific | _S_fixed,\r\n      _S_ios_fmtflags_end = 1L << 16,\r\n      _S_ios_fmtflags_max = 0x7fffffff,\r\n      _S_ios_fmtflags_min = ~0x7fffffff\r\n    };\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Fmtflags\r\n  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) noexcept\r\n  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Fmtflags\r\n  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) noexcept\r\n"]
[81.400744, "o", "  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Fmtflags\r\n  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) noexcept\r\n  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Fmtflags\r\n  operator~(_Ios_Fmtflags __a) noexcept\r\n  { return _Ios_Fmtflags(~static_cast<int>(__a)); }\r\n\r\n  constexpr\r\n  inline const _Ios_Fmtflags&\r\n  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) noexcept\r\n  { return __a = __a | __b; }\r\n\r\n  constexpr\r\n  inline const _Ios_Fmtflags&\r\n  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) noexcept\r\n  { return __a = __a & __b; }\r\n\r\n  constexpr\r\n  inline const _Ios_Fmtflags&\r\n  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) noexcept\r\n"]
[81.400815, "o", "  { return __a = __a ^ __b; }\r\n\r\n\r\n  enum _Ios_Openmode\r\n    {\r\n      _S_app = 1L << 0,\r\n      _S_ate = 1L << 1,\r\n      _S_bin = 1L << 2,\r\n      _S_in = 1L << 3,\r\n      _S_out = 1L << 4,\r\n      _S_trunc = 1L << 5,\r\n      _S_noreplace = 1L << 6,\r\n      _S_ios_openmode_end = 1L << 16,\r\n      _S_ios_openmode_max = 0x7fffffff,\r\n      _S_ios_openmode_min = ~0x7fffffff\r\n    };\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Openmode\r\n  operator&(_Ios_Openmode __a, _Ios_Openmode __b) noexcept\r\n  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Openmode\r\n  operator|(_Ios_Openmode __a, _Ios_Openmode __b) noexcept\r\n"]
[81.400893, "o", "  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Openmode\r\n  operator^(_Ios_Openmode __a, _Ios_Openmode __b) noexcept\r\n  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Openmode\r\n  operator~(_Ios_Openmode __a) noexcept\r\n  { return _Ios_Openmode(~static_cast<int>(__a)); }\r\n\r\n  constexpr\r\n  inline const _Ios_Openmode&\r\n  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b) noexcept\r\n  { return __a = __a | __b; }\r\n\r\n  constexpr\r\n  inline const _Ios_Openmode&\r\n  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b) noexcept\r\n  { return __a = __a & __b; }\r\n\r\n  constexpr\r\n  inline const _Ios_Openmode&\r\n"]
[81.400969, "o", "  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b) noexcept\r\n  { return __a = __a ^ __b; }\r\n\r\n\r\n  enum _Ios_Iostate\r\n    {\r\n      _S_goodbit = 0,\r\n      _S_badbit = 1L << 0,\r\n      _S_eofbit = 1L << 1,\r\n      _S_failbit = 1L << 2,\r\n      _S_ios_iostate_end = 1L << 16,\r\n      _S_ios_iostate_max = 0x7fffffff,\r\n      _S_ios_iostate_min = ~0x7fffffff\r\n    };\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Iostate\r\n  operator&(_Ios_Iostate __a, _Ios_Iostate __b) noexcept\r\n  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }\r\n\r\n  [[__nodiscard__]] constexpr\r\n"]
[81.401041, "o", "  inline _Ios_Iostate\r\n  operator|(_Ios_Iostate __a, _Ios_Iostate __b) noexcept\r\n  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Iostate\r\n  operator^(_Ios_Iostate __a, _Ios_Iostate __b) noexcept\r\n"]
[81.401114, "o", "  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }\r\n\r\n  [[__nodiscard__]] constexpr\r\n  inline _Ios_Iostate\r\n  operator~(_Ios_Iostate __a) noexcept\r\n  { return _Ios_Iostate(~static_cast<int>(__a)); }\r\n\r\n  constexpr\r\n  inline const _Ios_Iostate&\r\n  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b) noexcept\r\n  { return __a = __a | __b; }\r\n\r\n  constexpr\r\n  inline const _Ios_Iostate&\r\n  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b) noexcept\r\n  { return __a = __a & __b; }\r\n\r\n  constexpr\r\n  inline const _Ios_Iostate&\r\n  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b) noexcept\r\n  { return __a = __a ^ __b; }\r\n\r\n\r\n  enum _Ios_Seekdir\r\n    {\r\n      _S_beg = 0,\r\n"]
[81.401173, "o", "      _S_cur = 1,\r\n      _S_end = 2,\r\n      _S_ios_seekdir_end = 1L << 16\r\n    };\r\n\r\n\r\n\r\n  enum class io_errc { stream = 1 };\r\n\r\n  template <> struct is_error_code_enum<io_errc> : public true_type { };\r\n\r\n  [[__nodiscard__, __gnu__::__const__]]\r\n  const error_category&\r\n  iostream_category() noexcept;\r\n\r\n  [[__nodiscard__]]\r\n  inline error_code\r\n"]
[81.401224, "o", "  make_error_code(io_errc __e) noexcept\r\n  { return error_code(static_cast<int>(__e), iostream_category()); }\r\n\r\n  [[__nodiscard__]]\r\n  inline error_condition\r\n  make_error_condition(io_errc __e) noexcept\r\n  { return error_condition(static_cast<int>(__e), iostream_category()); }\r\n# 254 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n  class ios_base\r\n"]
[81.40128, "o", "  {\r\n# 272 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n  public:\r\n# 281 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    class __attribute ((__abi_tag__ (\"cxx11\"))) failure : public system_error\r\n    {\r\n    public:\r\n      explicit\r\n      failure(const string& __str);\r\n\r\n\r\n      explicit\r\n      failure(const string&, const error_code&);\r\n\r\n      explicit\r\n"]
[81.401333, "o", "      failure(const char*, const error_code& = io_errc::stream);\r\n\r\n\r\n      virtual\r\n      ~failure() throw();\r\n\r\n      virtual const char*\r\n      what() const throw();\r\n"]
[81.401386, "o", "    };\r\n# 367 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    typedef _Ios_Fmtflags fmtflags;\r\n\r\n\r\n    static const fmtflags boolalpha = _S_boolalpha;\r\n\r\n\r\n    static const fmtflags dec = _S_dec;\r\n\r\n\r\n    static const fmtflags fixed = _S_fixed;\r\n\r\n\r\n    static const fmtflags hex = _S_hex;\r\n\r\n\r\n\r\n\r\n    static const fmtflags internal = _S_internal;\r\n\r\n"]
[81.401442, "o", "\r\n\r\n    static const fmtflags left = _S_left;\r\n\r\n\r\n    static const fmtflags oct = _S_oct;\r\n\r\n\r\n\r\n    static const fmtflags right = _S_right;\r\n\r\n\r\n    static const fmtflags scientific = _S_scientific;\r\n\r\n\r\n\r\n    static const fmtflags showbase = _S_showbase;\r\n\r\n\r\n\r\n    static const fmtflags showpoint = _S_showpoint;\r\n\r\n\r\n"]
[81.401497, "o", "    static const fmtflags showpos = _S_showpos;\r\n\r\n\r\n    static const fmtflags skipws = _S_skipws;\r\n\r\n\r\n    static const fmtflags unitbuf = _S_unitbuf;\r\n\r\n\r\n\r\n    static const fmtflags uppercase = _S_uppercase;\r\n\r\n\r\n    static const fmtflags adjustfield = _S_adjustfield;\r\n\r\n\r\n    static const fmtflags basefield = _S_basefield;\r\n\r\n\r\n    static const fmtflags floatfield = _S_floatfield;\r\n# 442 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n"]
[81.401551, "o", "    typedef _Ios_Iostate iostate;\r\n\r\n\r\n\r\n    static const iostate badbit = _S_badbit;\r\n\r\n\r\n    static const iostate eofbit = _S_eofbit;\r\n\r\n\r\n\r\n\r\n    static const iostate failbit = _S_failbit;\r\n\r\n\r\n    static const iostate goodbit = _S_goodbit;\r\n# 473 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n"]
[81.401607, "o", "    typedef _Ios_Openmode openmode;\r\n\r\n\r\n    static const openmode app = _S_app;\r\n\r\n\r\n    static const openmode ate = _S_ate;\r\n\r\n\r\n\r\n\r\n    static const openmode binary = _S_bin;\r\n\r\n\r\n    static const openmode in = _S_in;\r\n\r\n\r\n    static const openmode out = _S_out;\r\n\r\n\r\n    static const openmode trunc = _S_trunc;\r\n\r\n"]
[81.401656, "o", "    static const openmode __noreplace = _S_noreplace;\r\n# 512 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    typedef _Ios_Seekdir seekdir;\r\n\r\n\r\n    static const seekdir beg = _S_beg;\r\n\r\n\r\n    static const seekdir cur = _S_cur;\r\n\r\n\r\n    static const seekdir end = _S_end;\r\n# 545 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    enum event\r\n    {\r\n"]
[81.401713, "o", "      erase_event,\r\n      imbue_event,\r\n      copyfmt_event\r\n    };\r\n# 562 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    typedef void (*event_callback) (event __e, ios_base& __b, int __i);\r\n# 574 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    void\r\n    register_callback(event_callback __fn, int __index);\r\n\r\n  protected:\r\n    streamsize _M_precision;\r\n    streamsize _M_width;\r\n    fmtflags _M_flags;\r\n    iostate _M_exception;\r\n"]
[81.401773, "o", "    iostate _M_streambuf_state;\r\n\r\n\r\n\r\n    struct _Callback_list\r\n    {\r\n\r\n      _Callback_list* _M_next;\r\n      ios_base::event_callback _M_fn;\r\n      int _M_index;\r\n      _Atomic_word _M_refcount;\r\n\r\n      _Callback_list(ios_base::event_callback __fn, int __index,\r\n       _Callback_list* __cb)\r\n      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }\r\n\r\n      void\r\n      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }\r\n\r\n\r\n      int\r\n"]
[81.401812, "o", "      _M_remove_reference()\r\n      {\r\n\r\n        ;\r\n        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);\r\n        if (__res == 0)\r\n          {\r\n            ;\r\n          }\r\n        return __res;\r\n      }\r\n    };\r\n\r\n"]
[81.401883, "o", "     _Callback_list* _M_callbacks;\r\n\r\n    void\r\n    _M_call_callbacks(event __ev) throw();\r\n\r\n    void\r\n    _M_dispose_callbacks(void) throw();\r\n\r\n\r\n    struct _Words\r\n    {\r\n      void* _M_pword;\r\n      long _M_iword;\r\n      _Words() : _M_pword(0), _M_iword(0) { }\r\n    };\r\n\r\n\r\n    _Words _M_word_zero;\r\n\r\n\r\n\r\n"]
[81.401941, "o", "    enum { _S_local_word_size = 8 };\r\n    _Words _M_local_word[_S_local_word_size];\r\n\r\n\r\n    int _M_word_size;\r\n    _Words* _M_word;\r\n\r\n    _Words&\r\n    _M_grow_words(int __index, bool __iword);\r\n\r\n\r\n    locale _M_ios_locale;\r\n\r\n    void\r\n    _M_init() throw();\r\n\r\n  public:\r\n\r\n\r\n\r\n"]
[81.401998, "o", "\r\n\r\n    class Init\r\n    {\r\n      friend class ios_base;\r\n    public:\r\n      Init();\r\n      ~Init();\r\n\r\n\r\n      Init(const Init&) = default;\r\n      Init& operator=(const Init&) = default;\r\n\r\n\r\n    private:\r\n      static _Atomic_word _S_refcount;\r\n      static bool _S_synced_with_stdio;\r\n    };\r\n\r\n\r\n"]
[81.402052, "o", "\r\n\r\n\r\n\r\n    fmtflags\r\n    flags() const\r\n    { return _M_flags; }\r\n# 692 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    fmtflags\r\n    flags(fmtflags __fmtfl)\r\n    {\r\n      fmtflags __old = _M_flags;\r\n      _M_flags = __fmtfl;\r\n      return __old;\r\n    }\r\n# 708 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    fmtflags\r\n"]
[81.402108, "o", "    setf(fmtflags __fmtfl)\r\n    {\r\n      fmtflags __old = _M_flags;\r\n      _M_flags |= __fmtfl;\r\n      return __old;\r\n    }\r\n# 725 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    fmtflags\r\n    setf(fmtflags __fmtfl, fmtflags __mask)\r\n    {\r\n      fmtflags __old = _M_flags;\r\n      _M_flags &= ~__mask;\r\n      _M_flags |= (__fmtfl & __mask);\r\n      return __old;\r\n"]
[81.402161, "o", "    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    void\r\n    unsetf(fmtflags __mask)\r\n    { _M_flags &= ~__mask; }\r\n# 751 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    streamsize\r\n    precision() const\r\n    { return _M_precision; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    streamsize\r\n"]
[81.402215, "o", "    precision(streamsize __prec)\r\n    {\r\n      streamsize __old = _M_precision;\r\n      _M_precision = __prec;\r\n      return __old;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    streamsize\r\n    width() const\r\n    { return _M_width; }\r\n\r\n\r\n\r\n\r\n"]
[81.402268, "o", "\r\n\r\n    streamsize\r\n    width(streamsize __wide)\r\n    {\r\n      streamsize __old = _M_width;\r\n      _M_width = __wide;\r\n      return __old;\r\n    }\r\n# 802 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    static bool\r\n    sync_with_stdio(bool __sync = true);\r\n# 814 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    locale\r\n"]
[81.402327, "o", "    imbue(const locale& __loc) throw();\r\n# 825 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    locale\r\n    getloc() const\r\n    { return _M_ios_locale; }\r\n# 836 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    const locale&\r\n    _M_getloc() const\r\n    { return _M_ios_locale; }\r\n# 855 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    static int\r\n    xalloc() throw();\r\n# 871 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    long&\r\n"]
[81.402381, "o", "    iword(int __ix)\r\n    {\r\n      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)\r\n   ? _M_word[__ix] : _M_grow_words(__ix, true);\r\n      return __word._M_iword;\r\n    }\r\n# 892 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    void*&\r\n    pword(int __ix)\r\n    {\r\n      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)\r\n   ? _M_word[__ix] : _M_grow_words(__ix, false);\r\n      return __word._M_pword;\r\n"]
[81.40244, "o", "    }\r\n# 909 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n    virtual ~ios_base();\r\n\r\n  protected:\r\n    ios_base() throw ();\r\n# 923 \"/usr/include/c++/14.2.1/bits/ios_base.h\" 3\r\n  public:\r\n    ios_base(const ios_base&) = delete;\r\n\r\n    ios_base&\r\n    operator=(const ios_base&) = delete;\r\n\r\n  protected:\r\n"]
[81.402491, "o", "    void\r\n    _M_move(ios_base&) noexcept;\r\n\r\n    void\r\n    _M_swap(ios_base& __rhs) noexcept;\r\n\r\n  };\r\n\r\n\r\n\r\n  inline ios_base&\r\n  boolalpha(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::boolalpha);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  noboolalpha(ios_base& __base)\r\n"]
[81.402543, "o", "  {\r\n    __base.unsetf(ios_base::boolalpha);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  showbase(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::showbase);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  noshowbase(ios_base& __base)\r\n  {\r\n"]
[81.40259, "o", "    __base.unsetf(ios_base::showbase);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  showpoint(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::showpoint);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  noshowpoint(ios_base& __base)\r\n  {\r\n"]
[81.40265, "o", "    __base.unsetf(ios_base::showpoint);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  showpos(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::showpos);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  noshowpos(ios_base& __base)\r\n"]
[81.4027, "o", "  {\r\n    __base.unsetf(ios_base::showpos);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  skipws(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::skipws);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  noskipws(ios_base& __base)\r\n  {\r\n    __base.unsetf(ios_base::skipws);\r\n    return __base;\r\n  }\r\n\r\n"]
[81.402757, "o", "\r\n  inline ios_base&\r\n  uppercase(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::uppercase);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  nouppercase(ios_base& __base)\r\n  {\r\n    __base.unsetf(ios_base::uppercase);\r\n    return __base;\r\n  }\r\n\r\n\r\n"]
[81.402811, "o", "  inline ios_base&\r\n  unitbuf(ios_base& __base)\r\n  {\r\n     __base.setf(ios_base::unitbuf);\r\n     return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  nounitbuf(ios_base& __base)\r\n  {\r\n     __base.unsetf(ios_base::unitbuf);\r\n     return __base;\r\n  }\r\n\r\n\r\n\r\n  inline ios_base&\r\n  internal(ios_base& __base)\r\n"]
[81.402848, "o", "  {\r\n     __base.setf(ios_base::internal, ios_base::adjustfield);\r\n     return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  left(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::left, ios_base::adjustfield);\r\n"]
[81.40295, "o", "    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  right(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::right, ios_base::adjustfield);\r\n    return __base;\r\n  }\r\n\r\n\r\n\r\n"]
[81.40302, "o", "  inline ios_base&\r\n  dec(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::dec, ios_base::basefield);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  hex(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::hex, ios_base::basefield);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  oct(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::oct, ios_base::basefield);\r\n    return __base;\r\n  }\r\n\r\n\r\n\r\n  inline ios_base&\r\n  fixed(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::fixed, ios_base::floatfield);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  scientific(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::scientific, ios_base::floatfield);\r\n    return __base;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  inline ios_base&\r\n"]
[81.403085, "o", "  hexfloat(ios_base& __base)\r\n  {\r\n    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);\r\n    return __base;\r\n  }\r\n\r\n\r\n  inline ios_base&\r\n  defaultfloat(ios_base& __base)\r\n  {\r\n    __base.unsetf(ios_base::floatfield);\r\n    return __base;\r\n  }\r\n\r\n\r\n\r\n}\r\n# 45 \"/usr/include/c++/14.2.1/ios\" 2 3\r\n"]
[81.40316, "o", "# 1 \"/usr/include/c++/14.2.1/streambuf\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n       \r\n# 37 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n# 47 \"/usr/include/c++/14.2.1/streambuf\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    streamsize\r\n    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,\r\n     basic_streambuf<_CharT, _Traits>*, bool&);\r\n# 123 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    class basic_streambuf\r\n"]
[81.403199, "o", "    {\r\n    public:\r\n\r\n\r\n\r\n\r\n\r\n\r\n      typedef _CharT char_type;\r\n      typedef _Traits traits_type;\r\n      typedef typename traits_type::int_type int_type;\r\n      typedef typename traits_type::pos_type pos_type;\r\n      typedef typename traits_type::off_type off_type;\r\n\r\n\r\n\r\n\r\n      typedef basic_streambuf<char_type, traits_type> __streambuf_type;\r\n\r\n\r\n      friend class basic_ios<char_type, traits_type>;\r\n"]
[81.403279, "o", "      friend class basic_istream<char_type, traits_type>;\r\n      friend class basic_ostream<char_type, traits_type>;\r\n      friend class istreambuf_iterator<char_type, traits_type>;\r\n      friend class ostreambuf_iterator<char_type, traits_type>;\r\n\r\n      friend streamsize\r\n      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);\r\n\r\n      template<bool _IsMove, typename _CharT2>\r\n        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\r\n            _CharT2*>::__type\r\n"]
[81.403355, "o", "        __copy_move_a2(istreambuf_iterator<_CharT2>,\r\n         istreambuf_iterator<_CharT2>, _CharT2*);\r\n\r\n      template<typename _CharT2>\r\n        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\r\n      istreambuf_iterator<_CharT2> >::__type\r\n        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\r\n      const _CharT2&);\r\n\r\n      template<typename _CharT2, typename _Distance>\r\n        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\r\n            void>::__type\r\n        advance(istreambuf_iterator<_CharT2>&, _Distance);\r\n\r\n      friend void __istream_extract(istream&, char*, streamsize);\r\n\r\n      template<typename _CharT2, typename _Traits2, typename _Alloc>\r\n        friend basic_istream<_CharT2, _Traits2>&\r\n        operator>>(basic_istream<_CharT2, _Traits2>&,\r\n     basic_string<_CharT2, _Traits2, _Alloc>&);\r\n\r\n      template<typename _CharT2, typename _Traits2, typename _Alloc>\r\n        friend basic_istream<_CharT2, _Traits2>&\r\n        getline(basic_istream<_CharT2, _Traits2>&,\r\n  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);\r\n\r\n    protected:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      char_type* _M_in_beg;\r\n      char_type* _M_in_cur;\r\n      char_type* _M_in_end;\r\n      char_type* _M_out_beg;\r\n      char_type* _M_out_cur;\r\n      char_type* _M_out_end;\r\n\r\n\r\n      locale _M_buf_locale;\r\n\r\n"]
[81.403428, "o", "  public:\r\n\r\n      virtual\r\n      ~basic_streambuf()\r\n      { }\r\n# 215 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      locale\r\n      pubimbue(const locale& __loc)\r\n      {\r\n locale __tmp(this->getloc());\r\n this->imbue(__loc);\r\n _M_buf_locale = __loc;\r\n return __tmp;\r\n      }\r\n# 232 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      locale\r\n      getloc() const\r\n      { return _M_buf_locale; }\r\n# 245 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      basic_streambuf*\r\n      pubsetbuf(char_type* __s, streamsize __n)\r\n      { return this->setbuf(__s, __n); }\r\n# 257 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      pos_type\r\n      pubseekoff(off_type __off, ios_base::seekdir __way,\r\n   ios_base::openmode __mode = ios_base::in | ios_base::out)\r\n      { return this->seekoff(__off, __way, __mode); }\r\n"]
[81.403503, "o", "# 269 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      pos_type\r\n      pubseekpos(pos_type __sp,\r\n   ios_base::openmode __mode = ios_base::in | ios_base::out)\r\n      { return this->seekpos(__sp, __mode); }\r\n\r\n\r\n\r\n\r\n      int\r\n      pubsync() { return this->sync(); }\r\n# 290 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      streamsize\r\n      in_avail()\r\n      {\r\n const streamsize __ret = this->egptr() - this->gptr();\r\n return __ret ? __ret : this->showmanyc();\r\n      }\r\n# 304 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      int_type\r\n      snextc()\r\n      {\r\n int_type __ret = traits_type::eof();\r\n if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),\r\n             __ret), true))\r\n   __ret = this->sgetc();\r\n return __ret;\r\n"]
[81.40357, "o", "      }\r\n# 322 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      int_type\r\n      sbumpc()\r\n      {\r\n int_type __ret;\r\n if (__builtin_expect(this->gptr() < this->egptr(), true))\r\n   {\r\n     __ret = traits_type::to_int_type(*this->gptr());\r\n     this->gbump(1);\r\n   }\r\n else\r\n   __ret = this->uflow();\r\n return __ret;\r\n      }\r\n# 344 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      int_type\r\n      sgetc()\r\n      {\r\n int_type __ret;\r\n if (__builtin_expect(this->gptr() < this->egptr(), true))\r\n   __ret = traits_type::to_int_type(*this->gptr());\r\n else\r\n   __ret = this->underflow();\r\n return __ret;\r\n      }\r\n# 363 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      streamsize\r\n"]
[81.403642, "o", "      sgetn(char_type* __s, streamsize __n)\r\n      { return this->xsgetn(__s, __n); }\r\n# 378 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      int_type\r\n      sputbackc(char_type __c)\r\n      {\r\n int_type __ret;\r\n const bool __testpos = this->eback() < this->gptr();\r\n if (__builtin_expect(!__testpos ||\r\n        !traits_type::eq(__c, this->gptr()[-1]), false))\r\n   __ret = this->pbackfail(traits_type::to_int_type(__c));\r\n else\r\n   {\r\n     this->gbump(-1);\r\n     __ret = traits_type::to_int_type(*this->gptr());\r\n   }\r\n return __ret;\r\n      }\r\n# 403 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      int_type\r\n      sungetc()\r\n      {\r\n"]
[81.403676, "o", " int_type __ret;\r\n if (__builtin_expect(this->eback() < this->gptr(), true))\r\n   {\r\n     this->gbump(-1);\r\n     __ret = traits_type::to_int_type(*this->gptr());\r\n   }\r\n else\r\n   __ret = this->pbackfail();\r\n return __ret;\r\n      }\r\n# 430 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      int_type\r\n      sputc(char_type __c)\r\n      {\r\n int_type __ret;\r\n"]
[81.403757, "o", " if (__builtin_expect(this->pptr() < this->epptr(), true))\r\n   {\r\n     *this->pptr() = __c;\r\n     this->pbump(1);\r\n     __ret = traits_type::to_int_type(__c);\r\n   }\r\n else\r\n   __ret = this->overflow(traits_type::to_int_type(__c));\r\n return __ret;\r\n      }\r\n# 456 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      streamsize\r\n      sputn(const char_type* __s, streamsize __n)\r\n      { return this->xsputn(__s, __n); }\r\n\r\n    protected:\r\n# 470 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      basic_streambuf()\r\n      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),\r\n      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),\r\n      _M_buf_locale(locale())\r\n      { }\r\n# 488 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      char_type*\r\n      eback() const { return _M_in_beg; }\r\n\r\n      char_type*\r\n      gptr() const { return _M_in_cur; }\r\n\r\n"]
[81.403828, "o", "      char_type*\r\n      egptr() const { return _M_in_end; }\r\n# 504 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      void\r\n      gbump(int __n) { _M_in_cur += __n; }\r\n# 515 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      void\r\n      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)\r\n      {\r\n _M_in_beg = __gbeg;\r\n _M_in_cur = __gnext;\r\n _M_in_end = __gend;\r\n      }\r\n# 535 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      char_type*\r\n      pbase() const { return _M_out_beg; }\r\n\r\n      char_type*\r\n      pptr() const { return _M_out_cur; }\r\n\r\n      char_type*\r\n      epptr() const { return _M_out_end; }\r\n# 551 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      void\r\n      pbump(int __n) { _M_out_cur += __n; }\r\n# 561 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      void\r\n"]
[81.403901, "o", "      setp(char_type* __pbeg, char_type* __pend)\r\n      {\r\n _M_out_beg = _M_out_cur = __pbeg;\r\n _M_out_end = __pend;\r\n      }\r\n# 582 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual void\r\n      imbue(const locale& __loc __attribute__ ((__unused__)))\r\n      { }\r\n# 597 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual basic_streambuf<char_type,_Traits>*\r\n      setbuf(char_type*, streamsize)\r\n      { return this; }\r\n# 608 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual pos_type\r\n      seekoff(off_type, ios_base::seekdir,\r\n       ios_base::openmode = ios_base::in | ios_base::out)\r\n      { return pos_type(off_type(-1)); }\r\n# 620 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual pos_type\r\n      seekpos(pos_type,\r\n       ios_base::openmode = ios_base::in | ios_base::out)\r\n      { return pos_type(off_type(-1)); }\r\n# 633 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n"]
[81.403967, "o", "      virtual int\r\n      sync() { return 0; }\r\n# 655 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual streamsize\r\n      showmanyc() { return 0; }\r\n# 671 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual streamsize\r\n      xsgetn(char_type* __s, streamsize __n);\r\n# 693 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual int_type\r\n      underflow()\r\n      { return traits_type::eof(); }\r\n# 706 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual int_type\r\n      uflow()\r\n      {\r\n int_type __ret = traits_type::eof();\r\n const bool __testeof = traits_type::eq_int_type(this->underflow(),\r\n       __ret);\r\n if (!__testeof)\r\n   {\r\n     __ret = traits_type::to_int_type(*this->gptr());\r\n     this->gbump(1);\r\n   }\r\n"]
[81.404045, "o", " return __ret;\r\n      }\r\n# 730 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual int_type\r\n      pbackfail(int_type __c __attribute__ ((__unused__)) = traits_type::eof())\r\n      { return traits_type::eof(); }\r\n# 748 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual streamsize\r\n      xsputn(const char_type* __s, streamsize __n);\r\n# 774 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      virtual int_type\r\n      overflow(int_type __c __attribute__ ((__unused__)) = traits_type::eof())\r\n      { return traits_type::eof(); }\r\n# 801 \"/usr/include/c++/14.2.1/streambuf\" 3\r\n      void\r\n      __safe_gbump(streamsize __n) { _M_in_cur += __n; }\r\n\r\n      void\r\n      __safe_pbump(streamsize __n) { _M_out_cur += __n; }\r\n\r\n\r\n\r\n\r\n"]
[81.404113, "o", "    protected:\r\n\r\n      basic_streambuf(const basic_streambuf&);\r\n\r\n      basic_streambuf&\r\n      operator=(const basic_streambuf&);\r\n\r\n\r\n      void\r\n      swap(basic_streambuf& __sb)\r\n      {\r\n std::swap(_M_in_beg, __sb._M_in_beg);\r\n std::swap(_M_in_cur, __sb._M_in_cur);\r\n std::swap(_M_in_end, __sb._M_in_end);\r\n std::swap(_M_out_beg, __sb._M_out_beg);\r\n std::swap(_M_out_cur, __sb._M_out_cur);\r\n std::swap(_M_out_end, __sb._M_out_end);\r\n std::swap(_M_buf_locale, __sb._M_buf_locale);\r\n      }\r\n\r\n    };\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    std::basic_streambuf<_CharT, _Traits>::\r\n    basic_streambuf(const basic_streambuf&) = default;\r\n\r\n"]
[81.404192, "o", "  template<typename _CharT, typename _Traits>\r\n    std::basic_streambuf<_CharT, _Traits>&\r\n    std::basic_streambuf<_CharT, _Traits>::\r\n    operator=(const basic_streambuf&) = default;\r\n\r\n\r\n\r\n  template<>\r\n    streamsize\r\n    __copy_streambufs_eof(basic_streambuf<char>* __sbin,\r\n     basic_streambuf<char>* __sbout, bool& __ineof);\r\n\r\n  template<>\r\n    streamsize\r\n    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,\r\n     basic_streambuf<wchar_t>* __sbout, bool& __ineof);\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.404262, "o", "}\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/streambuf.tcc\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/streambuf.tcc\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/streambuf.tcc\" 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    streamsize\r\n    basic_streambuf<_CharT, _Traits>::\r\n    xsgetn(char_type* __s, streamsize __n)\r\n    {\r\n      streamsize __ret = 0;\r\n      while (__ret < __n)\r\n {\r\n   const streamsize __buf_len = this->egptr() - this->gptr();\r\n   if (__buf_len)\r\n"]
[81.404326, "o", "     {\r\n       const streamsize __remaining = __n - __ret;\r\n       const streamsize __len = std::min(__buf_len, __remaining);\r\n       traits_type::copy(__s, this->gptr(), __len);\r\n       __ret += __len;\r\n       __s += __len;\r\n       this->__safe_gbump(__len);\r\n     }\r\n\r\n   if (__ret < __n)\r\n     {\r\n       const int_type __c = this->uflow();\r\n       if (!traits_type::eq_int_type(__c, traits_type::eof()))\r\n  {\r\n    traits_type::assign(*__s++, traits_type::to_char_type(__c));\r\n    ++__ret;\r\n  }\r\n       else\r\n  break;\r\n     }\r\n }\r\n      return __ret;\r\n    }\r\n"]
[81.404391, "o", "\r\n  template<typename _CharT, typename _Traits>\r\n    streamsize\r\n    basic_streambuf<_CharT, _Traits>::\r\n    xsputn(const char_type* __s, streamsize __n)\r\n    {\r\n      streamsize __ret = 0;\r\n      while (__ret < __n)\r\n {\r\n   const streamsize __buf_len = this->epptr() - this->pptr();\r\n   if (__buf_len)\r\n     {\r\n       const streamsize __remaining = __n - __ret;\r\n       const streamsize __len = std::min(__buf_len, __remaining);\r\n       traits_type::copy(this->pptr(), __s, __len);\r\n       __ret += __len;\r\n       __s += __len;\r\n       this->__safe_pbump(__len);\r\n     }\r\n\r\n   if (__ret < __n)\r\n     {\r\n       int_type __c = this->overflow(traits_type::to_int_type(*__s));\r\n"]
[81.404458, "o", "       if (!traits_type::eq_int_type(__c, traits_type::eof()))\r\n  {\r\n    ++__ret;\r\n    ++__s;\r\n  }\r\n       else\r\n  break;\r\n     }\r\n }\r\n      return __ret;\r\n    }\r\n\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    streamsize\r\n    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,\r\n     basic_streambuf<_CharT, _Traits>* __sbout,\r\n     bool& __ineof)\r\n    {\r\n      streamsize __ret = 0;\r\n      __ineof = true;\r\n      typename _Traits::int_type __c = __sbin->sgetc();\r\n      while (!_Traits::eq_int_type(__c, _Traits::eof()))\r\n {\r\n"]
[81.404528, "o", "   __c = __sbout->sputc(_Traits::to_char_type(__c));\r\n   if (_Traits::eq_int_type(__c, _Traits::eof()))\r\n     {\r\n       __ineof = false;\r\n       break;\r\n     }\r\n   ++__ret;\r\n   __c = __sbin->snextc();\r\n }\r\n      return __ret;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    inline streamsize\r\n    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,\r\n        basic_streambuf<_CharT, _Traits>* __sbout)\r\n    {\r\n      bool __ineof;\r\n      return __copy_streambufs_eof(__sbin, __sbout, __ineof);\r\n    }\r\n\r\n\r\n\r\n\r\n  extern template class basic_streambuf<char>;\r\n\r\n  extern template\r\n    streamsize\r\n    __copy_streambufs(basic_streambuf<char>*,\r\n"]
[81.404563, "o", "        basic_streambuf<char>*);\r\n\r\n\r\n  extern template class basic_streambuf<wchar_t>;\r\n\r\n  extern template\r\n    streamsize\r\n    __copy_streambufs(basic_streambuf<wchar_t>*,\r\n        basic_streambuf<wchar_t>*);\r\n\r\n\r\n\r\n\r\n}\r\n# 861 \"/usr/include/c++/14.2.1/streambuf\" 2 3\r\n# 46 \"/usr/include/c++/14.2.1/ios\" 2 3\r\n"]
[81.404666, "o", "# 1 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n"]
[81.40472, "o", "\r\n# 1 \"/usr/include/c++/14.2.1/cwctype\" 1 3\r\n# 39 \"/usr/include/c++/14.2.1/cwctype\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/cwctype\" 3\r\n"]
[81.404799, "o", "# 50 \"/usr/include/c++/14.2.1/cwctype\" 3\r\n# 1 \"/usr/include/wctype.h\" 1 3 4\r\n"]
[81.404903, "o", "# 38 \"/usr/include/wctype.h\" 3 4\r\n# 1 \"/usr/include/bits/wctype-wchar.h\" 1 3 4\r\n# 38 \"/usr/include/bits/wctype-wchar.h\" 3 4\r\n"]
[81.404967, "o", "typedef unsigned long int wctype_t;\r\n# 56 \"/usr/include/bits/wctype-wchar.h\" 3 4\r\nenum\r\n{\r\n  __ISwupper = 0,\r\n  __ISwlower = 1,\r\n  __ISwalpha = 2,\r\n  __ISwdigit = 3,\r\n  __ISwxdigit = 4,\r\n  __ISwspace = 5,\r\n  __ISwprint = 6,\r\n  __ISwgraph = 7,\r\n  __ISwblank = 8,\r\n  __ISwcntrl = 9,\r\n  __ISwpunct = 10,\r\n  __ISwalnum = 11,\r\n\r\n"]
[81.405023, "o", "  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),\r\n  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),\r\n  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),\r\n  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),\r\n"]
[81.405084, "o", "  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),\r\n  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),\r\n  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),\r\n  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),\r\n  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),\r\n"]
[81.405155, "o", "  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),\r\n  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),\r\n  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))\r\n};\r\n\r\n\r\n\r\nextern \"C\" {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int iswalnum (wint_t __wc) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\nextern int iswalpha (wint_t __wc) noexcept (true);\r\n\r\n\r\n"]
[81.405215, "o", "extern int iswcntrl (wint_t __wc) noexcept (true);\r\n\r\n\r\n\r\nextern int iswdigit (wint_t __wc) noexcept (true);\r\n\r\n\r\n\r\nextern int iswgraph (wint_t __wc) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int iswlower (wint_t __wc) noexcept (true);\r\n\r\n\r\nextern int iswprint (wint_t __wc) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int iswpunct (wint_t __wc) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int iswspace (wint_t __wc) noexcept (true);\r\n\r\n\r\n\r\n\r\n"]
[81.405285, "o", "extern int iswupper (wint_t __wc) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int iswxdigit (wint_t __wc) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\nextern int iswblank (wint_t __wc) noexcept (true);\r\n# 155 \"/usr/include/bits/wctype-wchar.h\" 3 4\r\nextern wctype_t wctype (const char *__property) noexcept (true);\r\n\r\n\r\n\r\nextern int iswctype (wint_t __wc, wctype_t __desc) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern wint_t towlower (wint_t __wc) noexcept (true);\r\n\r\n\r\nextern wint_t towupper (wint_t __wc) noexcept (true);\r\n\r\n}\r\n"]
[81.405348, "o", "# 39 \"/usr/include/wctype.h\" 2 3 4\r\n\r\n\r\n\r\n\r\n\r\nextern \"C\" {\r\n\r\n\r\n\r\ntypedef const __int32_t *wctrans_t;\r\n\r\n\r\n\r\nextern wctrans_t wctrans (const char *__property) noexcept (true);\r\n\r\n\r\nextern wint_t towctrans (wint_t __wc, wctrans_t __desc) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern int iswalnum_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\nextern int iswalpha_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n"]
[81.405417, "o", "extern int iswcntrl_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\nextern int iswdigit_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\nextern int iswgraph_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int iswlower_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\nextern int iswprint_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int iswpunct_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\n\r\n"]
[81.405454, "o", "extern int iswspace_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int iswupper_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int iswxdigit_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\n\r\nextern int iswblank_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\nextern wctype_t wctype_l (const char *__property, locale_t __locale)\r\n"]
[81.405486, "o", "     noexcept (true);\r\n\r\n\r\n\r\nextern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)\r\n     noexcept (true);\r\n\r\n\r\n\r\n\r\n\r\n\r\nextern wint_t towlower_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n"]
[81.4056, "o", "extern wint_t towupper_l (wint_t __wc, locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\nextern wctrans_t wctrans_l (const char *__property, locale_t __locale)\r\n     noexcept (true);\r\n\r\n\r\nextern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,\r\n      locale_t __locale) noexcept (true);\r\n\r\n\r\n\r\n}\r\n# 51 \"/usr/include/c++/14.2.1/cwctype\" 2 3\r\n# 80 \"/usr/include/c++/14.2.1/cwctype\" 3\r\nnamespace std\r\n{\r\n  using ::wctrans_t;\r\n  using ::wctype_t;\r\n  using ::wint_t;\r\n\r\n  using ::iswalnum;\r\n  using ::iswalpha;\r\n\r\n  using ::iswblank;\r\n\r\n  using ::iswcntrl;\r\n  using ::iswctype;\r\n  using ::iswdigit;\r\n  using ::iswgraph;\r\n  using ::iswlower;\r\n  using ::iswprint;\r\n  using ::iswpunct;\r\n  using ::iswspace;\r\n  using ::iswupper;\r\n  using ::iswxdigit;\r\n  using ::towctrans;\r\n  using ::towlower;\r\n"]
[81.405656, "o", "  using ::towupper;\r\n  using ::wctrans;\r\n  using ::wctype;\r\n}\r\n# 40 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/cctype\" 1 3\r\n# 39 \"/usr/include/c++/14.2.1/cctype\" 3\r\n       \r\n# 40 \"/usr/include/c++/14.2.1/cctype\" 3\r\n# 41 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 2 3\r\n"]
[81.405714, "o", "# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/ctype_base.h\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/ctype_base.h\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n"]
[81.405784, "o", "  struct ctype_base\r\n  {\r\n\r\n    typedef const int* __to_type;\r\n\r\n\r\n\r\n    typedef unsigned short mask;\r\n    static const mask upper = _ISupper;\r\n    static const mask lower = _ISlower;\r\n    static const mask alpha = _ISalpha;\r\n    static const mask digit = _ISdigit;\r\n    static const mask xdigit = _ISxdigit;\r\n    static const mask space = _ISspace;\r\n    static const mask print = _ISprint;\r\n    static const mask graph = _ISalpha | _ISdigit | _ISpunct;\r\n    static const mask cntrl = _IScntrl;\r\n    static const mask punct = _ISpunct;\r\n    static const mask alnum = _ISalpha | _ISdigit;\r\n\r\n    static const mask blank = _ISblank;\r\n\r\n  };\r\n\r\n\r\n}\r\n"]
[81.405843, "o", "# 42 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 2 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/streambuf_iterator.h\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/streambuf_iterator.h\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/streambuf_iterator.h\" 3\r\n\r\n\r\n\r\n\r\n"]
[81.405909, "o", "\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n# 49 \"/usr/include/c++/14.2.1/bits/streambuf_iterator.h\" 3\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    class istreambuf_iterator\r\n    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,\r\n        _CharT*, _CharT>\r\n    {\r\n"]
[81.405976, "o", "    public:\r\n# 70 \"/usr/include/c++/14.2.1/bits/streambuf_iterator.h\" 3\r\n      typedef _CharT char_type;\r\n      typedef _Traits traits_type;\r\n      typedef typename _Traits::int_type int_type;\r\n      typedef basic_streambuf<_CharT, _Traits> streambuf_type;\r\n      typedef basic_istream<_CharT, _Traits> istream_type;\r\n\r\n\r\n      template<typename _CharT2>\r\n friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\r\n        ostreambuf_iterator<_CharT2> >::__type\r\n copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\r\n      ostreambuf_iterator<_CharT2>);\r\n\r\n      template<bool _IsMove, typename _CharT2>\r\n friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\r\n            _CharT2*>::__type\r\n __copy_move_a2(istreambuf_iterator<_CharT2>,\r\n"]
[81.406042, "o", "         istreambuf_iterator<_CharT2>, _CharT2*);\r\n\r\n      template<typename _CharT2, typename _Size>\r\n friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\r\n            _CharT2*>::__type\r\n __copy_n_a(istreambuf_iterator<_CharT2>, _Size, _CharT2*, bool);\r\n\r\n      template<typename _CharT2>\r\n friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\r\n        istreambuf_iterator<_CharT2> >::__type\r\n find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\r\n      const _CharT2&);\r\n\r\n      template<typename _CharT2, typename _Distance>\r\n friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\r\n            void>::__type\r\n advance(istreambuf_iterator<_CharT2>&, _Distance);\r\n\r\n    private:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      mutable streambuf_type* _M_sbuf;\r\n"]
[81.406076, "o", "      int_type _M_c;\r\n\r\n    public:\r\n\r\n      constexpr istreambuf_iterator() noexcept\r\n      : _M_sbuf(0), _M_c(traits_type::eof()) { }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.406174, "o", "      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;\r\n\r\n      ~istreambuf_iterator() = default;\r\n\r\n\r\n\r\n      istreambuf_iterator(istream_type& __s) noexcept\r\n      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }\r\n\r\n\r\n      istreambuf_iterator(streambuf_type* __s) noexcept\r\n      : _M_sbuf(__s), _M_c(traits_type::eof()) { }\r\n\r\n\r\n"]
[81.406236, "o", "      istreambuf_iterator&\r\n      operator=(const istreambuf_iterator&) noexcept = default;\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      char_type\r\n      operator*() const\r\n      {\r\n int_type __c = _M_get();\r\n# 161 \"/usr/include/c++/14.2.1/bits/streambuf_iterator.h\" 3\r\n return traits_type::to_char_type(__c);\r\n      }\r\n\r\n\r\n      istreambuf_iterator&\r\n      operator++()\r\n      {\r\n\r\n\r\n\r\n                        ;\r\n\r\n _M_sbuf->sbumpc();\r\n _M_c = traits_type::eof();\r\n return *this;\r\n      }\r\n\r\n\r\n      istreambuf_iterator\r\n      operator++(int)\r\n      {\r\n\r\n\r\n\r\n                        ;\r\n\r\n istreambuf_iterator __old = *this;\r\n __old._M_c = _M_sbuf->sbumpc();\r\n _M_c = traits_type::eof();\r\n return __old;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n      [[__nodiscard__]]\r\n      bool\r\n      equal(const istreambuf_iterator& __b) const\r\n"]
[81.406309, "o", "      { return _M_at_eof() == __b._M_at_eof(); }\r\n\r\n    private:\r\n      int_type\r\n      _M_get() const\r\n      {\r\n int_type __ret = _M_c;\r\n if (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))\r\n   _M_sbuf = 0;\r\n return __ret;\r\n      }\r\n\r\n      bool\r\n      _M_at_eof() const\r\n      { return _S_is_eof(_M_get()); }\r\n\r\n      static bool\r\n      _S_is_eof(int_type __c)\r\n      {\r\n const int_type __eof = traits_type::eof();\r\n return traits_type::eq_int_type(__c, __eof);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    };\r\n\r\n"]
[81.40634, "o", "  template<typename _CharT, typename _Traits>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,\r\n        const istreambuf_iterator<_CharT, _Traits>& __b)\r\n    { return __a.equal(__b); }\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    [[__nodiscard__]]\r\n    inline bool\r\n"]
[81.406382, "o", "    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,\r\n        const istreambuf_iterator<_CharT, _Traits>& __b)\r\n    { return !__a.equal(__b); }\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    class ostreambuf_iterator\r\n    : public iterator<output_iterator_tag, void, void, void, void>\r\n    {\r\n    public:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.406493, "o", "      typedef _CharT char_type;\r\n      typedef _Traits traits_type;\r\n      typedef basic_streambuf<_CharT, _Traits> streambuf_type;\r\n      typedef basic_ostream<_CharT, _Traits> ostream_type;\r\n\r\n\r\n      template<typename _CharT2>\r\n friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\r\n        ostreambuf_iterator<_CharT2> >::__type\r\n copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\r\n      ostreambuf_iterator<_CharT2>);\r\n\r\n    private:\r\n      streambuf_type* _M_sbuf;\r\n      bool _M_failed;\r\n\r\n    public:\r\n# 284 \"/usr/include/c++/14.2.1/bits/streambuf_iterator.h\" 3\r\n      ostreambuf_iterator(ostream_type& __s) noexcept\r\n      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }\r\n\r\n\r\n      ostreambuf_iterator(streambuf_type* __s) noexcept\r\n      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }\r\n\r\n\r\n      ostreambuf_iterator&\r\n      operator=(_CharT __c)\r\n      {\r\n if (!_M_failed &&\r\n     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))\r\n   _M_failed = true;\r\n return *this;\r\n      }\r\n\r\n\r\n      [[__nodiscard__]]\r\n      ostreambuf_iterator&\r\n"]
[81.406531, "o", "      operator*()\r\n      { return *this; }\r\n\r\n\r\n      ostreambuf_iterator&\r\n      operator++(int)\r\n      { return *this; }\r\n\r\n\r\n      ostreambuf_iterator&\r\n      operator++()\r\n      { return *this; }\r\n\r\n\r\n      [[__nodiscard__]]\r\n      bool\r\n      failed() const noexcept\r\n      { return _M_failed; }\r\n\r\n"]
[81.406565, "o", "      ostreambuf_iterator&\r\n      _M_put(const _CharT* __ws, streamsize __len)\r\n      {\r\n if (__builtin_expect(!_M_failed, true)\r\n     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,\r\n    false))\r\n   _M_failed = true;\r\n return *this;\r\n      }\r\n    };\r\n#pragma GCC diagnostic pop\r\n\r\n\r\n"]
[81.406596, "o", "  template<typename _CharT>\r\n    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\r\n        ostreambuf_iterator<_CharT> >::__type\r\n    copy(istreambuf_iterator<_CharT> __first,\r\n  istreambuf_iterator<_CharT> __last,\r\n  ostreambuf_iterator<_CharT> __result)\r\n    {\r\n      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)\r\n {\r\n"]
[81.406705, "o", "   bool __ineof;\r\n   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);\r\n   if (!__ineof)\r\n     __result._M_failed = true;\r\n }\r\n      return __result;\r\n    }\r\n\r\n  template<bool _IsMove, typename _CharT>\r\n    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\r\n        ostreambuf_iterator<_CharT> >::__type\r\n    __copy_move_a2(_CharT* __first, _CharT* __last,\r\n     ostreambuf_iterator<_CharT> __result)\r\n    {\r\n      const streamsize __num = __last - __first;\r\n      if (__num > 0)\r\n __result._M_put(__first, __num);\r\n      return __result;\r\n    }\r\n\r\n  template<bool _IsMove, typename _CharT>\r\n    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\r\n        ostreambuf_iterator<_CharT> >::__type\r\n    __copy_move_a2(const _CharT* __first, const _CharT* __last,\r\n     ostreambuf_iterator<_CharT> __result)\r\n    {\r\n      const streamsize __num = __last - __first;\r\n      if (__num > 0)\r\n __result._M_put(__first, __num);\r\n      return __result;\r\n    }\r\n\r\n  template<bool _IsMove, typename _CharT>\r\n    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\r\n        _CharT*>::__type\r\n    __copy_move_a2(istreambuf_iterator<_CharT> __first,\r\n"]
[81.406741, "o", "     istreambuf_iterator<_CharT> __last, _CharT* __result)\r\n    {\r\n      typedef istreambuf_iterator<_CharT> __is_iterator_type;\r\n      typedef typename __is_iterator_type::traits_type traits_type;\r\n      typedef typename __is_iterator_type::streambuf_type streambuf_type;\r\n      typedef typename traits_type::int_type int_type;\r\n\r\n      if (__first._M_sbuf && !__last._M_sbuf)\r\n {\r\n   streambuf_type* __sb = __first._M_sbuf;\r\n   int_type __c = __sb->sgetc();\r\n   while (!traits_type::eq_int_type(__c, traits_type::eof()))\r\n     {\r\n"]
[81.406775, "o", "       const streamsize __n = __sb->egptr() - __sb->gptr();\r\n       if (__n > 1)\r\n  {\r\n    traits_type::copy(__result, __sb->gptr(), __n);\r\n    __sb->__safe_gbump(__n);\r\n    __result += __n;\r\n    __c = __sb->underflow();\r\n  }\r\n       else\r\n  {\r\n    *__result++ = traits_type::to_char_type(__c);\r\n    __c = __sb->snextc();"]
[81.40689, "o", "\r\n  }\r\n     }\r\n }\r\n      return __result;\r\n    }\r\n\r\n  template<typename _CharT, typename _Size>\r\n    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\r\n        _CharT*>::__type\r\n    __copy_n_a(istreambuf_iterator<_CharT> __it, _Size __n, _CharT* __result,\r\n        bool __strict __attribute__((__unused__)))\r\n    {\r\n      if (__n == 0)\r\n return __result;\r\n\r\n     \r\n\r\n                            ;\r\n      _CharT* __beg = __result;\r\n      __result += __it._M_sbuf->sgetn(__beg, __n);\r\n     \r\n\r\n                            ;\r\n      return __result;\r\n    }\r\n\r\n  template<typename _CharT>\r\n    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\r\n          istreambuf_iterator<_CharT> >::__type\r\n    find(istreambuf_iterator<_CharT> __first,\r\n  istreambuf_iterator<_CharT> __last, const _CharT& __val)\r\n    {\r\n      typedef istreambuf_iterator<_CharT> __is_iterator_type;\r\n      typedef typename __is_iterator_type::traits_type traits_type;\r\n      typedef typename __is_iterator_type::streambuf_type streambuf_type;\r\n      typedef typename traits_type::int_type int_type;\r\n"]
[81.406957, "o", "      const int_type __eof = traits_type::eof();\r\n\r\n      if (__first._M_sbuf && !__last._M_sbuf)\r\n {\r\n   const int_type __ival = traits_type::to_int_type(__val);\r\n   streambuf_type* __sb = __first._M_sbuf;\r\n   int_type __c = __sb->sgetc();\r\n   while (!traits_type::eq_int_type(__c, __eof)\r\n   && !traits_type::eq_int_type(__c, __ival))\r\n     {\r\n       streamsize __n = __sb->egptr() - __sb->gptr();\r\n       if (__n > 1)\r\n  {\r\n    const _CharT* __p = traits_type::find(__sb->gptr(),\r\n       __n, __val);\r\n    if (__p)\r\n      __n = __p - __sb->gptr();\r\n    __sb->__safe_gbump(__n);\r\n    __c = __sb->sgetc();\r\n  }\r\n       else\r\n  __c = __sb->snextc();\r\n     }\r\n\r\n   __first._M_c = __eof;\r\n"]
[81.407023, "o", " }\r\n\r\n      return __first;\r\n    }\r\n\r\n  template<typename _CharT, typename _Distance>\r\n    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\r\n        void>::__type\r\n    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)\r\n    {\r\n      if (__n == 0)\r\n return;\r\n\r\n      do { if (std::__is_constant_evaluated()) if (__builtin_expect(!bool(__n > 0), false)) std::__glibcxx_assert_fail(); } while (false);\r\n     \r\n\r\n                           ;\r\n\r\n      typedef istreambuf_iterator<_CharT> __is_iterator_type;\r\n      typedef typename __is_iterator_type::traits_type traits_type;\r\n      typedef typename __is_iterator_type::streambuf_type streambuf_type;\r\n"]
[81.407088, "o", "      typedef typename traits_type::int_type int_type;\r\n      const int_type __eof = traits_type::eof();\r\n\r\n      streambuf_type* __sb = __i._M_sbuf;\r\n      while (__n > 0)\r\n {\r\n   streamsize __size = __sb->egptr() - __sb->gptr();\r\n   if (__size > __n)\r\n     {\r\n       __sb->__safe_gbump(__n);\r\n       break;\r\n     }\r\n\r\n   __sb->__safe_gbump(__size);\r\n   __n -= __size;\r\n   if (traits_type::eq_int_type(__sb->underflow(), __eof))\r\n     {\r\n      \r\n\r\n                      ;\r\n       break;\r\n     }\r\n }\r\n\r\n      __i._M_c = __eof;\r\n    }\r\n\r\n\r\n\r\n"]
[81.407125, "o", "\r\n}\r\n# 49 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 74 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n  template<typename _Tp>\r\n    void\r\n"]
[81.407158, "o", "    __convert_to_v(const char*, _Tp&, ios_base::iostate&,\r\n     const __c_locale&) throw();\r\n\r\n\r\n  template<>\r\n    void\r\n    __convert_to_v(const char*, float&, ios_base::iostate&,\r\n     const __c_locale&) throw();\r\n\r\n  template<>\r\n    void\r\n    __convert_to_v(const char*, double&, ios_base::iostate&,\r\n     const __c_locale&) throw();\r\n\r\n"]
[81.407193, "o", "  template<>\r\n    void\r\n    __convert_to_v(const char*, long double&, ios_base::iostate&,\r\n     const __c_locale&) throw();\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    struct __pad\r\n    {\r\n      static void\r\n      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,\r\n"]
[81.407236, "o", "      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT>\r\n    _CharT*\r\n    __add_grouping(_CharT* __s, _CharT __sep,\r\n     const char* __gbeg, size_t __gsize,\r\n     const _CharT* __first, const _CharT* __last);\r\n\r\n\r\n\r\n\r\n"]
[81.407274, "o", "  template<typename _CharT>\r\n    inline\r\n    ostreambuf_iterator<_CharT>\r\n    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)\r\n    {\r\n      __s._M_put(__ws, __len);\r\n      return __s;\r\n    }\r\n\r\n\r\n  template<typename _CharT, typename _OutIter>\r\n    inline\r\n    _OutIter\r\n    __write(_OutIter __s, const _CharT* __ws, int __len)\r\n    {\r\n"]
[81.40745, "o", "      for (int __j = 0; __j < __len; __j++, ++__s)\r\n *__s = __ws[__j];\r\n      return __s;\r\n    }\r\n# 152 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n  template<typename _CharT>\r\n    class __ctype_abstract_base : public locale::facet, public ctype_base\r\n    {\r\n    public:\r\n\r\n\r\n      typedef _CharT char_type;\r\n# 171 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      bool\r\n      is(mask __m, char_type __c) const\r\n      { return this->do_is(__m, __c); }\r\n# 188 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char_type*\r\n      is(const char_type *__lo, const char_type *__hi, mask *__vec) const\r\n      { return this->do_is(__lo, __hi, __vec); }\r\n# 204 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char_type*\r\n      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const\r\n      { return this->do_scan_is(__m, __lo, __hi); }\r\n# 220 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char_type*\r\n      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\r\n      { return this->do_scan_not(__m, __lo, __hi); }\r\n# 234 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      char_type\r\n      toupper(char_type __c) const\r\n      { return this->do_toupper(__c); }\r\n# 249 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char_type*\r\n      toupper(char_type *__lo, const char_type* __hi) const\r\n      { return this->do_toupper(__lo, __hi); }\r\n# 263 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      char_type\r\n      tolower(char_type __c) const\r\n      { return this->do_tolower(__c); }\r\n# 278 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char_type*\r\n      tolower(char_type* __lo, const char_type* __hi) const\r\n      { return this->do_tolower(__lo, __hi); }\r\n# 295 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      char_type\r\n      widen(char __c) const\r\n      { return this->do_widen(__c); }\r\n# 314 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char*\r\n      widen(const char* __lo, const char* __hi, char_type* __to) const\r\n      { return this->do_widen(__lo, __hi, __to); }\r\n"]
[81.407622, "o", "# 333 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      char\r\n      narrow(char_type __c, char __dfault) const\r\n      { return this->do_narrow(__c, __dfault); }\r\n# 355 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char_type*\r\n      narrow(const char_type* __lo, const char_type* __hi,\r\n       char __dfault, char* __to) const\r\n      { return this->do_narrow(__lo, __hi, __dfault, __to); }\r\n\r\n    protected:\r\n      explicit\r\n      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }\r\n\r\n      virtual\r\n      ~__ctype_abstract_base() { }\r\n# 380 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual bool\r\n      do_is(mask __m, char_type __c) const = 0;\r\n# 399 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_is(const char_type* __lo, const char_type* __hi,\r\n     mask* __vec) const = 0;\r\n# 418 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n"]
[81.407699, "o", "      do_scan_is(mask __m, const char_type* __lo,\r\n   const char_type* __hi) const = 0;\r\n# 437 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_scan_not(mask __m, const char_type* __lo,\r\n    const char_type* __hi) const = 0;\r\n# 455 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char_type\r\n      do_toupper(char_type __c) const = 0;\r\n# 472 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_toupper(char_type* __lo, const char_type* __hi) const = 0;\r\n# 488 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char_type\r\n      do_tolower(char_type __c) const = 0;\r\n# 505 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_tolower(char_type* __lo, const char_type* __hi) const = 0;\r\n# 524 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char_type\r\n      do_widen(char __c) const = 0;\r\n# 545 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char*\r\n      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;\r\n# 566 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char\r\n      do_narrow(char_type __c, char __dfault) const = 0;\r\n# 591 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_narrow(const char_type* __lo, const char_type* __hi,\r\n  char __dfault, char* __to) const = 0;\r\n    };\r\n# 614 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n  template<typename _CharT>\r\n    class ctype : public __ctype_abstract_base<_CharT>\r\n    {\r\n    public:\r\n\r\n      typedef _CharT char_type;\r\n      typedef typename __ctype_abstract_base<_CharT>::mask mask;\r\n\r\n\r\n"]
[81.407761, "o", "      static locale::id id;\r\n\r\n      explicit\r\n      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }\r\n\r\n   protected:\r\n      virtual\r\n      ~ctype();\r\n\r\n      virtual bool\r\n      do_is(mask __m, char_type __c) const;\r\n\r\n      virtual const char_type*\r\n      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;\r\n\r\n      virtual const char_type*\r\n      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;\r\n\r\n      virtual const char_type*\r\n      do_scan_not(mask __m, const char_type* __lo,\r\n    const char_type* __hi) const;\r\n\r\n"]
[81.407789, "o", "      virtual char_type\r\n      do_toupper(char_type __c) const;\r\n\r\n      virtual const char_type*\r\n      do_toupper(char_type* __lo, const char_type* __hi) const;\r\n\r\n      virtual char_type\r\n      do_tolower(char_type __c) const;\r\n\r\n"]
[81.407873, "o", "      virtual const char_type*\r\n      do_tolower(char_type* __lo, const char_type* __hi) const;\r\n\r\n      virtual char_type\r\n      do_widen(char __c) const;\r\n\r\n      virtual const char*\r\n      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;\r\n\r\n      virtual char\r\n      do_narrow(char_type, char __dfault) const;\r\n\r\n      virtual const char_type*\r\n      do_narrow(const char_type* __lo, const char_type* __hi,\r\n  char __dfault, char* __to) const;\r\n    };\r\n\r\n  template<typename _CharT>\r\n    locale::id ctype<_CharT>::id;\r\n\r\n\r\n\r\n"]
[81.407923, "o", "  template<typename _CharT, typename _Traits, typename _Alloc>\r\n    class ctype<basic_string<_CharT, _Traits, _Alloc> >;\r\n# 688 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n  template<>\r\n    class ctype<char> : public locale::facet, public ctype_base\r\n    {\r\n    public:\r\n\r\n\r\n      typedef char char_type;\r\n\r\n    protected:\r\n\r\n      __c_locale _M_c_locale_ctype;\r\n"]
[81.407987, "o", "      bool _M_del;\r\n      __to_type _M_toupper;\r\n      __to_type _M_tolower;\r\n      const mask* _M_table;\r\n      mutable char _M_widen_ok;\r\n      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];\r\n      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];\r\n      mutable char _M_narrow_ok;\r\n\r\n\r\n    public:\r\n\r\n      static locale::id id;\r\n\r\n      static const size_t table_size = 1 + static_cast<unsigned char>(-1);\r\n# 725 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n"]
[81.408014, "o", "      explicit\r\n      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);\r\n# 738 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      explicit\r\n      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,\r\n"]
[81.408038, "o", "     size_t __refs = 0);\r\n# 751 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      inline bool\r\n      is(mask __m, char __c) const;\r\n# 766 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      inline const char*\r\n"]
[81.408063, "o", "      is(const char* __lo, const char* __hi, mask* __vec) const;\r\n# 780 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      inline const char*\r\n      scan_is(mask __m, const char* __lo, const char* __hi) const;\r\n"]
[81.40809, "o", "# 794 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      inline const char*\r\n      scan_not(mask __m, const char* __lo, const char* __hi) const;\r\n# 809 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      char_type\r\n"]
[81.408118, "o", "      toupper(char_type __c) const\r\n      { return this->do_toupper(__c); }\r\n# 826 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char_type*\r\n      toupper(char_type *__lo, const char_type* __hi) const\r\n"]
[81.408145, "o", "      { return this->do_toupper(__lo, __hi); }\r\n# 842 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      char_type\r\n      tolower(char_type __c) const\r\n      { return this->do_tolower(__c); }\r\n# 859 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char_type*\r\n      tolower(char_type* __lo, const char_type* __hi) const\r\n"]
[81.408173, "o", "      { return this->do_tolower(__lo, __hi); }\r\n# 879 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      char_type\r\n      widen(char __c) const\r\n      {\r\n if (_M_widen_ok)\r\n   return _M_widen[static_cast<unsigned char>(__c)];\r\n this->_M_widen_init();\r\n"]
[81.408364, "o", " return this->do_widen(__c);\r\n      }\r\n# 906 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char*\r\n      widen(const char* __lo, const char* __hi, char_type* __to) const\r\n      {\r\n if (_M_widen_ok == 1)\r\n   {\r\n     if (__builtin_expect(__hi != __lo, true))\r\n       __builtin_memcpy(__to, __lo, __hi - __lo);\r\n     return __hi;\r\n   }\r\n if (!_M_widen_ok)\r\n   _M_widen_init();\r\n return this->do_widen(__lo, __hi, __to);\r\n      }\r\n# 938 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      char\r\n      narrow(char_type __c, char __dfault) const\r\n      {\r\n if (_M_narrow[static_cast<unsigned char>(__c)])\r\n   return _M_narrow[static_cast<unsigned char>(__c)];\r\n const char __t = do_narrow(__c, __dfault);\r\n if (__t != __dfault)\r\n   _M_narrow[static_cast<unsigned char>(__c)] = __t;\r\n return __t;\r\n      }\r\n# 971 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      const char_type*\r\n      narrow(const char_type* __lo, const char_type* __hi,\r\n      char __dfault, char* __to) const\r\n      {\r\n if (__builtin_expect(_M_narrow_ok == 1, true))\r\n   {\r\n     if (__builtin_expect(__hi != __lo, true))\r\n       __builtin_memcpy(__to, __lo, __hi - __lo);\r\n     return __hi;\r\n   }\r\n if (!_M_narrow_ok)\r\n   _M_narrow_init();\r\n return this->do_narrow(__lo, __hi, __dfault, __to);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.408421, "o", "      const mask*\r\n      table() const throw()\r\n      { return _M_table; }\r\n\r\n\r\n      static const mask*\r\n      classic_table() throw();\r\n    protected:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      virtual\r\n      ~ctype();\r\n# 1021 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char_type\r\n      do_toupper(char_type __c) const;\r\n"]
[81.408449, "o", "# 1038 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_toupper(char_type* __lo, const char_type* __hi) const;\r\n# 1054 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char_type\r\n      do_tolower(char_type __c) const;\r\n"]
[81.408473, "o", "# 1071 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_tolower(char_type* __lo, const char_type* __hi) const;\r\n# 1091 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char_type\r\n"]
[81.408498, "o", "      do_widen(char __c) const\r\n      { return __c; }\r\n# 1114 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char*\r\n      do_widen(const char* __lo, const char* __hi, char_type* __to) const\r\n      {\r\n"]
[81.408529, "o", " if (__builtin_expect(__hi != __lo, true))\r\n   __builtin_memcpy(__to, __lo, __hi - __lo);\r\n return __hi;\r\n      }\r\n# 1141 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char\r\n      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const\r\n"]
[81.408554, "o", "      { return __c; }\r\n# 1167 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_narrow(const char_type* __lo, const char_type* __hi,\r\n  char __dfault __attribute__((__unused__)), char* __to) const\r\n      {\r\n if (__builtin_expect(__hi != __lo, true))\r\n"]
[81.408712, "o", "   __builtin_memcpy(__to, __lo, __hi - __lo);\r\n return __hi;\r\n      }\r\n\r\n    private:\r\n      void _M_narrow_init() const;\r\n      void _M_widen_init() const;\r\n    };\r\n# 1193 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n  template<>\r\n    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>\r\n    {\r\n    public:\r\n\r\n\r\n      typedef wchar_t char_type;\r\n      typedef wctype_t __wmask_type;\r\n\r\n    protected:\r\n      __c_locale _M_c_locale_ctype;\r\n\r\n\r\n      bool _M_narrow_ok;\r\n      char _M_narrow[128];\r\n      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];\r\n\r\n\r\n      mask _M_bit[16];\r\n      __wmask_type _M_wmask[16];\r\n\r\n    public:\r\n\r\n\r\n      static locale::id id;\r\n# 1226 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      explicit\r\n      ctype(size_t __refs = 0);\r\n# 1237 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      explicit\r\n      ctype(__c_locale __cloc, size_t __refs = 0);\r\n\r\n    protected:\r\n      __wmask_type\r\n      _M_convert_to_wmask(const mask __m) const throw();\r\n\r\n\r\n      virtual\r\n"]
[81.408743, "o", "      ~ctype();\r\n# 1261 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual bool\r\n      do_is(mask __m, char_type __c) const;\r\n# 1280 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n"]
[81.408767, "o", "      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;\r\n# 1298 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;\r\n# 1316 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n"]
[81.40879, "o", "      virtual const char_type*\r\n      do_scan_not(mask __m, const char_type* __lo,\r\n    const char_type* __hi) const;\r\n# 1333 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char_type\r\n"]
[81.408818, "o", "      do_toupper(char_type __c) const;\r\n# 1350 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_toupper(char_type* __lo, const char_type* __hi) const;\r\n# 1366 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n"]
[81.408844, "o", "      virtual char_type\r\n      do_tolower(char_type __c) const;\r\n# 1383 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_tolower(char_type* __lo, const char_type* __hi) const;\r\n# 1403 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n"]
[81.408872, "o", "      virtual char_type\r\n      do_widen(char __c) const;\r\n# 1425 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char*\r\n      do_widen(const char* __lo, const char* __hi, char_type* __to) const;\r\n# 1448 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n"]
[81.408896, "o", "      virtual char\r\n      do_narrow(char_type __c, char __dfault) const;\r\n# 1474 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual const char_type*\r\n      do_narrow(const char_type* __lo, const char_type* __hi,\r\n"]
[81.408928, "o", "  char __dfault, char* __to) const;\r\n\r\n\r\n      void\r\n      _M_initialize_ctype() throw();\r\n    };\r\n\r\n\r\n\r\n  template<typename _CharT>\r\n"]
[81.40911, "o", "    class ctype_byname : public ctype<_CharT>\r\n    {\r\n    public:\r\n      typedef typename ctype<_CharT>::mask mask;\r\n\r\n      explicit\r\n      ctype_byname(const char* __s, size_t __refs = 0);\r\n\r\n\r\n      explicit\r\n      ctype_byname(const string& __s, size_t __refs = 0)\r\n      : ctype_byname(__s.c_str(), __refs) { }\r\n\r\n\r\n    protected:\r\n      virtual\r\n      ~ctype_byname() { }\r\n    };\r\n\r\n\r\n  template<>\r\n    class ctype_byname<char> : public ctype<char>\r\n    {\r\n    public:\r\n      explicit\r\n      ctype_byname(const char* __s, size_t __refs = 0);\r\n\r\n\r\n      explicit\r\n      ctype_byname(const string& __s, size_t __refs = 0);\r\n\r\n\r\n    protected:\r\n      virtual\r\n      ~ctype_byname();\r\n    };\r\n\r\n\r\n  template<>\r\n    class ctype_byname<wchar_t> : public ctype<wchar_t>\r\n    {\r\n    public:\r\n      explicit\r\n      ctype_byname(const char* __s, size_t __refs = 0);\r\n\r\n\r\n      explicit\r\n      ctype_byname(const string& __s, size_t __refs = 0);\r\n\r\n\r\n    protected:\r\n      virtual\r\n      ~ctype_byname();\r\n    };\r\n\r\n"]
[81.409166, "o", "\r\n\r\n}\r\n\r\n\r\n"]
[81.409214, "o", "# 1 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/ctype_inline.h\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/x86_64-pc-linux-gnu/bits/ctype_inline.h\" 3\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  bool\r\n  ctype<char>::\r\n  is(mask __m, char __c) const\r\n  { return _M_table[static_cast<unsigned char>(__c)] & __m; }\r\n\r\n"]
[81.409268, "o", "  const char*\r\n  ctype<char>::\r\n  is(const char* __low, const char* __high, mask* __vec) const\r\n  {\r\n    while (__low < __high)\r\n      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\r\n    return __high;\r\n  }\r\n\r\n  const char*\r\n  ctype<char>::\r\n  scan_is(mask __m, const char* __low, const char* __high) const\r\n  {\r\n"]
[81.409325, "o", "    while (__low < __high\r\n    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\r\n      ++__low;\r\n    return __low;\r\n  }\r\n\r\n  const char*\r\n  ctype<char>::\r\n  scan_not(mask __m, const char* __low, const char* __high) const\r\n  {\r\n    while (__low < __high\r\n    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\r\n      ++__low;\r\n    return __low;\r\n"]
[81.409376, "o", "  }\r\n\r\n\r\n}\r\n# 1547 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n  class __num_base\r\n  {\r\n  public:\r\n\r\n\r\n    enum\r\n      {\r\n _S_ominus,\r\n _S_oplus,\r\n"]
[81.409433, "o", " _S_ox,\r\n _S_oX,\r\n _S_odigits,\r\n _S_odigits_end = _S_odigits + 16,\r\n _S_oudigits = _S_odigits_end,\r\n _S_oudigits_end = _S_oudigits + 16,\r\n _S_oe = _S_odigits + 14,\r\n _S_oE = _S_oudigits + 14,\r\n _S_oend = _S_oudigits_end\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.409492, "o", "\r\n    static const char* _S_atoms_out;\r\n\r\n\r\n\r\n    static const char* _S_atoms_in;\r\n\r\n    enum\r\n    {\r\n      _S_iminus,\r\n      _S_iplus,\r\n      _S_ix,\r\n      _S_iX,\r\n      _S_izero,\r\n      _S_ie = _S_izero + 14,\r\n      _S_iE = _S_izero + 20,\r\n      _S_iend = 26\r\n    };\r\n\r\n\r\n\r\n"]
[81.409548, "o", "    static void\r\n    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();\r\n  };\r\n\r\n  template<typename _CharT>\r\n    struct __numpunct_cache : public locale::facet\r\n    {\r\n      const char* _M_grouping;\r\n      size_t _M_grouping_size;\r\n      bool _M_use_grouping;\r\n      const _CharT* _M_truename;\r\n      size_t _M_truename_size;\r\n      const _CharT* _M_falsename;\r\n"]
[81.409613, "o", "      size_t _M_falsename_size;\r\n      _CharT _M_decimal_point;\r\n      _CharT _M_thousands_sep;\r\n\r\n\r\n\r\n\r\n\r\n      _CharT _M_atoms_out[__num_base::_S_oend];\r\n\r\n\r\n\r\n\r\n\r\n      _CharT _M_atoms_in[__num_base::_S_iend];\r\n\r\n      bool _M_allocated;\r\n\r\n      __numpunct_cache(size_t __refs = 0)\r\n      : facet(__refs), _M_grouping(0), _M_grouping_size(0),\r\n _M_use_grouping(false),\r\n"]
[81.409669, "o", " _M_truename(0), _M_truename_size(0), _M_falsename(0),\r\n _M_falsename_size(0), _M_decimal_point(_CharT()),\r\n _M_thousands_sep(_CharT()), _M_allocated(false)\r\n { }\r\n\r\n      ~__numpunct_cache();\r\n\r\n      void\r\n      _M_cache(const locale& __loc);\r\n\r\n    private:\r\n      __numpunct_cache&\r\n      operator=(const __numpunct_cache&);\r\n\r\n      explicit\r\n      __numpunct_cache(const __numpunct_cache&);\r\n"]
[81.40973, "o", "    };\r\n\r\n  template<typename _CharT>\r\n    __numpunct_cache<_CharT>::~__numpunct_cache()\r\n    {\r\n      if (_M_allocated)\r\n {\r\n   delete [] _M_grouping;\r\n   delete [] _M_truename;\r\n   delete [] _M_falsename;\r\n }\r\n    }\r\n\r\nnamespace __cxx11 {\r\n# 1677 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n  template<typename _CharT>\r\n    class numpunct : public locale::facet\r\n"]
[81.409787, "o", "    {\r\n    public:\r\n\r\n\r\n\r\n      typedef _CharT char_type;\r\n      typedef basic_string<_CharT> string_type;\r\n\r\n      typedef __numpunct_cache<_CharT> __cache_type;\r\n\r\n    protected:\r\n      __cache_type* _M_data;\r\n\r\n    public:\r\n\r\n      static locale::id id;\r\n\r\n\r\n\r\n\r\n\r\n\r\n      explicit\r\n      numpunct(size_t __refs = 0)\r\n      : facet(__refs), _M_data(0)\r\n"]
[81.409846, "o", "      { _M_initialize_numpunct(); }\r\n# 1715 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      explicit\r\n      numpunct(__cache_type* __cache, size_t __refs = 0)\r\n      : facet(__refs), _M_data(__cache)\r\n      { _M_initialize_numpunct(); }\r\n# 1729 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      explicit\r\n      numpunct(__c_locale __cloc, size_t __refs = 0)\r\n      : facet(__refs), _M_data(0)\r\n      { _M_initialize_numpunct(__cloc); }\r\n# 1743 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      char_type\r\n      decimal_point() const\r\n      { return this->do_decimal_point(); }\r\n"]
[81.409896, "o", "# 1756 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      char_type\r\n      thousands_sep() const\r\n      { return this->do_thousands_sep(); }\r\n# 1787 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      string\r\n      grouping() const\r\n      { return this->do_grouping(); }\r\n# 1800 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      string_type\r\n      truename() const\r\n"]
[81.409944, "o", "      { return this->do_truename(); }\r\n# 1813 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      string_type\r\n      falsename() const\r\n      { return this->do_falsename(); }\r\n\r\n    protected:\r\n\r\n      virtual\r\n      ~numpunct();\r\n# 1830 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char_type\r\n      do_decimal_point() const\r\n"]
[81.409998, "o", "      { return _M_data->_M_decimal_point; }\r\n# 1842 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual char_type\r\n      do_thousands_sep() const\r\n      { return _M_data->_M_thousands_sep; }\r\n# 1855 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual string\r\n      do_grouping() const\r\n      { return _M_data->_M_grouping; }\r\n# 1868 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual string_type\r\n      do_truename() const\r\n      { return _M_data->_M_truename; }\r\n"]
[81.410062, "o", "# 1881 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual string_type\r\n      do_falsename() const\r\n      { return _M_data->_M_falsename; }\r\n\r\n\r\n      void\r\n      _M_initialize_numpunct(__c_locale __cloc = 0);\r\n    };\r\n\r\n  template<typename _CharT>\r\n    locale::id numpunct<_CharT>::id;\r\n\r\n  template<>\r\n    numpunct<char>::~numpunct();\r\n\r\n  template<>\r\n    void\r\n"]
[81.410117, "o", "    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);\r\n\r\n\r\n  template<>\r\n    numpunct<wchar_t>::~numpunct();\r\n\r\n  template<>\r\n    void\r\n    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);\r\n\r\n\r\n\r\n  template<typename _CharT>\r\n    class numpunct_byname : public numpunct<_CharT>\r\n    {\r\n    public:\r\n      typedef _CharT char_type;\r\n"]
[81.41017, "o", "      typedef basic_string<_CharT> string_type;\r\n\r\n      explicit\r\n      numpunct_byname(const char* __s, size_t __refs = 0)\r\n      : numpunct<_CharT>(__refs)\r\n      {\r\n if (__builtin_strcmp(__s, \"C\") != 0\r\n     && __builtin_strcmp(__s, \"POSIX\") != 0)\r\n   {\r\n     __c_locale __tmp;\r\n     this->_S_create_c_locale(__tmp, __s);\r\n     this->_M_initialize_numpunct(__tmp);\r\n     this->_S_destroy_c_locale(__tmp);\r\n   }\r\n"]
[81.410224, "o", "      }\r\n\r\n\r\n      explicit\r\n      numpunct_byname(const string& __s, size_t __refs = 0)\r\n      : numpunct_byname(__s.c_str(), __refs) { }\r\n\r\n\r\n    protected:\r\n      virtual\r\n      ~numpunct_byname() { }\r\n    };\r\n\r\n}\r\n\r\n\r\n# 1959 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n  template<typename _CharT, typename _InIter>\r\n"]
[81.410282, "o", "    class num_get : public locale::facet\r\n    {\r\n    public:\r\n\r\n\r\n\r\n      typedef _CharT char_type;\r\n      typedef _InIter iter_type;\r\n\r\n\r\n\r\n      static locale::id id;\r\n# 1980 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      explicit\r\n      num_get(size_t __refs = 0) : facet(__refs) { }\r\n# 2006 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      iter_type\r\n      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, bool& __v) const\r\n"]
[81.410339, "o", "      { return this->do_get(__in, __end, __io, __err, __v); }\r\n# 2043 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      iter_type\r\n      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, long& __v) const\r\n      { return this->do_get(__in, __end, __io, __err, __v); }\r\n\r\n      iter_type\r\n      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, unsigned short& __v) const\r\n      { return this->do_get(__in, __end, __io, __err, __v); }\r\n\r\n      iter_type\r\n      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, unsigned int& __v) const\r\n      { return this->do_get(__in, __end, __io, __err, __v); }\r\n\r\n      iter_type\r\n"]
[81.410389, "o", "      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, unsigned long& __v) const\r\n      { return this->do_get(__in, __end, __io, __err, __v); }\r\n\r\n\r\n      iter_type\r\n      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, long long& __v) const\r\n      { return this->do_get(__in, __end, __io, __err, __v); }\r\n\r\n      iter_type\r\n      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, unsigned long long& __v) const\r\n      { return this->do_get(__in, __end, __io, __err, __v); }\r\n# 2103 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      iter_type\r\n"]
[81.41044, "o", "      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, float& __v) const\r\n      { return this->do_get(__in, __end, __io, __err, __v); }\r\n\r\n      iter_type\r\n      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, double& __v) const\r\n      { return this->do_get(__in, __end, __io, __err, __v); }\r\n\r\n      iter_type\r\n      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, long double& __v) const\r\n"]
[81.41049, "o", "      { return this->do_get(__in, __end, __io, __err, __v); }\r\n# 2146 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      iter_type\r\n      get(iter_type __in, iter_type __end, ios_base& __io,\r\n   ios_base::iostate& __err, void*& __v) const\r\n      { return this->do_get(__in, __end, __io, __err, __v); }\r\n\r\n    protected:\r\n\r\n      virtual ~num_get() { }\r\n\r\n      __attribute ((__abi_tag__ (\"cxx11\")))\r\n      iter_type\r\n      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,\r\n"]
[81.410555, "o", "         string&) const;\r\n\r\n      template<typename _ValueT>\r\n __attribute ((__abi_tag__ (\"cxx11\")))\r\n iter_type\r\n _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,\r\n         _ValueT&) const;\r\n\r\n      template<typename _CharT2>\r\n      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type\r\n _M_find(const _CharT2*, size_t __len, _CharT2 __c) const\r\n {\r\n   int __ret = -1;\r\n   if (__len <= 10)\r\n     {\r\n       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))\r\n  __ret = __c - _CharT2('0');\r\n     }\r\n"]
[81.410609, "o", "   else\r\n     {\r\n       if (__c >= _CharT2('0') && __c <= _CharT2('9'))\r\n  __ret = __c - _CharT2('0');\r\n       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))\r\n  __ret = 10 + (__c - _CharT2('a'));\r\n       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))\r\n  __ret = 10 + (__c - _CharT2('A'));\r\n     }\r\n   return __ret;\r\n }\r\n\r\n      template<typename _CharT2>\r\n      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,\r\n          int>::__type\r\n"]
[81.41067, "o", " _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const\r\n {\r\n   int __ret = -1;\r\n   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);\r\n   if (__q)\r\n     {\r\n       __ret = __q - __zero;\r\n       if (__ret > 15)\r\n  __ret -= 6;\r\n     }\r\n   return __ret;\r\n }\r\n# 2219 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual iter_type\r\n"]
[81.410722, "o", "      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;\r\n\r\n      virtual iter_type\r\n      do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n      ios_base::iostate& __err, long& __v) const\r\n      { return _M_extract_int(__beg, __end, __io, __err, __v); }\r\n\r\n      virtual iter_type\r\n      do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n      ios_base::iostate& __err, unsigned short& __v) const\r\n      { return _M_extract_int(__beg, __end, __io, __err, __v); }\r\n\r\n      virtual iter_type\r\n"]
[81.410785, "o", "      do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n      ios_base::iostate& __err, unsigned int& __v) const\r\n      { return _M_extract_int(__beg, __end, __io, __err, __v); }\r\n\r\n      virtual iter_type\r\n      do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n      ios_base::iostate& __err, unsigned long& __v) const\r\n      { return _M_extract_int(__beg, __end, __io, __err, __v); }\r\n\r\n\r\n      virtual iter_type\r\n"]
[81.41084, "o", "      do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n      ios_base::iostate& __err, long long& __v) const\r\n      { return _M_extract_int(__beg, __end, __io, __err, __v); }\r\n\r\n      virtual iter_type\r\n      do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n      ios_base::iostate& __err, unsigned long long& __v) const\r\n      { return _M_extract_int(__beg, __end, __io, __err, __v); }\r\n\r\n\r\n      virtual iter_type\r\n      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;\r\n\r\n      virtual iter_type\r\n"]
[81.410922, "o", "      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,\r\n      double&) const;\r\n# 2271 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual iter_type\r\n      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,\r\n      long double&) const;\r\n\r\n\r\n      virtual iter_type\r\n"]
[81.410985, "o", "      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;\r\n# 2299 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n    };\r\n\r\n  template<typename _CharT, typename _InIter>\r\n    locale::id num_get<_CharT, _InIter>::id;\r\n# 2317 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n  template<typename _CharT, typename _OutIter>\r\n    class num_put : public locale::facet\r\n    {\r\n    public:\r\n\r\n\r\n\r\n      typedef _CharT char_type;\r\n      typedef _OutIter iter_type;\r\n\r\n\r\n\r\n      static locale::id id;\r\n# 2338 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      explicit\r\n"]
[81.411042, "o", "      num_put(size_t __refs = 0) : facet(__refs) { }\r\n# 2356 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      iter_type\r\n      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const\r\n      { return this->do_put(__s, __io, __fill, __v); }\r\n# 2398 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      iter_type\r\n      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const\r\n      { return this->do_put(__s, __io, __fill, __v); }\r\n\r\n      iter_type\r\n      put(iter_type __s, ios_base& __io, char_type __fill,\r\n   unsigned long __v) const\r\n"]
[81.411097, "o", "      { return this->do_put(__s, __io, __fill, __v); }\r\n\r\n\r\n      iter_type\r\n      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const\r\n      { return this->do_put(__s, __io, __fill, __v); }\r\n\r\n      iter_type\r\n      put(iter_type __s, ios_base& __io, char_type __fill,\r\n   unsigned long long __v) const\r\n      { return this->do_put(__s, __io, __fill, __v); }\r\n# 2461 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      iter_type\r\n"]
[81.411153, "o", "      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const\r\n      { return this->do_put(__s, __io, __fill, __v); }\r\n\r\n      iter_type\r\n      put(iter_type __s, ios_base& __io, char_type __fill,\r\n   long double __v) const\r\n      { return this->do_put(__s, __io, __fill, __v); }\r\n# 2486 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      iter_type\r\n      put(iter_type __s, ios_base& __io, char_type __fill,\r\n   const void* __v) const\r\n      { return this->do_put(__s, __io, __fill, __v); }\r\n\r\n"]
[81.411207, "o", "    protected:\r\n      template<typename _ValueT>\r\n iter_type\r\n _M_insert_float(iter_type, ios_base& __io, char_type __fill,\r\n   char __mod, _ValueT __v) const;\r\n\r\n      void\r\n      _M_group_float(const char* __grouping, size_t __grouping_size,\r\n       char_type __sep, const char_type* __p, char_type* __new,\r\n       char_type* __cs, int& __len) const;\r\n\r\n      template<typename _ValueT>\r\n iter_type\r\n _M_insert_int(iter_type, ios_base& __io, char_type __fill,\r\n        _ValueT __v) const;\r\n\r\n"]
[81.411262, "o", "      void\r\n      _M_group_int(const char* __grouping, size_t __grouping_size,\r\n     char_type __sep, ios_base& __io, char_type* __new,\r\n     char_type* __cs, int& __len) const;\r\n\r\n      void\r\n      _M_pad(char_type __fill, streamsize __w, ios_base& __io,\r\n      char_type* __new, const char_type* __cs, int& __len) const;\r\n\r\n\r\n      virtual\r\n      ~num_put() { }\r\n# 2534 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n      virtual iter_type\r\n"]
[81.411323, "o", "      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;\r\n\r\n      virtual iter_type\r\n      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const\r\n      { return _M_insert_int(__s, __io, __fill, __v); }\r\n\r\n      virtual iter_type\r\n      do_put(iter_type __s, ios_base& __io, char_type __fill,\r\n      unsigned long __v) const\r\n      { return _M_insert_int(__s, __io, __fill, __v); }\r\n\r\n\r\n      virtual iter_type\r\n      do_put(iter_type __s, ios_base& __io, char_type __fill,\r\n      long long __v) const\r\n      { return _M_insert_int(__s, __io, __fill, __v); }\r\n\r\n      virtual iter_type\r\n      do_put(iter_type __s, ios_base& __io, char_type __fill,\r\n      unsigned long long __v) const\r\n"]
[81.411372, "o", "      { return _M_insert_int(__s, __io, __fill, __v); }\r\n\r\n\r\n      virtual iter_type\r\n      do_put(iter_type, ios_base&, char_type, double) const;\r\n\r\n\r\n\r\n\r\n\r\n\r\n      virtual iter_type\r\n      do_put(iter_type, ios_base&, char_type, long double) const;\r\n\r\n\r\n      virtual iter_type\r\n      do_put(iter_type, ios_base&, char_type, const void*) const;\r\n"]
[81.411423, "o", "# 2586 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 3\r\n    };\r\n\r\n  template <typename _CharT, typename _OutIter>\r\n    locale::id num_put<_CharT, _OutIter>::id;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  template<typename _CharT>\r\n    inline bool\r\n    isspace(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }\r\n\r\n\r\n"]
[81.411473, "o", "  template<typename _CharT>\r\n    inline bool\r\n    isprint(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }\r\n\r\n\r\n  template<typename _CharT>\r\n    inline bool\r\n    iscntrl(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }\r\n\r\n\r\n  template<typename _CharT>\r\n"]
[81.411526, "o", "    inline bool\r\n    isupper(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }\r\n\r\n\r\n  template<typename _CharT>\r\n    inline bool\r\n    islower(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }\r\n\r\n\r\n  template<typename _CharT>\r\n    inline bool\r\n"]
[81.411582, "o", "    isalpha(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }\r\n\r\n\r\n  template<typename _CharT>\r\n    inline bool\r\n    isdigit(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }\r\n\r\n\r\n  template<typename _CharT>\r\n"]
[81.411633, "o", "    inline bool\r\n    ispunct(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }\r\n\r\n\r\n  template<typename _CharT>\r\n    inline bool\r\n    isxdigit(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }\r\n\r\n\r\n  template<typename _CharT>\r\n    inline bool\r\n    isalnum(_CharT __c, const locale& __loc)\r\n"]
[81.411685, "o", "    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }\r\n\r\n\r\n  template<typename _CharT>\r\n    inline bool\r\n    isgraph(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }\r\n\r\n\r\n\r\n  template<typename _CharT>\r\n    inline bool\r\n"]
[81.411734, "o", "    isblank(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }\r\n\r\n\r\n\r\n  template<typename _CharT>\r\n    inline _CharT\r\n    toupper(_CharT __c, const locale& __loc)\r\n    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }\r\n\r\n\r\n  template<typename _CharT>\r\n    inline _CharT\r\n    tolower(_CharT __c, const locale& __loc)\r\n"]
[81.411785, "o", "    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }\r\n\r\n\r\n}\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 1 3\r\n"]
[81.411837, "o", "# 33 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n\r\n\r\n  template<typename _Facet>\r\n    struct __use_cache\r\n    {\r\n      const _Facet*\r\n"]
[81.411895, "o", "      operator() (const locale& __loc) const;\r\n    };\r\n\r\n\r\n  template<typename _CharT>\r\n    struct __use_cache<__numpunct_cache<_CharT> >\r\n    {\r\n      const __numpunct_cache<_CharT>*\r\n      operator() (const locale& __loc) const\r\n      {\r\n const size_t __i = numpunct<_CharT>::id._M_id();\r\n const locale::facet** __caches = __loc._M_impl->_M_caches;\r\n"]
[81.411961, "o", " if (!__caches[__i])\r\n   {\r\n     __numpunct_cache<_CharT>* __tmp = 0;\r\n     try\r\n       {\r\n  __tmp = new __numpunct_cache<_CharT>;\r\n  __tmp->_M_cache(__loc);\r\n       }\r\n     catch(...)\r\n       {\r\n  delete __tmp;\r\n  throw;\r\n       }\r\n     __loc._M_impl->_M_install_cache(__tmp, __i);\r\n   }\r\n return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);\r\n      }\r\n    };\r\n\r\n"]
[81.412022, "o", "  template<typename _CharT>\r\n    void\r\n    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)\r\n    {\r\n      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\r\n\r\n      char* __grouping = 0;\r\n      _CharT* __truename = 0;\r\n      _CharT* __falsename = 0;\r\n      try\r\n {\r\n   const string& __g = __np.grouping();\r\n   _M_grouping_size = __g.size();\r\n"]
[81.412053, "o", "   __grouping = new char[_M_grouping_size];\r\n   __g.copy(__grouping, _M_grouping_size);\r\n   _M_use_grouping = (_M_grouping_size\r\n        && static_cast<signed char>(__grouping[0]) > 0\r\n        && (__grouping[0]\r\n     != __gnu_cxx::__numeric_traits<char>::__max));\r\n\r\n   const basic_string<_CharT>& __tn = __np.truename();\r\n"]
[81.412138, "o", "   _M_truename_size = __tn.size();\r\n   __truename = new _CharT[_M_truename_size];\r\n   __tn.copy(__truename, _M_truename_size);\r\n\r\n   const basic_string<_CharT>& __fn = __np.falsename();\r\n   _M_falsename_size = __fn.size();\r\n   __falsename = new _CharT[_M_falsename_size];\r\n   __fn.copy(__falsename, _M_falsename_size);\r\n\r\n   _M_decimal_point = __np.decimal_point();\r\n   _M_thousands_sep = __np.thousands_sep();\r\n\r\n   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);\r\n   __ct.widen(__num_base::_S_atoms_out,\r\n       __num_base::_S_atoms_out\r\n       + __num_base::_S_oend, _M_atoms_out);\r\n   __ct.widen(__num_base::_S_atoms_in,\r\n       __num_base::_S_atoms_in\r\n       + __num_base::_S_iend, _M_atoms_in);\r\n\r\n   _M_grouping = __grouping;\r\n   _M_truename = __truename;\r\n   _M_falsename = __falsename;\r\n   _M_allocated = true;\r\n }\r\n      catch(...)\r\n {\r\n   delete [] __grouping;\r\n"]
[81.412168, "o", "   delete [] __truename;\r\n   delete [] __falsename;\r\n   throw;\r\n }\r\n    }\r\n# 139 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 3\r\n  __attribute__ ((__pure__)) bool\r\n  __verify_grouping(const char* __grouping, size_t __grouping_size,\r\n      const string& __grouping_tmp) throw ();\r\n\r\n"]
[81.412247, "o", "\r\n\r\n  template<typename _CharT, typename _InIter>\r\n    __attribute ((__abi_tag__ (\"cxx11\")))\r\n    _InIter\r\n    num_get<_CharT, _InIter>::\r\n    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,\r\n       ios_base::iostate& __err, string& __xtrc) const\r\n    {\r\n      typedef char_traits<_CharT> __traits_type;\r\n      typedef __numpunct_cache<_CharT> __cache_type;\r\n      __use_cache<__cache_type> __uc;\r\n      const locale& __loc = __io._M_getloc();\r\n      const __cache_type* __lc = __uc(__loc);\r\n      const _CharT* __lit = __lc->_M_atoms_in;\r\n"]
[81.412276, "o", "      char_type __c = char_type();\r\n\r\n\r\n      bool __testeof = __beg == __end;\r\n\r\n\r\n      if (!__testeof)\r\n {\r\n   __c = *__beg;\r\n   const bool __plus = __c == __lit[__num_base::_S_iplus];\r\n"]
[81.412303, "o", "   if ((__plus || __c == __lit[__num_base::_S_iminus])\r\n       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\r\n       && !(__c == __lc->_M_decimal_point))\r\n     {\r\n"]
[81.412403, "o", "       __xtrc += __plus ? '+' : '-';\r\n       if (++__beg != __end)\r\n  __c = *__beg;\r\n       else\r\n  __testeof = true;\r\n     }\r\n }\r\n\r\n\r\n      bool __found_mantissa = false;\r\n      int __sep_pos = 0;\r\n      while (!__testeof)\r\n {\r\n   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\r\n       || __c == __lc->_M_decimal_point)\r\n     break;\r\n   else if (__c == __lit[__num_base::_S_izero])\r\n     {\r\n       if (!__found_mantissa)\r\n  {\r\n    __xtrc += '0';\r\n    __found_mantissa = true;\r\n  }\r\n       ++__sep_pos;\r\n\r\n       if (++__beg != __end)\r\n  __c = *__beg;\r\n       else\r\n  __testeof = true;\r\n     }\r\n   else\r\n     break;\r\n"]
[81.412455, "o", " }\r\n\r\n\r\n      bool __found_dec = false;\r\n      bool __found_sci = false;\r\n      string __found_grouping;\r\n      if (__lc->_M_use_grouping)\r\n __found_grouping.reserve(32);\r\n      const char_type* __lit_zero = __lit + __num_base::_S_izero;\r\n\r\n      if (!__lc->_M_allocated)\r\n\r\n while (!__testeof)\r\n   {\r\n"]
[81.412507, "o", "     const int __digit = _M_find(__lit_zero, 10, __c);\r\n     if (__digit != -1)\r\n       {\r\n  __xtrc += '0' + __digit;\r\n  __found_mantissa = true;\r\n       }\r\n     else if (__c == __lc->_M_decimal_point\r\n       && !__found_dec && !__found_sci)\r\n       {\r\n  __xtrc += '.';\r\n  __found_dec = true;\r\n       }\r\n"]
[81.412537, "o", "     else if ((__c == __lit[__num_base::_S_ie]\r\n        || __c == __lit[__num_base::_S_iE])\r\n       && !__found_sci && __found_mantissa)\r\n       {\r\n\r\n  __xtrc += 'e';\r\n  __found_sci = true;\r\n\r\n\r\n  if (++__beg != __end)\r\n"]
[81.41256, "o", "    {\r\n      __c = *__beg;\r\n      const bool __plus = __c == __lit[__num_base::_S_iplus];\r\n      if (__plus || __c == __lit[__num_base::_S_iminus])\r\n        __xtrc += __plus ? '+' : '-';\r\n"]
[81.412585, "o", "      else\r\n        continue;\r\n    }\r\n  else\r\n    {\r\n      __testeof = true;\r\n      break;\r\n    }\r\n"]
[81.412616, "o", "       }\r\n     else\r\n       break;\r\n\r\n     if (++__beg != __end)\r\n       __c = *__beg;\r\n     else\r\n       __testeof = true;\r\n"]
[81.412643, "o", "   }\r\n      else\r\n while (!__testeof)\r\n   {\r\n\r\n\r\n     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\r\n       {\r\n  if (!__found_dec && !__found_sci)\r\n"]
[81.41267, "o", "    {\r\n\r\n\r\n      if (__sep_pos)\r\n        {\r\n   __found_grouping += static_cast<char>(__sep_pos);\r\n   __sep_pos = 0;\r\n        }\r\n"]
[81.412901, "o", "      else\r\n        {\r\n\r\n\r\n   __xtrc.clear();\r\n   break;\r\n        }\r\n    }\r\n  else\r\n    break;\r\n       }\r\n     else if (__c == __lc->_M_decimal_point)\r\n       {\r\n  if (!__found_dec && !__found_sci)\r\n    {\r\n\r\n\r\n\r\n      if (__found_grouping.size())\r\n        __found_grouping += static_cast<char>(__sep_pos);\r\n      __xtrc += '.';\r\n      __found_dec = true;\r\n    }\r\n  else\r\n    break;\r\n       }\r\n     else\r\n       {\r\n  const char_type* __q =\r\n    __traits_type::find(__lit_zero, 10, __c);\r\n  if (__q)\r\n    {\r\n      __xtrc += '0' + (__q - __lit_zero);\r\n      __found_mantissa = true;\r\n      ++__sep_pos;\r\n    }\r\n  else if ((__c == __lit[__num_base::_S_ie]\r\n     || __c == __lit[__num_base::_S_iE])\r\n    && !__found_sci && __found_mantissa)\r\n    {\r\n\r\n      if (__found_grouping.size() && !__found_dec)\r\n        __found_grouping += static_cast<char>(__sep_pos);\r\n      __xtrc += 'e';\r\n      __found_sci = true;\r\n\r\n\r\n      if (++__beg != __end)\r\n        {\r\n   __c = *__beg;\r\n   const bool __plus = __c == __lit[__num_base::_S_iplus];\r\n   if ((__plus || __c == __lit[__num_base::_S_iminus])\r\n       && !(__lc->_M_use_grouping\r\n     && __c == __lc->_M_thousands_sep)\r\n       && !(__c == __lc->_M_decimal_point))\r\n        __xtrc += __plus ? '+' : '-';\r\n   else\r\n     continue;\r\n        }\r\n"]
[81.413002, "o", "      else\r\n        {\r\n   __testeof = true;\r\n   break;\r\n        }\r\n    }\r\n  else\r\n    break;\r\n       }\r\n\r\n     if (++__beg != __end)\r\n       __c = *__beg;\r\n     else\r\n       __testeof = true;\r\n   }\r\n\r\n\r\n\r\n      if (__found_grouping.size())\r\n        {\r\n\r\n   if (!__found_dec && !__found_sci)\r\n     __found_grouping += static_cast<char>(__sep_pos);\r\n\r\n          if (!std::__verify_grouping(__lc->_M_grouping,\r\n          __lc->_M_grouping_size,\r\n          __found_grouping))\r\n     __err = ios_base::failbit;\r\n        }\r\n\r\n      return __beg;\r\n    }\r\n\r\n"]
[81.413055, "o", "  template<typename _CharT, typename _InIter>\r\n    template<typename _ValueT>\r\n      __attribute ((__abi_tag__ (\"cxx11\")))\r\n      _InIter\r\n      num_get<_CharT, _InIter>::\r\n      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,\r\n       ios_base::iostate& __err, _ValueT& __v) const\r\n      {\r\n        typedef char_traits<_CharT> __traits_type;\r\n using __gnu_cxx::__add_unsigned;\r\n typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;\r\n typedef __numpunct_cache<_CharT> __cache_type;\r\n"]
[81.413086, "o", " __use_cache<__cache_type> __uc;\r\n const locale& __loc = __io._M_getloc();\r\n const __cache_type* __lc = __uc(__loc);\r\n const _CharT* __lit = __lc->_M_atoms_in;\r\n char_type __c = char_type();\r\n\r\n\r\n"]
[81.413115, "o", " const ios_base::fmtflags __basefield = __io.flags()\r\n                                        & ios_base::basefield;\r\n const bool __oct = __basefield == ios_base::oct;\r\n int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);\r\n\r\n\r\n"]
[81.41315, "o", " bool __testeof = __beg == __end;\r\n\r\n\r\n bool __negative = false;\r\n if (!__testeof)\r\n   {\r\n     __c = *__beg;\r\n     __negative = __c == __lit[__num_base::_S_iminus];\r\n"]
[81.413178, "o", "     if ((__negative || __c == __lit[__num_base::_S_iplus])\r\n  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\r\n  && !(__c == __lc->_M_decimal_point))\r\n       {\r\n  if (++__beg != __end)\r\n    __c = *__beg;\r\n  else\r\n    __testeof = true;\r\n       }\r\n"]
[81.413206, "o", "   }\r\n\r\n\r\n\r\n bool __found_zero = false;\r\n int __sep_pos = 0;\r\n while (!__testeof)\r\n   {\r\n"]
[81.413474, "o", "     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\r\n  || __c == __lc->_M_decimal_point)\r\n       break;\r\n     else if (__c == __lit[__num_base::_S_izero]\r\n       && (!__found_zero || __base == 10))\r\n       {\r\n  __found_zero = true;\r\n  ++__sep_pos;\r\n  if (__basefield == 0)\r\n    __base = 8;\r\n  if (__base == 8)\r\n    __sep_pos = 0;\r\n       }\r\n     else if (__found_zero\r\n       && (__c == __lit[__num_base::_S_ix]\r\n    || __c == __lit[__num_base::_S_iX]))\r\n       {\r\n  if (__basefield == 0)\r\n    __base = 16;\r\n  if (__base == 16)\r\n    {\r\n      __found_zero = false;\r\n      __sep_pos = 0;\r\n    }\r\n  else\r\n    break;\r\n       }\r\n     else\r\n       break;\r\n\r\n     if (++__beg != __end)\r\n       {\r\n  __c = *__beg;\r\n  if (!__found_zero)\r\n    break;\r\n       }\r\n     else\r\n       __testeof = true;\r\n   }\r\n\r\n\r\n\r\n const size_t __len = (__base == 16 ? __num_base::_S_iend\r\n         - __num_base::_S_izero : __base);\r\n\r\n\r\n typedef __gnu_cxx::__numeric_traits<_ValueT> __num_traits;\r\n string __found_grouping;\r\n if (__lc->_M_use_grouping)\r\n   __found_grouping.reserve(32);\r\n bool __testfail = false;\r\n bool __testoverflow = false;\r\n const __unsigned_type __max =\r\n   (__negative && __num_traits::__is_signed)\r\n   ? -static_cast<__unsigned_type>(__num_traits::__min)\r\n   : __num_traits::__max;\r\n const __unsigned_type __smax = __max / __base;\r\n __unsigned_type __result = 0;\r\n int __digit = 0;\r\n const char_type* __lit_zero = __lit + __num_base::_S_izero;\r\n\r\n if (!__lc->_M_allocated)\r\n\r\n   while (!__testeof)\r\n     {\r\n       __digit = _M_find(__lit_zero, __len, __c);\r\n       if (__digit == -1)\r\n  break;\r\n\r\n       if (__result > __smax)\r\n"]
[81.413533, "o", "  __testoverflow = true;\r\n       else\r\n  {\r\n    __result *= __base;\r\n    __testoverflow |= __result > __max - __digit;\r\n    __result += __digit;\r\n    ++__sep_pos;\r\n  }\r\n\r\n       if (++__beg != __end)\r\n  __c = *__beg;\r\n       else\r\n  __testeof = true;\r\n     }\r\n else\r\n   while (!__testeof)\r\n     {\r\n\r\n\r\n"]
[81.413634, "o", "       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\r\n  {\r\n\r\n\r\n    if (__sep_pos)\r\n      {\r\n        __found_grouping += static_cast<char>(__sep_pos);\r\n        __sep_pos = 0;\r\n      }\r\n    else\r\n      {\r\n        __testfail = true;\r\n        break;\r\n      }\r\n  }\r\n       else if (__c == __lc->_M_decimal_point)\r\n  break;\r\n       else\r\n  {\r\n    const char_type* __q =\r\n      __traits_type::find(__lit_zero, __len, __c);\r\n    if (!__q)\r\n      break;\r\n\r\n    __digit = __q - __lit_zero;\r\n    if (__digit > 15)\r\n      __digit -= 6;\r\n"]
[81.413704, "o", "    if (__result > __smax)\r\n      __testoverflow = true;\r\n    else\r\n      {\r\n        __result *= __base;\r\n        __testoverflow |= __result > __max - __digit;\r\n        __result += __digit;\r\n        ++__sep_pos;\r\n      }\r\n  }\r\n\r\n       if (++__beg != __end)\r\n  __c = *__beg;\r\n       else\r\n  __testeof = true;\r\n     }\r\n\r\n\r\n\r\n if (__found_grouping.size())\r\n   {\r\n\r\n"]
[81.413767, "o", "     __found_grouping += static_cast<char>(__sep_pos);\r\n\r\n     if (!std::__verify_grouping(__lc->_M_grouping,\r\n     __lc->_M_grouping_size,\r\n     __found_grouping))\r\n       __err = ios_base::failbit;\r\n   }\r\n\r\n\r\n\r\n if ((!__sep_pos && !__found_zero && !__found_grouping.size())\r\n     || __testfail)\r\n   {\r\n     __v = 0;\r\n     __err = ios_base::failbit;\r\n   }\r\n"]
[81.413837, "o", " else if (__testoverflow)\r\n   {\r\n     if (__negative && __num_traits::__is_signed)\r\n       __v = __num_traits::__min;\r\n     else\r\n       __v = __num_traits::__max;\r\n     __err = ios_base::failbit;\r\n   }\r\n else\r\n   __v = __negative ? -__result : __result;\r\n\r\n if (__testeof)\r\n   __err |= ios_base::eofbit;\r\n"]
[81.413902, "o", " return __beg;\r\n      }\r\n\r\n\r\n\r\n  template<typename _CharT, typename _InIter>\r\n    _InIter\r\n    num_get<_CharT, _InIter>::\r\n    do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n           ios_base::iostate& __err, bool& __v) const\r\n    {\r\n      if (!(__io.flags() & ios_base::boolalpha))\r\n        {\r\n\r\n\r\n\r\n   long __l = -1;\r\n          __beg = _M_extract_int(__beg, __end, __io, __err, __l);\r\n   if (__l == 0 || __l == 1)\r\n     __v = bool(__l);\r\n"]
[81.413963, "o", "   else\r\n     {\r\n\r\n\r\n       __v = true;\r\n       __err = ios_base::failbit;\r\n       if (__beg == __end)\r\n  __err |= ios_base::eofbit;\r\n     }\r\n        }\r\n      else\r\n        {\r\n\r\n   typedef __numpunct_cache<_CharT> __cache_type;\r\n   __use_cache<__cache_type> __uc;\r\n   const locale& __loc = __io._M_getloc();\r\n   const __cache_type* __lc = __uc(__loc);\r\n"]
[81.414025, "o", "\r\n   bool __testf = true;\r\n   bool __testt = true;\r\n   bool __donef = __lc->_M_falsename_size == 0;\r\n   bool __donet = __lc->_M_truename_size == 0;\r\n   bool __testeof = false;\r\n   size_t __n = 0;\r\n   while (!__donef || !__donet)\r\n     {\r\n       if (__beg == __end)\r\n  {\r\n    __testeof = true;\r\n    break;\r\n"]
[81.414094, "o", "  }\r\n\r\n       const char_type __c = *__beg;\r\n\r\n       if (!__donef)\r\n  __testf = __c == __lc->_M_falsename[__n];\r\n\r\n       if (!__testf && __donet)\r\n  break;\r\n\r\n       if (!__donet)\r\n  __testt = __c == __lc->_M_truename[__n];\r\n\r\n       if (!__testt && __donef)\r\n  break;\r\n\r\n       if (!__testt && !__testf)\r\n  break;\r\n\r\n       ++__n;\r\n       ++__beg;\r\n"]
[81.414157, "o", "\r\n       __donef = !__testf || __n >= __lc->_M_falsename_size;\r\n       __donet = !__testt || __n >= __lc->_M_truename_size;\r\n     }\r\n   if (__testf && __n == __lc->_M_falsename_size && __n)\r\n     {\r\n       __v = false;\r\n       if (__testt && __n == __lc->_M_truename_size)\r\n  __err = ios_base::failbit;\r\n       else\r\n  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;\r\n     }\r\n"]
[81.414237, "o", "   else if (__testt && __n == __lc->_M_truename_size && __n)\r\n     {\r\n       __v = true;\r\n       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;\r\n     }\r\n   else\r\n     {\r\n\r\n\r\n       __v = false;\r\n       __err = ios_base::failbit;\r\n       if (__testeof)\r\n  __err |= ios_base::eofbit;\r\n     }\r\n }\r\n"]
[81.414306, "o", "      return __beg;\r\n    }\r\n\r\n  template<typename _CharT, typename _InIter>\r\n    _InIter\r\n    num_get<_CharT, _InIter>::\r\n    do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n    ios_base::iostate& __err, float& __v) const\r\n    {\r\n      string __xtrc;\r\n      __xtrc.reserve(32);\r\n      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\r\n      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\r\n"]
[81.414375, "o", "      if (__beg == __end)\r\n __err |= ios_base::eofbit;\r\n      return __beg;\r\n    }\r\n\r\n  template<typename _CharT, typename _InIter>\r\n    _InIter\r\n    num_get<_CharT, _InIter>::\r\n    do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n           ios_base::iostate& __err, double& __v) const\r\n    {\r\n      string __xtrc;\r\n      __xtrc.reserve(32);\r\n      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\r\n      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\r\n      if (__beg == __end)\r\n"]
[81.414436, "o", " __err |= ios_base::eofbit;\r\n      return __beg;\r\n    }\r\n# 735 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 3\r\n  template<typename _CharT, typename _InIter>\r\n    _InIter\r\n    num_get<_CharT, _InIter>::\r\n    do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n"]
[81.414498, "o", "           ios_base::iostate& __err, long double& __v) const\r\n    {\r\n      string __xtrc;\r\n      __xtrc.reserve(32);\r\n      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\r\n      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\r\n      if (__beg == __end)\r\n __err |= ios_base::eofbit;\r\n      return __beg;\r\n    }\r\n\r\n  template<typename _CharT, typename _InIter>\r\n    _InIter\r\n    num_get<_CharT, _InIter>::\r\n"]
[81.414561, "o", "    do_get(iter_type __beg, iter_type __end, ios_base& __io,\r\n           ios_base::iostate& __err, void*& __v) const\r\n    {\r\n\r\n      typedef ios_base::fmtflags fmtflags;\r\n      const fmtflags __fmt = __io.flags();\r\n      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);\r\n\r\n      typedef __gnu_cxx::__conditional_type<(sizeof(void*)\r\n          <= sizeof(unsigned long)),\r\n"]
[81.414621, "o", " unsigned long, unsigned long long>::__type _UIntPtrType;\r\n\r\n      _UIntPtrType __ul;\r\n      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);\r\n\r\n\r\n      __io.flags(__fmt);\r\n\r\n      __v = reinterpret_cast<void*>(__ul);\r\n      return __beg;\r\n    }\r\n# 795 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 3\r\n"]
[81.414683, "o", "  template<typename _CharT, typename _OutIter>\r\n    void\r\n    num_put<_CharT, _OutIter>::\r\n    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,\r\n    _CharT* __new, const _CharT* __cs, int& __len) const\r\n    {\r\n\r\n\r\n      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,\r\n        __cs, __w, __len);\r\n      __len = static_cast<int>(__w);\r\n"]
[81.414748, "o", "    }\r\n\r\n\r\n\r\n  template<typename _CharT, typename _ValueT>\r\n    int\r\n    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,\r\n    ios_base::fmtflags __flags, bool __dec)\r\n    {\r\n      _CharT* __buf = __bufend;\r\n      if (__builtin_expect(__dec, true))\r\n {\r\n\r\n   do\r\n     {\r\n       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];\r\n"]
[81.414808, "o", "       __v /= 10;\r\n     }\r\n   while (__v != 0);\r\n }\r\n      else if ((__flags & ios_base::basefield) == ios_base::oct)\r\n {\r\n\r\n   do\r\n     {\r\n       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];\r\n       __v >>= 3;\r\n     }\r\n   while (__v != 0);\r\n }\r\n"]
[81.414876, "o", "      else\r\n {\r\n\r\n   const bool __uppercase = __flags & ios_base::uppercase;\r\n   const int __case_offset = __uppercase ? __num_base::_S_oudigits\r\n                                         : __num_base::_S_odigits;\r\n   do\r\n     {\r\n       *--__buf = __lit[(__v & 0xf) + __case_offset];\r\n       __v >>= 4;\r\n     }\r\n   while (__v != 0);\r\n }\r\n"]
[81.414939, "o", "      return __bufend - __buf;\r\n    }\r\n\r\n\r\n\r\n  template<typename _CharT, typename _OutIter>\r\n    void\r\n    num_put<_CharT, _OutIter>::\r\n    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,\r\n   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const\r\n    {\r\n      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,\r\n     __grouping_size, __cs, __cs + __len);\r\n      __len = __p - __new;\r\n    }\r\n\r\n"]
[81.415007, "o", "  template<typename _CharT, typename _OutIter>\r\n    template<typename _ValueT>\r\n      _OutIter\r\n      num_put<_CharT, _OutIter>::\r\n      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,\r\n      _ValueT __v) const\r\n      {\r\n using __gnu_cxx::__add_unsigned;\r\n typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;\r\n typedef __numpunct_cache<_CharT> __cache_type;\r\n __use_cache<__cache_type> __uc;\r\n const locale& __loc = __io._M_getloc();\r\n const __cache_type* __lc = __uc(__loc);\r\n const _CharT* __lit = __lc->_M_atoms_out;\r\n"]
[81.415067, "o", " const ios_base::fmtflags __flags = __io.flags();\r\n\r\n\r\n const int __ilen = 5 * sizeof(_ValueT);\r\n _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\r\n            * __ilen));\r\n\r\n\r\n\r\n const ios_base::fmtflags __basefield = __flags & ios_base::basefield;\r\n const bool __dec = (__basefield != ios_base::oct\r\n       && __basefield != ios_base::hex);\r\n"]
[81.415134, "o", " const __unsigned_type __u = ((__v > 0 || !__dec)\r\n         ? __unsigned_type(__v)\r\n         : -__unsigned_type(__v));\r\n  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);\r\n __cs += __ilen - __len;\r\n\r\n\r\n if (__lc->_M_use_grouping)\r\n   {\r\n\r\n\r\n     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\r\n          * (__len + 1)\r\n          * 2));\r\n     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,\r\n"]
[81.415195, "o", "    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);\r\n     __cs = __cs2 + 2;\r\n   }\r\n\r\n\r\n if (__builtin_expect(__dec, true))\r\n   {\r\n\r\n     if (__v >= 0)\r\n       {\r\n  if (bool(__flags & ios_base::showpos)\r\n      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)\r\n"]
[81.415262, "o", "    *--__cs = __lit[__num_base::_S_oplus], ++__len;\r\n       }\r\n     else\r\n       *--__cs = __lit[__num_base::_S_ominus], ++__len;\r\n   }\r\n else if (bool(__flags & ios_base::showbase) && __v)\r\n   {\r\n     if (__basefield == ios_base::oct)\r\n       *--__cs = __lit[__num_base::_S_odigits], ++__len;\r\n     else\r\n       {\r\n\r\n  const bool __uppercase = __flags & ios_base::uppercase;\r\n  *--__cs = __lit[__num_base::_S_ox + __uppercase];\r\n\r\n  *--__cs = __lit[__num_base::_S_odigits];\r\n"]
[81.415322, "o", "  __len += 2;\r\n       }\r\n   }\r\n\r\n\r\n const streamsize __w = __io.width();\r\n if (__w > static_cast<streamsize>(__len))\r\n   {\r\n     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\r\n          * __w));\r\n     _M_pad(__fill, __w, __io, __cs3, __cs, __len);\r\n     __cs = __cs3;\r\n   }\r\n"]
[81.415388, "o", " __io.width(0);\r\n\r\n\r\n\r\n return std::__write(__s, __cs, __len);\r\n      }\r\n\r\n  template<typename _CharT, typename _OutIter>\r\n    void\r\n    num_put<_CharT, _OutIter>::\r\n    _M_group_float(const char* __grouping, size_t __grouping_size,\r\n     _CharT __sep, const _CharT* __p, _CharT* __new,\r\n     _CharT* __cs, int& __len) const\r\n    {\r\n\r\n\r\n\r\n"]
[81.415447, "o", "      const int __declen = __p ? __p - __cs : __len;\r\n      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,\r\n      __grouping_size,\r\n      __cs, __cs + __declen);\r\n\r\n\r\n      int __newlen = __p2 - __new;\r\n      if (__p)\r\n {\r\n   char_traits<_CharT>::copy(__p2, __p, __len - __declen);\r\n   __newlen += __len - __declen;\r\n }\r\n      __len = __newlen;\r\n"]
[81.41551, "o", "    }\r\n# 989 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 3\r\n  template<typename _CharT, typename _OutIter>\r\n    template<typename _ValueT>\r\n      _OutIter\r\n      num_put<_CharT, _OutIter>::\r\n      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,\r\n         _ValueT __v) const\r\n      {\r\n typedef __numpunct_cache<_CharT> __cache_type;\r\n __use_cache<__cache_type> __uc;\r\n const locale& __loc = __io._M_getloc();\r\n const __cache_type* __lc = __uc(__loc);\r\n"]
[81.415585, "o", "\r\n\r\n const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();\r\n\r\n const int __max_digits =\r\n   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;\r\n\r\n\r\n int __len;\r\n\r\n char __fbuf[16];\r\n __num_base::_S_format_float(__io, __fbuf, __mod);\r\n\r\n\r\n\r\n const bool __use_prec =\r\n"]
[81.415657, "o", "   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;\r\n\r\n\r\n\r\n int __cs_size = __max_digits * 3;\r\n char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\r\n if (__use_prec)\r\n   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\r\n     __fbuf, __prec, __v);\r\n else\r\n   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\r\n     __fbuf, __v);\r\n\r\n\r\n if (__len >= __cs_size)\r\n   {\r\n     __cs_size = __len + 1;\r\n     __cs = static_cast<char*>(__builtin_alloca(__cs_size));\r\n"]
[81.41572, "o", "     if (__use_prec)\r\n       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\r\n         __fbuf, __prec, __v);\r\n     else\r\n       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\r\n         __fbuf, __v);\r\n   }\r\n# 1062 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 3\r\n"]
[81.415783, "o", " const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\r\n\r\n _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\r\n            * __len));\r\n __ctype.widen(__cs, __cs + __len, __ws);\r\n\r\n\r\n _CharT* __wp = 0;\r\n const char* __p = char_traits<char>::find(__cs, __len, '.');\r\n if (__p)\r\n   {\r\n     __wp = __ws + (__p - __cs);\r\n     *__wp = __lc->_M_decimal_point;\r\n   }\r\n"]
[81.415845, "o", "\r\n\r\n\r\n\r\n if (__lc->_M_use_grouping\r\n     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'\r\n          && __cs[1] >= '0' && __cs[2] >= '0')))\r\n   {\r\n\r\n\r\n     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\r\n          * __len * 2));\r\n\r\n     streamsize __off = 0;\r\n"]
[81.415907, "o", "     if (__cs[0] == '-' || __cs[0] == '+')\r\n       {\r\n  __off = 1;\r\n  __ws2[0] = __ws[0];\r\n  __len -= 1;\r\n       }\r\n\r\n     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,\r\n      __lc->_M_thousands_sep, __wp, __ws2 + __off,\r\n      __ws + __off, __len);\r\n     __len += __off;\r\n\r\n     __ws = __ws2;\r\n   }\r\n\r\n\r\n"]
[81.415975, "o", " const streamsize __w = __io.width();\r\n if (__w > static_cast<streamsize>(__len))\r\n   {\r\n     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\r\n          * __w));\r\n     _M_pad(__fill, __w, __io, __ws3, __ws, __len);\r\n     __ws = __ws3;\r\n   }\r\n __io.width(0);\r\n\r\n\r\n\r\n return std::__write(__s, __ws, __len);\r\n      }\r\n\r\n"]
[81.416037, "o", "  template<typename _CharT, typename _OutIter>\r\n    _OutIter\r\n    num_put<_CharT, _OutIter>::\r\n    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const\r\n    {\r\n      const ios_base::fmtflags __flags = __io.flags();\r\n      if ((__flags & ios_base::boolalpha) == 0)\r\n        {\r\n          const long __l = __v;\r\n          __s = _M_insert_int(__s, __io, __fill, __l);\r\n        }\r\n      else\r\n        {\r\n"]
[81.416097, "o", "   typedef __numpunct_cache<_CharT> __cache_type;\r\n   __use_cache<__cache_type> __uc;\r\n   const locale& __loc = __io._M_getloc();\r\n   const __cache_type* __lc = __uc(__loc);\r\n\r\n   const _CharT* __name = __v ? __lc->_M_truename\r\n                              : __lc->_M_falsename;\r\n   int __len = __v ? __lc->_M_truename_size\r\n                   : __lc->_M_falsename_size;\r\n\r\n   const streamsize __w = __io.width();\r\n   if (__w > static_cast<streamsize>(__len))\r\n     {\r\n"]
[81.416165, "o", "       const streamsize __plen = __w - __len;\r\n       _CharT* __ps\r\n  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\r\n       * __plen));\r\n\r\n       char_traits<_CharT>::assign(__ps, __plen, __fill);\r\n       __io.width(0);\r\n\r\n       if ((__flags & ios_base::adjustfield) == ios_base::left)\r\n  {\r\n    __s = std::__write(__s, __name, __len);\r\n    __s = std::__write(__s, __ps, __plen);\r\n  }\r\n       else\r\n  {\r\n"]
[81.416226, "o", "    __s = std::__write(__s, __ps, __plen);\r\n    __s = std::__write(__s, __name, __len);\r\n  }\r\n       return __s;\r\n     }\r\n   __io.width(0);\r\n   __s = std::__write(__s, __name, __len);\r\n }\r\n      return __s;\r\n    }\r\n\r\n  template<typename _CharT, typename _OutIter>\r\n    _OutIter\r\n    num_put<_CharT, _OutIter>::\r\n"]
[81.416296, "o", "    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const\r\n    { return _M_insert_float(__s, __io, __fill, char(), __v); }\r\n# 1187 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 3\r\n  template<typename _CharT, typename _OutIter>\r\n    _OutIter\r\n    num_put<_CharT, _OutIter>::\r\n    do_put(iter_type __s, ios_base& __io, char_type __fill,\r\n"]
[81.416356, "o", "    long double __v) const\r\n    { return _M_insert_float(__s, __io, __fill, 'L', __v); }\r\n\r\n  template<typename _CharT, typename _OutIter>\r\n    _OutIter\r\n    num_put<_CharT, _OutIter>::\r\n    do_put(iter_type __s, ios_base& __io, char_type __fill,\r\n           const void* __v) const\r\n    {\r\n      const ios_base::fmtflags __flags = __io.flags();\r\n      const ios_base::fmtflags __fmt = ~(ios_base::basefield\r\n      | ios_base::uppercase);\r\n      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));\r\n\r\n"]
[81.416419, "o", "      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)\r\n          <= sizeof(unsigned long)),\r\n unsigned long, unsigned long long>::__type _UIntPtrType;\r\n\r\n      __s = _M_insert_int(__s, __io, __fill,\r\n     reinterpret_cast<_UIntPtrType>(__v));\r\n      __io.flags(__flags);\r\n      return __s;\r\n    }\r\n# 1224 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 3\r\n\r\n"]
[81.416479, "o", "# 1233 \"/usr/include/c++/14.2.1/bits/locale_facets.tcc\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    void\r\n    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,\r\n       _CharT* __news, const _CharT* __olds,\r\n       streamsize __newlen, streamsize __oldlen)\r\n    {\r\n      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);\r\n      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;\r\n\r\n\r\n"]
[81.41654, "o", "      if (__adjust == ios_base::left)\r\n {\r\n   _Traits::copy(__news, __olds, __oldlen);\r\n   _Traits::assign(__news + __oldlen, __plen, __fill);\r\n   return;\r\n }\r\n\r\n      size_t __mod = 0;\r\n      if (__adjust == ios_base::internal)\r\n {\r\n\r\n\r\n\r\n          const locale& __loc = __io._M_getloc();\r\n   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\r\n\r\n"]
[81.416604, "o", "   if (__ctype.widen('-') == __olds[0]\r\n       || __ctype.widen('+') == __olds[0])\r\n     {\r\n       __news[0] = __olds[0];\r\n       __mod = 1;\r\n       ++__news;\r\n     }\r\n   else if (__ctype.widen('0') == __olds[0]\r\n     && __oldlen > 1\r\n     && (__ctype.widen('x') == __olds[1]\r\n         || __ctype.widen('X') == __olds[1]))\r\n     {\r\n"]
[81.416665, "o", "       __news[0] = __olds[0];\r\n       __news[1] = __olds[1];\r\n       __mod = 2;\r\n       __news += 2;\r\n     }\r\n\r\n }\r\n      _Traits::assign(__news, __plen, __fill);\r\n      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);\r\n    }\r\n\r\n  template<typename _CharT>\r\n    _CharT*\r\n    __add_grouping(_CharT* __s, _CharT __sep,\r\n     const char* __gbeg, size_t __gsize,\r\n"]
[81.416725, "o", "     const _CharT* __first, const _CharT* __last)\r\n    {\r\n      size_t __idx = 0;\r\n      size_t __ctr = 0;\r\n\r\n      while (__last - __first > __gbeg[__idx]\r\n      && static_cast<signed char>(__gbeg[__idx]) > 0\r\n      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)\r\n {\r\n   __last -= __gbeg[__idx];\r\n   __idx < __gsize - 1 ? ++__idx : ++__ctr;\r\n"]
[81.41679, "o", " }\r\n\r\n      while (__first != __last)\r\n *__s++ = *__first++;\r\n\r\n      while (__ctr--)\r\n {\r\n   *__s++ = __sep;\r\n   for (char __i = __gbeg[__idx]; __i > 0; --__i)\r\n     *__s++ = *__first++;\r\n }\r\n\r\n      while (__idx--)\r\n {\r\n   *__s++ = __sep;\r\n   for (char __i = __gbeg[__idx]; __i > 0; --__i)\r\n"]
[81.41685, "o", "     *__s++ = *__first++;\r\n }\r\n\r\n      return __s;\r\n    }\r\n\r\n\r\n\r\n\r\n  extern template class __cxx11:: numpunct<char>;\r\n  extern template class __cxx11:: numpunct_byname<char>;\r\n  extern template class num_get<char>;\r\n  extern template class num_put<char>;\r\n"]
[81.416915, "o", "  extern template class ctype_byname<char>;\r\n\r\n  extern template\r\n    const ctype<char>*\r\n    __try_use_facet<ctype<char> >(const locale&) noexcept;\r\n\r\n  extern template\r\n    const numpunct<char>*\r\n    __try_use_facet<numpunct<char> >(const locale&) noexcept;\r\n\r\n  extern template\r\n    const num_put<char>*\r\n    __try_use_facet<num_put<char> >(const locale&) noexcept;\r\n\r\n  extern template\r\n"]
[81.416978, "o", "    const num_get<char>*\r\n    __try_use_facet<num_get<char> >(const locale&) noexcept;\r\n\r\n  extern template\r\n    const ctype<char>&\r\n    use_facet<ctype<char> >(const locale&);\r\n\r\n  extern template\r\n    const numpunct<char>&\r\n    use_facet<numpunct<char> >(const locale&);\r\n\r\n  extern template\r\n    const num_put<char>&\r\n"]
[81.417045, "o", "    use_facet<num_put<char> >(const locale&);\r\n\r\n  extern template\r\n    const num_get<char>&\r\n    use_facet<num_get<char> >(const locale&);\r\n\r\n  extern template\r\n    bool\r\n    has_facet<ctype<char> >(const locale&);\r\n\r\n  extern template\r\n    bool\r\n    has_facet<numpunct<char> >(const locale&);\r\n\r\n  extern template\r\n    bool\r\n    has_facet<num_put<char> >(const locale&);\r\n\r\n  extern template\r\n    bool\r\n"]
[81.417108, "o", "    has_facet<num_get<char> >(const locale&);\r\n\r\n\r\n  extern template class __cxx11:: numpunct<wchar_t>;\r\n  extern template class __cxx11:: numpunct_byname<wchar_t>;\r\n  extern template class num_get<wchar_t>;\r\n  extern template class num_put<wchar_t>;\r\n  extern template class ctype_byname<wchar_t>;\r\n\r\n  extern template\r\n    const ctype<wchar_t>*\r\n"]
[81.41717, "o", "    __try_use_facet<ctype<wchar_t> >(const locale&) noexcept;\r\n\r\n  extern template\r\n    const numpunct<wchar_t>*\r\n    __try_use_facet<numpunct<wchar_t> >(const locale&) noexcept;\r\n\r\n  extern template\r\n    const num_put<wchar_t>*\r\n    __try_use_facet<num_put<wchar_t> >(const locale&) noexcept;\r\n\r\n  extern template\r\n    const num_get<wchar_t>*\r\n    __try_use_facet<num_get<wchar_t> >(const locale&) noexcept;\r\n\r\n"]
[81.41723, "o", "  extern template\r\n    const ctype<wchar_t>&\r\n    use_facet<ctype<wchar_t> >(const locale&);\r\n\r\n  extern template\r\n    const numpunct<wchar_t>&\r\n    use_facet<numpunct<wchar_t> >(const locale&);\r\n\r\n  extern template\r\n    const num_put<wchar_t>&\r\n    use_facet<num_put<wchar_t> >(const locale&);\r\n\r\n  extern template\r\n    const num_get<wchar_t>&\r\n"]
[81.41729, "o", "    use_facet<num_get<wchar_t> >(const locale&);\r\n\r\n  extern template\r\n    bool\r\n    has_facet<ctype<wchar_t> >(const locale&);\r\n\r\n  extern template\r\n    bool\r\n    has_facet<numpunct<wchar_t> >(const locale&);\r\n\r\n  extern template\r\n    bool\r\n    has_facet<num_put<wchar_t> >(const locale&);\r\n\r\n  extern template\r\n    bool\r\n"]
[81.417354, "o", "    has_facet<num_get<wchar_t> >(const locale&);\r\n\r\n\r\n\r\n\r\n}\r\n# 2688 \"/usr/include/c++/14.2.1/bits/locale_facets.h\" 2 3\r\n# 38 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 2 3\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n"]
[81.417422, "o", "  template<typename _Facet>\r\n    inline const _Facet&\r\n    __check_facet(const _Facet* __f)\r\n    {\r\n      if (!__f)\r\n __throw_bad_cast();\r\n      return *__f;\r\n    }\r\n# 66 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    class basic_ios : public ios_base\r\n    {\r\n\r\n\r\n\r\n\r\n"]
[81.417481, "o", "    public:\r\n\r\n\r\n\r\n\r\n\r\n\r\n      typedef _CharT char_type;\r\n      typedef typename _Traits::int_type int_type;\r\n      typedef typename _Traits::pos_type pos_type;\r\n      typedef typename _Traits::off_type off_type;\r\n      typedef _Traits traits_type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.417553, "o", "      typedef ctype<_CharT> __ctype_type;\r\n      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >\r\n           __num_put_type;\r\n      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >\r\n           __num_get_type;\r\n\r\n\r\n\r\n    protected:\r\n      basic_ostream<_CharT, _Traits>* _M_tie;\r\n      mutable char_type _M_fill;\r\n      mutable bool _M_fill_init;\r\n      basic_streambuf<_CharT, _Traits>* _M_streambuf;\r\n\r\n\r\n"]
[81.417635, "o", "      const __ctype_type* _M_ctype;\r\n\r\n      const __num_put_type* _M_num_put;\r\n\r\n      const __num_get_type* _M_num_get;\r\n\r\n    public:\r\n# 121 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      explicit operator bool() const\r\n      { return !this->fail(); }\r\n\r\n\r\n\r\n\r\n\r\n      bool\r\n      operator!() const\r\n      { return this->fail(); }\r\n# 140 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      iostate\r\n"]
[81.417716, "o", "      rdstate() const\r\n      { return _M_streambuf_state; }\r\n# 151 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      void\r\n      clear(iostate __state = goodbit);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      void\r\n      setstate(iostate __state)\r\n      { this->clear(this->rdstate() | __state); }\r\n\r\n\r\n\r\n\r\n      void\r\n      _M_setstate(iostate __state)\r\n      {\r\n\r\n\r\n _M_streambuf_state |= __state;\r\n if (this->exceptions() & __state)\r\n"]
[81.417793, "o", "   throw;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      bool\r\n      good() const\r\n      { return this->rdstate() == 0; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      bool\r\n      eof() const\r\n      { return (this->rdstate() & eofbit) != 0; }\r\n# 204 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      bool\r\n      fail() const\r\n"]
[81.417873, "o", "      { return (this->rdstate() & (badbit | failbit)) != 0; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      bool\r\n      bad() const\r\n      { return (this->rdstate() & badbit) != 0; }\r\n# 225 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      iostate\r\n      exceptions() const\r\n      { return _M_exception; }\r\n# 260 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      void\r\n      exceptions(iostate __except)\r\n      {\r\n        _M_exception = __except;\r\n        this->clear(_M_streambuf_state);\r\n      }\r\n\r\n\r\n\r\n"]
[81.417943, "o", "\r\n\r\n\r\n\r\n      explicit\r\n      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)\r\n      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),\r\n _M_ctype(0), _M_num_put(0), _M_num_get(0)\r\n      { this->init(__sb); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      virtual\r\n      ~basic_ios() { }\r\n# 298 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n"]
[81.41802, "o", "      basic_ostream<_CharT, _Traits>*\r\n      tie() const\r\n      { return _M_tie; }\r\n# 310 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      basic_ostream<_CharT, _Traits>*\r\n      tie(basic_ostream<_CharT, _Traits>* __tiestr)\r\n      {\r\n        basic_ostream<_CharT, _Traits>* __old = _M_tie;\r\n        _M_tie = __tiestr;\r\n        return __old;\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      basic_streambuf<_CharT, _Traits>*\r\n      rdbuf() const\r\n      { return _M_streambuf; }\r\n# 350 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n"]
[81.418092, "o", "      basic_streambuf<_CharT, _Traits>*\r\n      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);\r\n# 364 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      basic_ios&\r\n      copyfmt(const basic_ios& __rhs);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      char_type\r\n      fill() const\r\n      {\r\n if (!_M_fill_init)\r\n   {\r\n     _M_fill = this->widen(' ');\r\n     _M_fill_init = true;\r\n   }\r\n return _M_fill;\r\n"]
[81.41816, "o", "      }\r\n# 393 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      char_type\r\n      fill(char_type __ch)\r\n      {\r\n char_type __old = this->fill();\r\n _M_fill = __ch;\r\n return __old;\r\n      }\r\n# 413 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      locale\r\n      imbue(const locale& __loc);\r\n# 433 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      char\r\n      narrow(char_type __c, char __dfault) const\r\n      { return __check_facet(_M_ctype).narrow(__c, __dfault); }\r\n"]
[81.418229, "o", "# 452 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 3\r\n      char_type\r\n      widen(char __c) const\r\n      { return __check_facet(_M_ctype).widen(__c); }\r\n\r\n    protected:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      basic_ios()\r\n      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),\r\n _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)\r\n      { }\r\n\r\n\r\n\r\n"]
[81.41829, "o", "\r\n\r\n\r\n\r\n      void\r\n      init(basic_streambuf<_CharT, _Traits>* __sb);\r\n\r\n\r\n      basic_ios(const basic_ios&) = delete;\r\n      basic_ios& operator=(const basic_ios&) = delete;\r\n\r\n      void\r\n      move(basic_ios& __rhs)\r\n      {\r\n ios_base::_M_move(__rhs);\r\n _M_cache_locale(_M_ios_locale);\r\n this->tie(__rhs.tie(nullptr));\r\n"]
[81.418366, "o", " _M_fill = __rhs._M_fill;\r\n _M_fill_init = __rhs._M_fill_init;\r\n _M_streambuf = nullptr;\r\n      }\r\n\r\n      void\r\n      move(basic_ios&& __rhs)\r\n      { this->move(__rhs); }\r\n\r\n      void\r\n      swap(basic_ios& __rhs) noexcept\r\n      {\r\n ios_base::_M_swap(__rhs);\r\n _M_cache_locale(_M_ios_locale);\r\n __rhs._M_cache_locale(__rhs._M_ios_locale);\r\n std::swap(_M_tie, __rhs._M_tie);\r\n std::swap(_M_fill, __rhs._M_fill);\r\n std::swap(_M_fill_init, __rhs._M_fill_init);\r\n"]
[81.418433, "o", "      }\r\n\r\n      void\r\n      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)\r\n      { _M_streambuf = __sb; }\r\n\r\n\r\n      void\r\n      _M_cache_locale(const locale& __loc);\r\n    };\r\n\r\n\r\n"]
[81.418501, "o", "}\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/basic_ios.tcc\" 1 3\r\n# 33 \"/usr/include/c++/14.2.1/bits/basic_ios.tcc\" 3\r\n       \r\n# 34 \"/usr/include/c++/14.2.1/bits/basic_ios.tcc\" 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n"]
[81.418571, "o", "\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    void\r\n    basic_ios<_CharT, _Traits>::clear(iostate __state)\r\n    {\r\n      if (this->rdbuf())\r\n _M_streambuf_state = __state;\r\n      else\r\n _M_streambuf_state = __state | badbit;\r\n      if (this->exceptions() & this->rdstate())\r\n __throw_ios_failure((\"basic_ios::clear\"));\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_streambuf<_CharT, _Traits>*\r\n"]
[81.418647, "o", "    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)\r\n    {\r\n      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;\r\n      _M_streambuf = __sb;\r\n      this->clear();\r\n      return __old;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ios<_CharT, _Traits>&\r\n    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)\r\n    {\r\n\r\n\r\n      if (this != std::__addressof(__rhs))\r\n {\r\n\r\n\r\n\r\n\r\n"]
[81.41872, "o", "   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?\r\n                      _M_local_word : new _Words[__rhs._M_word_size];\r\n\r\n\r\n   _Callback_list* __cb = __rhs._M_callbacks;\r\n   if (__cb)\r\n     __cb->_M_add_reference();\r\n   _M_call_callbacks(erase_event);\r\n   if (_M_word != _M_local_word)\r\n     {\r\n       delete [] _M_word;\r\n       _M_word = 0;\r\n     }\r\n   _M_dispose_callbacks();\r\n\r\n\r\n   _M_callbacks = __cb;\r\n   for (int __i = 0; __i < __rhs._M_word_size; ++__i)\r\n"]
[81.418784, "o", "     __words[__i] = __rhs._M_word[__i];\r\n   _M_word = __words;\r\n   _M_word_size = __rhs._M_word_size;\r\n\r\n   this->flags(__rhs.flags());\r\n   this->width(__rhs.width());\r\n   this->precision(__rhs.precision());\r\n   this->tie(__rhs.tie());\r\n   this->fill(__rhs.fill());\r\n   _M_ios_locale = __rhs.getloc();\r\n   _M_cache_locale(_M_ios_locale);\r\n\r\n   _M_call_callbacks(copyfmt_event);\r\n\r\n"]
[81.418845, "o", "\r\n   this->exceptions(__rhs.exceptions());\r\n }\r\n      return *this;\r\n    }\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    locale\r\n    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)\r\n    {\r\n      locale __old(this->getloc());\r\n      ios_base::imbue(__loc);\r\n      _M_cache_locale(__loc);\r\n      if (this->rdbuf() != 0)\r\n this->rdbuf()->pubimbue(__loc);\r\n"]
[81.418916, "o", "      return __old;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    void\r\n    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)\r\n    {\r\n\r\n      ios_base::_M_init();\r\n\r\n\r\n      _M_cache_locale(_M_ios_locale);\r\n# 146 \"/usr/include/c++/14.2.1/bits/basic_ios.tcc\" 3\r\n      _M_fill = _CharT();\r\n      _M_fill_init = false;\r\n\r\n      _M_tie = 0;\r\n      _M_exception = goodbit;\r\n"]
[81.418959, "o", "      _M_streambuf = __sb;\r\n      _M_streambuf_state = __sb ? goodbit : badbit;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    void\r\n    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)\r\n    {\r\n      _M_ctype = std::__try_use_facet<__ctype_type>(__loc);\r\n      _M_num_put = std::__try_use_facet<__num_put_type>(__loc);\r\n"]
[81.418999, "o", "      _M_num_get = std::__try_use_facet<__num_get_type>(__loc);\r\n    }\r\n\r\n\r\n\r\n\r\n  extern template class basic_ios<char>;\r\n\r\n\r\n  extern template class basic_ios<wchar_t>;\r\n\r\n\r\n"]
[81.419041, "o", "\r\n\r\n}\r\n# 521 \"/usr/include/c++/14.2.1/bits/basic_ios.h\" 2 3\r\n# 47 \"/usr/include/c++/14.2.1/ios\" 2 3\r\n"]
[81.419161, "o", "\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.4202, "o", "# 50 \"/usr/include/c++/14.2.1/ios\" 2 3\r\n# 41 \"/usr/include/c++/14.2.1/ostream\" 2 3\r\n"]
[81.420271, "o", "\r\n\r\n\r\n\r\n\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/version.h\" 1 3\r\n# 47 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n       \r\n# 48 \"/usr/include/c++/14.2.1/bits/version.h\" 3\r\n"]
[81.421371, "o", "# 48 \"/usr/include/c++/14.2.1/ostream\" 2 3\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 65 \"/usr/include/c++/14.2.1/ostream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    class basic_ostream : virtual public basic_ios<_CharT, _Traits>\r\n    {\r\n"]
[81.42145, "o", "    public:\r\n\r\n      typedef _CharT char_type;\r\n      typedef typename _Traits::int_type int_type;\r\n      typedef typename _Traits::pos_type pos_type;\r\n      typedef typename _Traits::off_type off_type;\r\n      typedef _Traits traits_type;\r\n\r\n\r\n      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;\r\n      typedef basic_ios<_CharT, _Traits> __ios_type;\r\n      typedef basic_ostream<_CharT, _Traits> __ostream_type;\r\n      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >\r\n             __num_put_type;\r\n      typedef ctype<_CharT> __ctype_type;\r\n# 91 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      explicit\r\n"]
[81.421525, "o", "      basic_ostream(__streambuf_type* __sb)\r\n      { this->init(__sb); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      virtual\r\n      ~basic_ostream() { }\r\n\r\n\r\n      class sentry;\r\n      friend class sentry;\r\n# 115 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      __ostream_type&\r\n      operator<<(__ostream_type& (*__pf)(__ostream_type&))\r\n      {\r\n\r\n\r\n\r\n return __pf(*this);\r\n      }\r\n\r\n      __ostream_type&\r\n"]
[81.421594, "o", "      operator<<(__ios_type& (*__pf)(__ios_type&))\r\n      {\r\n\r\n\r\n\r\n __pf(*this);\r\n return *this;\r\n      }\r\n\r\n      __ostream_type&\r\n      operator<<(ios_base& (*__pf) (ios_base&))\r\n      {\r\n\r\n\r\n\r\n __pf(*this);\r\n return *this;\r\n      }\r\n"]
[81.421665, "o", "# 173 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      __ostream_type&\r\n      operator<<(long __n)\r\n      { return _M_insert(__n); }\r\n\r\n      __ostream_type&\r\n      operator<<(unsigned long __n)\r\n      { return _M_insert(__n); }\r\n\r\n      __ostream_type&\r\n      operator<<(bool __n)\r\n      { return _M_insert(__n); }\r\n\r\n      __ostream_type&\r\n      operator<<(short __n);\r\n\r\n      __ostream_type&\r\n      operator<<(unsigned short __n)\r\n      {\r\n\r\n\r\n"]
[81.421733, "o", " return _M_insert(static_cast<unsigned long>(__n));\r\n      }\r\n\r\n      __ostream_type&\r\n      operator<<(int __n);\r\n\r\n      __ostream_type&\r\n      operator<<(unsigned int __n)\r\n      {\r\n\r\n\r\n return _M_insert(static_cast<unsigned long>(__n));\r\n      }\r\n\r\n\r\n      __ostream_type&\r\n      operator<<(long long __n)\r\n      { return _M_insert(__n); }\r\n\r\n      __ostream_type&\r\n      operator<<(unsigned long long __n)\r\n"]
[81.421795, "o", "      { return _M_insert(__n); }\r\n# 227 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      __ostream_type&\r\n      operator<<(double __f)\r\n      { return _M_insert(__f); }\r\n\r\n      __ostream_type&\r\n      operator<<(float __f)\r\n      {\r\n\r\n\r\n return _M_insert(static_cast<double>(__f));\r\n      }\r\n\r\n      __ostream_type&\r\n      operator<<(long double __f)\r\n"]
[81.421859, "o", "      { return _M_insert(__f); }\r\n# 297 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      __ostream_type&\r\n      operator<<(const void* __p)\r\n"]
[81.421927, "o", "      { return _M_insert(__p); }\r\n\r\n\r\n      __ostream_type&\r\n      operator<<(nullptr_t)\r\n      { return *this << \"nullptr\"; }\r\n# 335 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      __ostream_type&\r\n      operator<<(__streambuf_type* __sb);\r\n# 368 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      __ostream_type&\r\n      put(char_type __c);\r\n# 387 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      __ostream_type&\r\n"]
[81.421997, "o", "      write(const char_type* __s, streamsize __n);\r\n# 400 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      __ostream_type&\r\n      flush();\r\n# 410 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      pos_type\r\n      tellp();\r\n# 421 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      __ostream_type&\r\n      seekp(pos_type);\r\n# 433 \"/usr/include/c++/14.2.1/ostream\" 3\r\n       __ostream_type&\r\n      seekp(off_type, ios_base::seekdir);\r\n\r\n    protected:\r\n      basic_ostream()\r\n      { this->init(0); }\r\n"]
[81.422043, "o", "\r\n\r\n\r\n      basic_ostream(basic_iostream<_CharT, _Traits>&) { }\r\n\r\n      basic_ostream(const basic_ostream&) = delete;\r\n\r\n      basic_ostream(basic_ostream&& __rhs)\r\n      : __ios_type()\r\n      { __ios_type::move(__rhs); }\r\n\r\n\r\n\r\n"]
[81.422081, "o", "      basic_ostream& operator=(const basic_ostream&) = delete;\r\n\r\n      basic_ostream&\r\n      operator=(basic_ostream&& __rhs)\r\n      {\r\n swap(__rhs);\r\n return *this;\r\n      }\r\n\r\n      void\r\n      swap(basic_ostream& __rhs)\r\n"]
[81.42212, "o", "      { __ios_type::swap(__rhs); }\r\n\r\n\r\n      template<typename _ValueT>\r\n __ostream_type&\r\n _M_insert(_ValueT __v);\r\n\r\n    private:\r\n\r\n      void\r\n      _M_write(const char_type* __s, streamsize __n)\r\n"]
[81.422172, "o", "      { std::__ostream_insert(*this, __s, __n); }\r\n\r\n    };\r\n# 485 \"/usr/include/c++/14.2.1/ostream\" 3\r\n  template <typename _CharT, typename _Traits>\r\n    class basic_ostream<_CharT, _Traits>::sentry\r\n    {\r\n\r\n      bool _M_ok;\r\n"]
[81.42221, "o", "      basic_ostream<_CharT, _Traits>& _M_os;\r\n\r\n    public:\r\n# 504 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      explicit\r\n      sentry(basic_ostream<_CharT, _Traits>& __os);\r\n\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\r\n"]
[81.422466, "o", "\r\n\r\n\r\n\r\n\r\n\r\n\r\n      ~sentry()\r\n      {\r\n\r\n if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())\r\n   {\r\n\r\n     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)\r\n       _M_os.setstate(ios_base::badbit);\r\n   }\r\n      }\r\n#pragma GCC diagnostic pop\r\n# 536 \"/usr/include/c++/14.2.1/ostream\" 3\r\n      explicit\r\n\r\n      operator bool() const\r\n      { return _M_ok; }\r\n    };\r\n# 558 \"/usr/include/c++/14.2.1/ostream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    inline basic_ostream<_CharT, _Traits>&\r\n    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)\r\n    {\r\n      if (__out.width() != 0)\r\n return __ostream_insert(__out, &__c, 1);\r\n      __out.put(__c);\r\n      return __out;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    inline basic_ostream<_CharT, _Traits>&\r\n    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)\r\n    { return (__out << __out.widen(__c)); }\r\n\r\n\r\n  template<typename _Traits>\r\n    inline basic_ostream<char, _Traits>&\r\n    operator<<(basic_ostream<char, _Traits>& __out, char __c)\r\n    {\r\n      if (__out.width() != 0)\r\n return __ostream_insert(__out, &__c, 1);\r\n      __out.put(__c);\r\n      return __out;\r\n    }\r\n\r\n\r\n  template<typename _Traits>\r\n"]
[81.422562, "o", "    inline basic_ostream<char, _Traits>&\r\n    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)\r\n    { return (__out << static_cast<char>(__c)); }\r\n\r\n  template<typename _Traits>\r\n    inline basic_ostream<char, _Traits>&\r\n    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)\r\n    { return (__out << static_cast<char>(__c)); }\r\n# 649 \"/usr/include/c++/14.2.1/ostream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    inline basic_ostream<_CharT, _Traits>&\r\n    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)\r\n    {\r\n      if (!__s)\r\n __out.setstate(ios_base::badbit);\r\n      else\r\n __ostream_insert(__out, __s,\r\n    static_cast<streamsize>(_Traits::length(__s)));\r\n      return __out;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n"]
[81.422662, "o", "    basic_ostream<_CharT, _Traits> &\r\n    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);\r\n\r\n\r\n  template<typename _Traits>\r\n    inline basic_ostream<char, _Traits>&\r\n    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)\r\n    {\r\n      if (!__s)\r\n __out.setstate(ios_base::badbit);\r\n      else\r\n __ostream_insert(__out, __s,\r\n    static_cast<streamsize>(_Traits::length(__s)));\r\n      return __out;\r\n    }\r\n\r\n\r\n  template<typename _Traits>\r\n    inline basic_ostream<char, _Traits>&\r\n    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)\r\n    { return (__out << reinterpret_cast<const char*>(__s)); }\r\n\r\n  template<typename _Traits>\r\n    inline basic_ostream<char, _Traits> &\r\n"]
[81.422696, "o", "    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)\r\n"]
[81.422733, "o", "    { return (__out << reinterpret_cast<const char*>(__s)); }\r\n# 739 \"/usr/include/c++/14.2.1/ostream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    inline basic_ostream<_CharT, _Traits>&\r\n    endl(basic_ostream<_CharT, _Traits>& __os)\r\n"]
[81.422769, "o", "    { return flush(__os.put(__os.widen('\\n'))); }\r\n# 751 \"/usr/include/c++/14.2.1/ostream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    inline basic_ostream<_CharT, _Traits>&\r\n    ends(basic_ostream<_CharT, _Traits>& __os)\r\n    { return __os.put(_CharT()); }\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.422805, "o", "\r\n  template<typename _CharT, typename _Traits>\r\n    inline basic_ostream<_CharT, _Traits>&\r\n    flush(basic_ostream<_CharT, _Traits>& __os)\r\n"]
[81.422845, "o", "    { return __os.flush(); }\r\n# 783 \"/usr/include/c++/14.2.1/ostream\" 3\r\n  template<typename _Tp>\r\n    using _Require_derived_from_ios_base\r\n      = _Require<is_class<_Tp>, __not_<is_same<_Tp, ios_base>>,\r\n"]
[81.422885, "o", "   is_convertible<typename add_pointer<_Tp>::type, ios_base*>>;\r\n\r\n  template<typename _Os, typename _Tp,\r\n    typename = _Require_derived_from_ios_base<_Os>,\r\n    typename\r\n      = decltype(std::declval<_Os&>() << std::declval<const _Tp&>())>\r\n    using __rvalue_stream_insertion_t = _Os&&;\r\n# 805 \"/usr/include/c++/14.2.1/ostream\" 3\r\n  template<typename _Ostream, typename _Tp>\r\n"]
[81.422922, "o", "    inline __rvalue_stream_insertion_t<_Ostream, _Tp>\r\n    operator<<(_Ostream&& __os, const _Tp& __x)\r\n    {\r\n      __os << __x;\r\n      return std::move(__os);\r\n"]
[81.423165, "o", "    }\r\n# 1014 \"/usr/include/c++/14.2.1/ostream\" 3\r\n\r\n"]
[81.423202, "o", "}\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/ostream.tcc\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/ostream.tcc\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/ostream.tcc\" 3\r\n\r\n\r\n\r\n"]
[81.423237, "o", "namespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ostream<_CharT, _Traits>::sentry::\r\n    sentry(basic_ostream<_CharT, _Traits>& __os)\r\n    : _M_ok(false), _M_os(__os)\r\n    {\r\n"]
[81.423266, "o", "\r\n      if (__os.tie() && __os.good())\r\n __os.tie()->flush();\r\n\r\n      if (__os.good())\r\n _M_ok = true;\r\n"]
[81.423306, "o", "      else if (__os.bad())\r\n __os.setstate(ios_base::failbit);\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    template<typename _ValueT>\r\n      basic_ostream<_CharT, _Traits>&\r\n      basic_ostream<_CharT, _Traits>::\r\n      _M_insert(_ValueT __v)\r\n"]
[81.423341, "o", "      {\r\n sentry __cerb(*this);\r\n if (__cerb)\r\n   {\r\n     ios_base::iostate __err = ios_base::goodbit;\r\n     try\r\n       {\r\n\r\n"]
[81.423377, "o", "  const __num_put_type& __np = __check_facet(this->_M_num_put);\r\n\r\n\r\n\r\n\r\n  if (__np.put(*this, *this, this->fill(), __v).failed())\r\n    __err |= ios_base::badbit;\r\n       }\r\n"]
[81.423407, "o", "     catch(__cxxabiv1::__forced_unwind&)\r\n       {\r\n  this->_M_setstate(ios_base::badbit);\r\n  throw;\r\n       }\r\n     catch(...)\r\n       { this->_M_setstate(ios_base::badbit); }\r\n     if (__err)\r\n"]
[81.423438, "o", "       this->setstate(__err);\r\n   }\r\n return *this;\r\n      }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ostream<_CharT, _Traits>&\r\n"]
[81.423467, "o", "    basic_ostream<_CharT, _Traits>::\r\n    operator<<(short __n)\r\n    {\r\n\r\n\r\n      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\r\n"]
[81.423503, "o", "      if (__fmt == ios_base::oct || __fmt == ios_base::hex)\r\n return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));\r\n      else\r\n return _M_insert(static_cast<long>(__n));\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n"]
[81.423541, "o", "    basic_ostream<_CharT, _Traits>&\r\n    basic_ostream<_CharT, _Traits>::\r\n    operator<<(int __n)\r\n    {\r\n\r\n\r\n      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\r\n      if (__fmt == ios_base::oct || __fmt == ios_base::hex)\r\n"]
[81.423585, "o", " return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));\r\n      else\r\n return _M_insert(static_cast<long>(__n));\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ostream<_CharT, _Traits>&\r\n    basic_ostream<_CharT, _Traits>::\r\n    operator<<(__streambuf_type* __sbin)\r\n    {\r\n"]
[81.423616, "o", "      ios_base::iostate __err = ios_base::goodbit;\r\n      sentry __cerb(*this);\r\n      if (__cerb && __sbin)\r\n {\r\n   try\r\n     {\r\n       if (!__copy_streambufs(__sbin, this->rdbuf()))\r\n  __err |= ios_base::failbit;\r\n     }\r\n"]
[81.423651, "o", "   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::failbit); }\r\n }\r\n"]
[81.423686, "o", "      else if (!__sbin)\r\n __err |= ios_base::badbit;\r\n      if (__err)\r\n this->setstate(__err);\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ostream<_CharT, _Traits>&\r\n"]
[81.42372, "o", "    basic_ostream<_CharT, _Traits>::\r\n    put(char_type __c)\r\n    {\r\n\r\n\r\n\r\n\r\n\r\n\r\n      sentry __cerb(*this);\r\n      if (__cerb)\r\n {\r\n"]
[81.423755, "o", "   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n     {\r\n       const int_type __put = this->rdbuf()->sputc(__c);\r\n       if (traits_type::eq_int_type(__put, traits_type::eof()))\r\n  __err |= ios_base::badbit;\r\n     }\r\n"]
[81.423794, "o", "   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n"]
[81.423829, "o", "   if (__err)\r\n     this->setstate(__err);\r\n }\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ostream<_CharT, _Traits>&\r\n    basic_ostream<_CharT, _Traits>::\r\n"]
[81.423861, "o", "    write(const _CharT* __s, streamsize __n)\r\n    {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      sentry __cerb(*this);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n"]
[81.423894, "o", "   try\r\n     {\r\n       if (this->rdbuf()->sputn(__s, __n) != __n)\r\n  __err = ios_base::badbit;\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n"]
[81.423928, "o", "       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     this->setstate(ios_base::badbit);\r\n }\r\n"]
[81.423964, "o", "      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ostream<_CharT, _Traits>&\r\n    basic_ostream<_CharT, _Traits>::\r\n    flush()\r\n    {\r\n\r\n\r\n\r\n\r\n\r\n"]
[81.423997, "o", "      if (__streambuf_type* __buf = this->rdbuf())\r\n {\r\n   sentry __cerb(*this);\r\n   if (__cerb)\r\n     {\r\n       ios_base::iostate __err = ios_base::goodbit;\r\n       try\r\n"]
[81.424033, "o", "  {\r\n    if (this->rdbuf()->pubsync() == -1)\r\n      __err |= ios_base::badbit;\r\n  }\r\n       catch(__cxxabiv1::__forced_unwind&)\r\n  {\r\n    this->_M_setstate(ios_base::badbit);\r\n"]
[81.424078, "o", "    throw;\r\n  }\r\n       catch(...)\r\n  { this->_M_setstate(ios_base::badbit); }\r\n       if (__err)\r\n  this->setstate(__err);\r\n     }\r\n }\r\n      return *this;\r\n    }\r\n\r\n"]
[81.424117, "o", "  template<typename _CharT, typename _Traits>\r\n    typename basic_ostream<_CharT, _Traits>::pos_type\r\n    basic_ostream<_CharT, _Traits>::\r\n    tellp()\r\n    {\r\n      sentry __cerb(*this);\r\n      pos_type __ret = pos_type(-1);\r\n      if (!this->fail())\r\n __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);\r\n      return __ret;\r\n"]
[81.424151, "o", "    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ostream<_CharT, _Traits>&\r\n    basic_ostream<_CharT, _Traits>::\r\n    seekp(pos_type __pos)\r\n    {\r\n      sentry __cerb(*this);\r\n      if (!this->fail())\r\n {\r\n\r\n"]
[81.424193, "o", "\r\n   const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out);\r\n\r\n\r\n   if (__p == pos_type(off_type(-1)))\r\n     this->setstate(ios_base::failbit);\r\n }\r\n"]
[81.424229, "o", "      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n"]
[81.424265, "o", "    basic_ostream<_CharT, _Traits>&\r\n    basic_ostream<_CharT, _Traits>::\r\n    seekp(off_type __off, ios_base::seekdir __dir)\r\n    {\r\n      sentry __cerb(*this);\r\n      if (!this->fail())\r\n"]
[81.424306, "o", " {\r\n\r\n\r\n   const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,\r\n        ios_base::out);\r\n\r\n\r\n   if (__p == pos_type(off_type(-1)))\r\n     this->setstate(ios_base::failbit);\r\n }\r\n"]
[81.42434, "o", "      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_ostream<_CharT, _Traits>&\r\n    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)\r\n    {\r\n      if (!__s)\r\n __out.setstate(ios_base::badbit);\r\n"]
[81.425275, "o", "      else\r\n {\r\n\r\n\r\n   const size_t __clen = char_traits<char>::length(__s);\r\n   try\r\n     {\r\n       struct __ptr_guard\r\n       {\r\n  _CharT *__p;\r\n  __ptr_guard (_CharT *__ip): __p(__ip) { }\r\n  ~__ptr_guard() { delete[] __p; }\r\n  _CharT* __get() { return __p; }\r\n       } __pg (new _CharT[__clen]);\r\n\r\n       _CharT *__ws = __pg.__get();\r\n       for (size_t __i = 0; __i < __clen; ++__i)\r\n  __ws[__i] = __out.widen(__s[__i]);\r\n       __ostream_insert(__out, __ws, __clen);\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       __out._M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { __out._M_setstate(ios_base::badbit); }\r\n }\r\n      return __out;\r\n    }\r\n\r\n\r\n\r\n\r\n  extern template class basic_ostream<char>;\r\n  extern template ostream& endl(ostream&);\r\n  extern template ostream& ends(ostream&);\r\n  extern template ostream& flush(ostream&);\r\n  extern template ostream& operator<<(ostream&, char);\r\n  extern template ostream& operator<<(ostream&, unsigned char);\r\n  extern template ostream& operator<<(ostream&, signed char);\r\n  extern template ostream& operator<<(ostream&, const char*);\r\n  extern template ostream& operator<<(ostream&, const unsigned char*);\r\n  extern template ostream& operator<<(ostream&, const signed char*);\r\n\r\n  extern template ostream& ostream::_M_insert(long);\r\n  extern template ostream& ostream::_M_insert(unsigned long);\r\n  extern template ostream& ostream::_M_insert(bool);\r\n\r\n  extern template ostream& ostream::_M_insert(long long);\r\n  extern template ostream& ostream::_M_insert(unsigned long long);\r\n\r\n  extern template ostream& ostream::_M_insert(double);\r\n  extern template ostream& ostream::_M_insert(long double);\r\n  extern template ostream& ostream::_M_insert(const void*);\r\n\r\n\r\n  extern template class basic_ostream<wchar_t>;\r\n  extern template wostream& endl(wostream&);\r\n  extern template wostream& ends(wostream&);\r\n  extern template wostream& flush(wostream&);\r\n  extern template wostream& operator<<(wostream&, wchar_t);\r\n  extern template wostream& operator<<(wostream&, char);\r\n  extern template wostream& operator<<(wostream&, const wchar_t*);\r\n  extern template wostream& operator<<(wostream&, const char*);\r\n\r\n  extern template wostream& wostream::_M_insert(long);\r\n  extern template wostream& wostream::_M_insert(unsigned long);\r\n  extern template wostream& wostream::_M_insert(bool);\r\n\r\n  extern template wostream& wostream::_M_insert(long long);\r\n  extern template wostream& wostream::_M_insert(unsigned long long);\r\n\r\n  extern template wostream& wostream::_M_insert(double);\r\n  extern template wostream& wostream::_M_insert(long double);\r\n  extern template wostream& wostream::_M_insert(const void*);\r\n\r\n\r\n\r\n\r\n}\r\n# 1018 \"/usr/include/c++/14.2.1/ostream\" 2 3\r\n# 42 \"/usr/include/c++/14.2.1/iostream\" 2 3\r\n# 1 \"/usr/include/c++/14.2.1/istream\" 1 3\r\n# 36 \"/usr/include/c++/14.2.1/istream\" 3\r\n       \r\n# 37 \"/usr/include/c++/14.2.1/istream\" 3\r\n\r\n\r\n\r\n\r\n\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 59 \"/usr/include/c++/14.2.1/istream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    class basic_istream : virtual public basic_ios<_CharT, _Traits>\r\n    {\r\n    public:\r\n\r\n      typedef _CharT char_type;\r\n      typedef typename _Traits::int_type int_type;\r\n      typedef typename _Traits::pos_type pos_type;\r\n      typedef typename _Traits::off_type off_type;\r\n      typedef _Traits traits_type;\r\n\r\n\r\n      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;\r\n      typedef basic_ios<_CharT, _Traits> __ios_type;\r\n      typedef basic_istream<_CharT, _Traits> __istream_type;\r\n      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >\r\n        __num_get_type;\r\n      typedef ctype<_CharT> __ctype_type;\r\n\r\n    protected:\r\n\r\n\r\n\r\n\r\n\r\n      streamsize _M_gcount;\r\n\r\n    public:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      explicit\r\n      basic_istream(__streambuf_type* __sb)\r\n      : _M_gcount(streamsize(0))\r\n      { this->init(__sb); }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      virtual\r\n      ~basic_istream()\r\n      { _M_gcount = streamsize(0); }\r\n\r\n\r\n      class sentry;\r\n      friend class sentry;\r\n# 121 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      operator>>(__istream_type& (*__pf)(__istream_type&))\r\n      { return __pf(*this); }\r\n\r\n      __istream_type&\r\n      operator>>(__ios_type& (*__pf)(__ios_type&))\r\n      {\r\n __pf(*this);\r\n return *this;\r\n      }\r\n\r\n      __istream_type&\r\n      operator>>(ios_base& (*__pf)(ios_base&))\r\n      {\r\n __pf(*this);\r\n return *this;\r\n      }\r\n# 169 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      operator>>(bool& __n)\r\n      { return _M_extract(__n); }\r\n\r\n      __istream_type&\r\n      operator>>(short& __n);\r\n\r\n      __istream_type&\r\n      operator>>(unsigned short& __n)\r\n      { return _M_extract(__n); }\r\n\r\n      __istream_type&\r\n      operator>>(int& __n);\r\n\r\n      __istream_type&\r\n      operator>>(unsigned int& __n)\r\n      { return _M_extract(__n); }\r\n\r\n      __istream_type&\r\n      operator>>(long& __n)\r\n      { return _M_extract(__n); }\r\n\r\n      __istream_type&\r\n      operator>>(unsigned long& __n)\r\n      { return _M_extract(__n); }\r\n\r\n\r\n      __istream_type&\r\n      operator>>(long long& __n)\r\n      { return _M_extract(__n); }\r\n\r\n      __istream_type&\r\n      operator>>(unsigned long long& __n)\r\n"]
[81.425309, "o", "      { return _M_extract(__n); }\r\n# 215 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      operator>>(float& __f)\r\n      { return _M_extract(__f); }\r\n\r\n      __istream_type&\r\n      operator>>(double& __f)\r\n      { return _M_extract(__f); }\r\n\r\n      __istream_type&\r\n      operator>>(long double& __f)\r\n"]
[81.425398, "o", "      { return _M_extract(__f); }\r\n# 324 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      operator>>(void*& __p)\r\n      { return _M_extract(__p); }\r\n# 348 \"/usr/include/c++/14.2.1/istream\" 3\r\n"]
[81.425426, "o", "      __istream_type&\r\n      operator>>(__streambuf_type* __sb);\r\n# 358 \"/usr/include/c++/14.2.1/istream\" 3\r\n      streamsize\r\n      gcount() const\r\n"]
[81.425541, "o", "      { return _M_gcount; }\r\n# 391 \"/usr/include/c++/14.2.1/istream\" 3\r\n      int_type\r\n      get();\r\n# 405 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      get(char_type& __c);\r\n# 432 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      get(char_type* __s, streamsize __n, char_type __delim);\r\n# 443 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      get(char_type* __s, streamsize __n)\r\n      { return this->get(__s, __n, this->widen('\\n')); }\r\n# 466 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      get(__streambuf_type& __sb, char_type __delim);\r\n# 476 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      get(__streambuf_type& __sb)\r\n      { return this->get(__sb, this->widen('\\n')); }\r\n# 505 \"/usr/include/c++/14.2.1/istream\" 3\r\n"]
[81.425571, "o", "      __istream_type&\r\n      getline(char_type* __s, streamsize __n, char_type __delim);\r\n# 516 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      getline(char_type* __s, streamsize __n)\r\n      { return this->getline(__s, __n, this->widen('\\n')); }\r\n# 540 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      ignore(streamsize __n, int_type __delim);\r\n\r\n"]
[81.425663, "o", "      __istream_type&\r\n      ignore(streamsize __n);\r\n\r\n      __istream_type&\r\n      ignore();\r\n# 557 \"/usr/include/c++/14.2.1/istream\" 3\r\n      int_type\r\n      peek();\r\n# 575 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      read(char_type* __s, streamsize __n);\r\n# 594 \"/usr/include/c++/14.2.1/istream\" 3\r\n      streamsize\r\n      readsome(char_type* __s, streamsize __n);\r\n# 611 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      putback(char_type __c);\r\n# 627 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      unget();\r\n# 645 \"/usr/include/c++/14.2.1/istream\" 3\r\n"]
[81.425694, "o", "      int\r\n      sync();\r\n# 660 \"/usr/include/c++/14.2.1/istream\" 3\r\n      pos_type\r\n      tellg();\r\n# 675 \"/usr/include/c++/14.2.1/istream\" 3\r\n      __istream_type&\r\n      seekg(pos_type);\r\n# 691 \"/usr/include/c++/14.2.1/istream\" 3\r\n"]
[81.425789, "o", "      __istream_type&\r\n      seekg(off_type, ios_base::seekdir);\r\n\r\n\r\n    protected:\r\n      basic_istream()\r\n      : _M_gcount(streamsize(0))\r\n      { this->init(0); }\r\n\r\n\r\n      basic_istream(const basic_istream&) = delete;\r\n\r\n      basic_istream(basic_istream&& __rhs)\r\n      : __ios_type(), _M_gcount(__rhs._M_gcount)\r\n      {\r\n __ios_type::move(__rhs);\r\n __rhs._M_gcount = 0;\r\n      }\r\n\r\n\r\n\r\n      basic_istream& operator=(const basic_istream&) = delete;\r\n\r\n      basic_istream&\r\n"]
[81.425819, "o", "      operator=(basic_istream&& __rhs)\r\n      {\r\n swap(__rhs);\r\n return *this;\r\n      }\r\n\r\n      void\r\n      swap(basic_istream& __rhs)\r\n      {\r\n __ios_type::swap(__rhs);\r\n std::swap(_M_gcount, __rhs._M_gcount);\r\n      }\r\n\r\n"]
[81.425909, "o", "\r\n      template<typename _ValueT>\r\n __istream_type&\r\n _M_extract(_ValueT& __v);\r\n    };\r\n\r\n\r\n  template<>\r\n    basic_istream<char>&\r\n    basic_istream<char>::\r\n    getline(char_type* __s, streamsize __n, char_type __delim);\r\n\r\n  template<>\r\n    basic_istream<char>&\r\n    basic_istream<char>::\r\n    ignore(streamsize __n);\r\n\r\n  template<>\r\n    basic_istream<char>&\r\n    basic_istream<char>::\r\n    ignore(streamsize __n, int_type __delim);\r\n\r\n\r\n  template<>\r\n"]
[81.425938, "o", "    basic_istream<wchar_t>&\r\n    basic_istream<wchar_t>::\r\n    getline(char_type* __s, streamsize __n, char_type __delim);\r\n\r\n  template<>\r\n    basic_istream<wchar_t>&\r\n    basic_istream<wchar_t>::\r\n    ignore(streamsize __n);\r\n\r\n  template<>\r\n    basic_istream<wchar_t>&\r\n    basic_istream<wchar_t>::\r\n"]
[81.425966, "o", "    ignore(streamsize __n, int_type __delim);\r\n# 775 \"/usr/include/c++/14.2.1/istream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    class basic_istream<_CharT, _Traits>::sentry\r\n    {\r\n\r\n"]
[81.426078, "o", "      bool _M_ok;\r\n\r\n    public:\r\n\r\n      typedef _Traits traits_type;\r\n      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;\r\n      typedef basic_istream<_CharT, _Traits> __istream_type;\r\n      typedef typename __istream_type::__ctype_type __ctype_type;\r\n      typedef typename _Traits::int_type __int_type;\r\n# 811 \"/usr/include/c++/14.2.1/istream\" 3\r\n      explicit\r\n      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);\r\n# 822 \"/usr/include/c++/14.2.1/istream\" 3\r\n      explicit\r\n\r\n      operator bool() const\r\n      { return _M_ok; }\r\n    };\r\n# 840 \"/usr/include/c++/14.2.1/istream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n"]
[81.426108, "o", "    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);\r\n\r\n  template<class _Traits>\r\n    inline basic_istream<char, _Traits>&\r\n    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\r\n    { return (__in >> reinterpret_cast<char&>(__c)); }\r\n\r\n  template<class _Traits>\r\n    inline basic_istream<char, _Traits>&\r\n"]
[81.426198, "o", "    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\r\n    { return (__in >> reinterpret_cast<char&>(__c)); }\r\n\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    void\r\n    __istream_extract(basic_istream<_CharT, _Traits>&, _CharT*, streamsize);\r\n\r\n  void __istream_extract(istream&, char*, streamsize);\r\n# 890 \"/usr/include/c++/14.2.1/istream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    __attribute__((__nonnull__(2), __access__(__write_only__, 2)))\r\n    inline basic_istream<_CharT, _Traits>&\r\n    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\r\n"]
[81.426229, "o", "    {\r\n# 924 \"/usr/include/c++/14.2.1/istream\" 3\r\n {\r\n\r\n   streamsize __n = __gnu_cxx::__numeric_traits<streamsize>::__max;\r\n   __n /= sizeof(_CharT);\r\n"]
[81.426254, "o", "   std::__istream_extract(__in, __s, __n);\r\n }\r\n      return __in;\r\n    }\r\n\r\n  template<class _Traits>\r\n"]
[81.426282, "o", "    __attribute__((__nonnull__(2), __access__(__write_only__, 2)))\r\n    inline basic_istream<char, _Traits>&\r\n    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\r\n    { return __in >> reinterpret_cast<char*>(__s); }\r\n\r\n"]
[81.426414, "o", "  template<class _Traits>\r\n    __attribute__((__nonnull__(2), __access__(__write_only__, 2)))\r\n    inline basic_istream<char, _Traits>&\r\n    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\r\n    { return __in >> reinterpret_cast<char*>(__s); }\r\n# 979 \"/usr/include/c++/14.2.1/istream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    class basic_iostream\r\n    : public basic_istream<_CharT, _Traits>,\r\n      public basic_ostream<_CharT, _Traits>\r\n    {\r\n    public:\r\n\r\n\r\n\r\n      typedef _CharT char_type;\r\n      typedef typename _Traits::int_type int_type;\r\n      typedef typename _Traits::pos_type pos_type;\r\n      typedef typename _Traits::off_type off_type;\r\n      typedef _Traits traits_type;\r\n\r\n\r\n      typedef basic_istream<_CharT, _Traits> __istream_type;\r\n"]
[81.426444, "o", "      typedef basic_ostream<_CharT, _Traits> __ostream_type;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      explicit\r\n      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)\r\n      : __istream_type(__sb), __ostream_type(__sb) { }\r\n\r\n\r\n\r\n\r\n"]
[81.426471, "o", "      virtual\r\n      ~basic_iostream() { }\r\n\r\n    protected:\r\n      basic_iostream()\r\n"]
[81.426582, "o", "      : __istream_type(), __ostream_type() { }\r\n\r\n\r\n      basic_iostream(const basic_iostream&) = delete;\r\n\r\n      basic_iostream(basic_iostream&& __rhs)\r\n      : __istream_type(std::move(__rhs)), __ostream_type(*this)\r\n      { }\r\n\r\n\r\n\r\n      basic_iostream& operator=(const basic_iostream&) = delete;\r\n\r\n      basic_iostream&\r\n      operator=(basic_iostream&& __rhs)\r\n      {\r\n swap(__rhs);\r\n return *this;\r\n      }\r\n\r\n      void\r\n      swap(basic_iostream& __rhs)\r\n      { __istream_type::swap(__rhs); }\r\n\r\n    };\r\n# 1062 \"/usr/include/c++/14.2.1/istream\" 3\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n"]
[81.426612, "o", "    ws(basic_istream<_CharT, _Traits>& __is);\r\n# 1078 \"/usr/include/c++/14.2.1/istream\" 3\r\n  template<typename _Is, typename _Tp,\r\n    typename = _Require_derived_from_ios_base<_Is>,\r\n"]
[81.426639, "o", "    typename = decltype(std::declval<_Is&>() >> std::declval<_Tp>())>\r\n    using __rvalue_stream_extraction_t = _Is&&;\r\n# 1094 \"/usr/include/c++/14.2.1/istream\" 3\r\n  template<typename _Istream, typename _Tp>\r\n    inline __rvalue_stream_extraction_t<_Istream, _Tp>\r\n"]
[81.426666, "o", "    operator>>(_Istream&& __is, _Tp&& __x)\r\n    {\r\n      __is >> std::forward<_Tp>(__x);\r\n      return std::move(__is);\r\n    }\r\n\r\n"]
[81.426806, "o", "\r\n\r\n}\r\n\r\n# 1 \"/usr/include/c++/14.2.1/bits/istream.tcc\" 1 3\r\n# 37 \"/usr/include/c++/14.2.1/bits/istream.tcc\" 3\r\n       \r\n# 38 \"/usr/include/c++/14.2.1/bits/istream.tcc\" 3\r\n\r\n"]
[81.426876, "o", "\r\n\r\nnamespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>::sentry::\r\n"]
[81.426906, "o", "    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)\r\n    {\r\n      ios_base::iostate __err = ios_base::goodbit;\r\n      if (__in.good())\r\n {\r\n   try\r\n     {\r\n       if (__in.tie())\r\n  __in.tie()->flush();\r\n       if (!__noskip && bool(__in.flags() & ios_base::skipws))\r\n  {\r\n    const __int_type __eof = traits_type::eof();\r\n    __streambuf_type* __sb = __in.rdbuf();\r\n"]
[81.426997, "o", "    __int_type __c = __sb->sgetc();\r\n\r\n    const __ctype_type& __ct = __check_facet(__in._M_ctype);\r\n    while (!traits_type::eq_int_type(__c, __eof)\r\n    && __ct.is(ctype_base::space,\r\n        traits_type::to_char_type(__c)))\r\n      __c = __sb->snextc();\r\n\r\n\r\n\r\n\r\n    if (traits_type::eq_int_type(__c, __eof))\r\n      __err |= ios_base::eofbit;\r\n  }\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       __in._M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n"]
[81.427027, "o", "   catch(...)\r\n     { __in._M_setstate(ios_base::badbit); }\r\n }\r\n\r\n      if (__in.good() && __err == ios_base::goodbit)\r\n _M_ok = true;\r\n      else\r\n {\r\n   __err |= ios_base::failbit;\r\n"]
[81.427052, "o", "   __in.setstate(__err);\r\n }\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    template<typename _ValueT>\r\n      basic_istream<_CharT, _Traits>&\r\n"]
[81.427165, "o", "      basic_istream<_CharT, _Traits>::\r\n      _M_extract(_ValueT& __v)\r\n      {\r\n sentry __cerb(*this, false);\r\n if (__cerb)\r\n   {\r\n     ios_base::iostate __err = ios_base::goodbit;\r\n     try\r\n       {\r\n\r\n  const __num_get_type& __ng = __check_facet(this->_M_num_get);\r\n\r\n\r\n\r\n\r\n  __ng.get(*this, 0, *this, __err, __v);\r\n       }\r\n     catch(__cxxabiv1::__forced_unwind&)\r\n       {\r\n  this->_M_setstate(ios_base::badbit);\r\n  throw;\r\n       }\r\n     catch(...)\r\n"]
[81.427195, "o", "       { this->_M_setstate(ios_base::badbit); }\r\n     if (__err)\r\n       this->setstate(__err);\r\n   }\r\n return *this;\r\n      }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n"]
[81.42722, "o", "    operator>>(short& __n)\r\n    {\r\n\r\n\r\n      sentry __cerb(*this, false);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n"]
[81.427333, "o", "   try\r\n     {\r\n       long __l;\r\n\r\n       const __num_get_type& __ng = __check_facet(this->_M_num_get);\r\n\r\n\r\n\r\n\r\n       __ng.get(*this, 0, *this, __err, __l);\r\n\r\n\r\n\r\n       if (__l < __gnu_cxx::__numeric_traits<short>::__min)\r\n  {\r\n    __err |= ios_base::failbit;\r\n    __n = __gnu_cxx::__numeric_traits<short>::__min;\r\n  }\r\n       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)\r\n  {\r\n    __err |= ios_base::failbit;\r\n    __n = __gnu_cxx::__numeric_traits<short>::__max;\r\n  }\r\n       else\r\n  __n = short(__l);\r\n     }\r\n"]
[81.427362, "o", "   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     this->setstate(__err);\r\n"]
[81.42745, "o", " }\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    operator>>(int& __n)\r\n    {\r\n\r\n\r\n      sentry __cerb(*this, false);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n     {\r\n       long __l;\r\n\r\n       const __num_get_type& __ng = __check_facet(this->_M_num_get);\r\n\r\n\r\n\r\n"]
[81.42748, "o", "\r\n       __ng.get(*this, 0, *this, __err, __l);\r\n\r\n\r\n\r\n       if (__l < __gnu_cxx::__numeric_traits<int>::__min)\r\n  {\r\n    __err |= ios_base::failbit;\r\n    __n = __gnu_cxx::__numeric_traits<int>::__min;\r\n  }\r\n"]
[81.427508, "o", "       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)\r\n  {\r\n    __err |= ios_base::failbit;\r\n    __n = __gnu_cxx::__numeric_traits<int>::__max;\r\n  }\r\n       else\r\n  __n = int(__l);\r\n"]
[81.427553, "o", "     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n"]
[81.427591, "o", "       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     this->setstate(__err);\r\n }\r\n      return *this;\r\n    }\r\n"]
[81.427627, "o", "\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    operator>>(__streambuf_type* __sbout)\r\n    {\r\n      ios_base::iostate __err = ios_base::goodbit;\r\n"]
[81.427663, "o", "      sentry __cerb(*this, false);\r\n      if (__cerb && __sbout)\r\n {\r\n   try\r\n     {\r\n       bool __ineof;\r\n       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))\r\n  __err |= ios_base::failbit;\r\n       if (__ineof)\r\n"]
[81.427696, "o", "  __err |= ios_base::eofbit;\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::failbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n"]
[81.427726, "o", "     { this->_M_setstate(ios_base::failbit); }\r\n }\r\n      else if (!__sbout)\r\n __err |= ios_base::failbit;\r\n      if (__err)\r\n this->setstate(__err);\r\n      return *this;\r\n    }\r\n\r\n"]
[81.427753, "o", "  template<typename _CharT, typename _Traits>\r\n    typename basic_istream<_CharT, _Traits>::int_type\r\n    basic_istream<_CharT, _Traits>::\r\n    get(void)\r\n    {\r\n"]
[81.427978, "o", "      const int_type __eof = traits_type::eof();\r\n      int_type __c = __eof;\r\n      _M_gcount = 0;\r\n      ios_base::iostate __err = ios_base::goodbit;\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   try\r\n     {\r\n       __c = this->rdbuf()->sbumpc();\r\n\r\n       if (!traits_type::eq_int_type(__c, __eof))\r\n  _M_gcount = 1;\r\n       else\r\n  __err |= ios_base::eofbit;\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n }\r\n      if (!_M_gcount)\r\n __err |= ios_base::failbit;\r\n      if (__err)\r\n this->setstate(__err);\r\n      return __c;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    get(char_type& __c)\r\n    {\r\n      _M_gcount = 0;\r\n      ios_base::iostate __err = ios_base::goodbit;\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   try\r\n     {\r\n       const int_type __cb = this->rdbuf()->sbumpc();\r\n\r\n       if (!traits_type::eq_int_type(__cb, traits_type::eof()))\r\n  {\r\n    _M_gcount = 1;\r\n    __c = traits_type::to_char_type(__cb);\r\n  }\r\n       else\r\n"]
[81.428011, "o", "  __err |= ios_base::eofbit;\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n"]
[81.42819, "o", "   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n }\r\n      if (!_M_gcount)\r\n __err |= ios_base::failbit;\r\n      if (__err)\r\n this->setstate(__err);\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    get(char_type* __s, streamsize __n, char_type __delim)\r\n    {\r\n      _M_gcount = 0;\r\n      ios_base::iostate __err = ios_base::goodbit;\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   try\r\n     {\r\n       const int_type __idelim = traits_type::to_int_type(__delim);\r\n       const int_type __eof = traits_type::eof();\r\n       __streambuf_type* __sb = this->rdbuf();\r\n       int_type __c = __sb->sgetc();\r\n\r\n       while (_M_gcount + 1 < __n\r\n       && !traits_type::eq_int_type(__c, __eof)\r\n       && !traits_type::eq_int_type(__c, __idelim))\r\n  {\r\n    *__s++ = traits_type::to_char_type(__c);\r\n    ++_M_gcount;\r\n    __c = __sb->snextc();\r\n  }\r\n       if (traits_type::eq_int_type(__c, __eof))\r\n  __err |= ios_base::eofbit;\r\n     }\r\n"]
[81.428221, "o", "   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n }\r\n\r\n\r\n"]
[81.428247, "o", "      if (__n > 0)\r\n *__s = char_type();\r\n      if (!_M_gcount)\r\n __err |= ios_base::failbit;\r\n      if (__err)\r\n"]
[81.428361, "o", " this->setstate(__err);\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    get(__streambuf_type& __sb, char_type __delim)\r\n    {\r\n      _M_gcount = 0;\r\n      ios_base::iostate __err = ios_base::goodbit;\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   try\r\n     {\r\n       const int_type __idelim = traits_type::to_int_type(__delim);\r\n       const int_type __eof = traits_type::eof();\r\n       __streambuf_type* __this_sb = this->rdbuf();\r\n       int_type __c = __this_sb->sgetc();\r\n       char_type __c2 = traits_type::to_char_type(__c);\r\n       unsigned long long __gcount = 0;\r\n\r\n       while (!traits_type::eq_int_type(__c, __eof)\r\n"]
[81.42839, "o", "       && !traits_type::eq_int_type(__c, __idelim)\r\n       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))\r\n  {\r\n    ++__gcount;\r\n    __c = __this_sb->snextc();\r\n    __c2 = traits_type::to_char_type(__c);\r\n  }\r\n       if (traits_type::eq_int_type(__c, __eof))\r\n  __err |= ios_base::eofbit;\r\n\r\n"]
[81.428481, "o", "\r\n       if (__gcount <= __gnu_cxx::__numeric_traits<streamsize>::__max)\r\n  _M_gcount = __gcount;\r\n       else\r\n  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n }\r\n      if (!_M_gcount)\r\n __err |= ios_base::failbit;\r\n      if (__err)\r\n this->setstate(__err);\r\n      return *this;\r\n    }\r\n"]
[81.428511, "o", "\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    getline(char_type* __s, streamsize __n, char_type __delim)\r\n    {\r\n      _M_gcount = 0;\r\n      ios_base::iostate __err = ios_base::goodbit;\r\n      sentry __cerb(*this, true);\r\n"]
[81.428599, "o", "      if (__cerb)\r\n        {\r\n          try\r\n            {\r\n              const int_type __idelim = traits_type::to_int_type(__delim);\r\n              const int_type __eof = traits_type::eof();\r\n              __streambuf_type* __sb = this->rdbuf();\r\n              int_type __c = __sb->sgetc();\r\n\r\n              while (_M_gcount + 1 < __n\r\n                     && !traits_type::eq_int_type(__c, __eof)\r\n                     && !traits_type::eq_int_type(__c, __idelim))\r\n                {\r\n                  *__s++ = traits_type::to_char_type(__c);\r\n                  __c = __sb->snextc();\r\n                  ++_M_gcount;\r\n                }\r\n              if (traits_type::eq_int_type(__c, __eof))\r\n"]
[81.428628, "o", "                __err |= ios_base::eofbit;\r\n              else\r\n                {\r\n                  if (traits_type::eq_int_type(__c, __idelim))\r\n                    {\r\n                      __sb->sbumpc();\r\n                      ++_M_gcount;\r\n                    }\r\n                  else\r\n                    __err |= ios_base::failbit;\r\n                }\r\n"]
[81.428717, "o", "            }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n          catch(...)\r\n            { this->_M_setstate(ios_base::badbit); }\r\n        }\r\n\r\n\r\n      if (__n > 0)\r\n *__s = char_type();\r\n      if (!_M_gcount)\r\n        __err |= ios_base::failbit;\r\n      if (__err)\r\n        this->setstate(__err);\r\n      return *this;\r\n    }\r\n\r\n\r\n\r\n"]
[81.428748, "o", "\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    ignore(void)\r\n    {\r\n      _M_gcount = 0;\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n"]
[81.428772, "o", "   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n     {\r\n       const int_type __eof = traits_type::eof();\r\n       __streambuf_type* __sb = this->rdbuf();\r\n"]
[81.428886, "o", "\r\n       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))\r\n  __err |= ios_base::eofbit;\r\n       else\r\n  _M_gcount = 1;\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     this->setstate(__err);\r\n }\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    ignore(streamsize __n)\r\n    {\r\n      _M_gcount = 0;\r\n"]
[81.428915, "o", "      sentry __cerb(*this, true);\r\n      if (__cerb && __n > 0)\r\n        {\r\n          ios_base::iostate __err = ios_base::goodbit;\r\n          try\r\n            {\r\n              const int_type __eof = traits_type::eof();\r\n              __streambuf_type* __sb = this->rdbuf();\r\n"]
[81.428944, "o", "              int_type __c = __sb->sgetc();\r\n# 545 \"/usr/include/c++/14.2.1/bits/istream.tcc\" 3\r\n       bool __large_ignore = false;\r\n       while (true)\r\n  {\r\n    while (_M_gcount < __n\r\n"]
[81.429055, "o", "    && !traits_type::eq_int_type(__c, __eof))\r\n      {\r\n        ++_M_gcount;\r\n        __c = __sb->snextc();\r\n      }\r\n    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max\r\n        && !traits_type::eq_int_type(__c, __eof))\r\n      {\r\n        _M_gcount =\r\n   __gnu_cxx::__numeric_traits<streamsize>::__min;\r\n        __large_ignore = true;\r\n      }\r\n    else\r\n      break;\r\n  }\r\n\r\n       if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max)\r\n  {\r\n    if (__large_ignore)\r\n      _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;\r\n\r\n    if (traits_type::eq_int_type(__c, __eof))\r\n      __err |= ios_base::eofbit;\r\n  }\r\n       else if (_M_gcount < __n)\r\n  {\r\n"]
[81.429086, "o", "    if (traits_type::eq_int_type(__c, __eof))\r\n      __err |= ios_base::eofbit;\r\n  }\r\n            }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n          catch(...)\r\n"]
[81.42911, "o", "            { this->_M_setstate(ios_base::badbit); }\r\n          if (__err)\r\n            this->setstate(__err);\r\n        }\r\n      return *this;\r\n    }\r\n\r\n"]
[81.429221, "o", "  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    ignore(streamsize __n, int_type __delim)\r\n    {\r\n      _M_gcount = 0;\r\n      sentry __cerb(*this, true);\r\n      if (__cerb && __n > 0)\r\n        {\r\n          ios_base::iostate __err = ios_base::goodbit;\r\n          try\r\n            {\r\n              const int_type __eof = traits_type::eof();\r\n              __streambuf_type* __sb = this->rdbuf();\r\n              int_type __c = __sb->sgetc();\r\n\r\n\r\n       bool __large_ignore = false;\r\n       while (true)\r\n  {\r\n    while (_M_gcount < __n\r\n    && !traits_type::eq_int_type(__c, __eof)\r\n    && !traits_type::eq_int_type(__c, __delim))\r\n"]
[81.42925, "o", "      {\r\n        ++_M_gcount;\r\n        __c = __sb->snextc();\r\n      }\r\n    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max\r\n        && !traits_type::eq_int_type(__c, __eof)\r\n        && !traits_type::eq_int_type(__c, __delim))\r\n      {\r\n        _M_gcount =\r\n"]
[81.429278, "o", "   __gnu_cxx::__numeric_traits<streamsize>::__min;\r\n        __large_ignore = true;\r\n      }\r\n    else\r\n      break;\r\n  }\r\n\r\n       if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max)\r\n"]
[81.429307, "o", "  {\r\n    if (__large_ignore)\r\n      _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;\r\n\r\n    if (traits_type::eq_int_type(__c, __eof))\r\n      __err |= ios_base::eofbit;\r\n"]
[81.429437, "o", "    else\r\n      {\r\n        if (_M_gcount != __n)\r\n   ++_M_gcount;\r\n        __sb->sbumpc();\r\n      }\r\n  }\r\n       else if (_M_gcount < __n)\r\n  {\r\n    if (traits_type::eq_int_type(__c, __eof))\r\n      __err |= ios_base::eofbit;\r\n    else\r\n      {\r\n        ++_M_gcount;\r\n        __sb->sbumpc();\r\n      }\r\n  }\r\n            }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n          catch(...)\r\n            { this->_M_setstate(ios_base::badbit); }\r\n          if (__err)\r\n            this->setstate(__err);\r\n        }\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n"]
[81.429467, "o", "    typename basic_istream<_CharT, _Traits>::int_type\r\n    basic_istream<_CharT, _Traits>::\r\n    peek(void)\r\n    {\r\n      int_type __c = traits_type::eof();\r\n      _M_gcount = 0;\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n"]
[81.429493, "o", "   try\r\n     {\r\n       __c = this->rdbuf()->sgetc();\r\n       if (traits_type::eq_int_type(__c, traits_type::eof()))\r\n  __err |= ios_base::eofbit;\r\n"]
[81.429604, "o", "     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     this->setstate(__err);\r\n }\r\n      return __c;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    read(char_type* __s, streamsize __n)\r\n    {\r\n      _M_gcount = 0;\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n"]
[81.429635, "o", "   try\r\n     {\r\n       _M_gcount = this->rdbuf()->sgetn(__s, __n);\r\n       if (_M_gcount != __n)\r\n  __err |= (ios_base::eofbit | ios_base::failbit);\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n"]
[81.429724, "o", "       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     this->setstate(__err);\r\n }\r\n      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    streamsize\r\n    basic_istream<_CharT, _Traits>::\r\n    readsome(char_type* __s, streamsize __n)\r\n    {\r\n      _M_gcount = 0;\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n"]
[81.429753, "o", "     {\r\n\r\n       const streamsize __num = this->rdbuf()->in_avail();\r\n       if (__num > 0)\r\n  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));\r\n       else if (__num == -1)\r\n  __err |= ios_base::eofbit;\r\n     }\r\n"]
[81.429781, "o", "   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n"]
[81.429892, "o", "     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     this->setstate(__err);\r\n }\r\n      return _M_gcount;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    putback(char_type __c)\r\n    {\r\n\r\n\r\n      _M_gcount = 0;\r\n\r\n      this->clear(this->rdstate() & ~ios_base::eofbit);\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n     {\r\n       const int_type __eof = traits_type::eof();\r\n       __streambuf_type* __sb = this->rdbuf();\r\n       if (!__sb\r\n"]
[81.429921, "o", "    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))\r\n  __err |= ios_base::badbit;\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n"]
[81.429949, "o", "     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     this->setstate(__err);\r\n }\r\n      return *this;\r\n    }\r\n\r\n"]
[81.430059, "o", "  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    unget(void)\r\n    {\r\n\r\n\r\n      _M_gcount = 0;\r\n\r\n      this->clear(this->rdstate() & ~ios_base::eofbit);\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n     {\r\n       const int_type __eof = traits_type::eof();\r\n       __streambuf_type* __sb = this->rdbuf();\r\n       if (!__sb\r\n    || traits_type::eq_int_type(__sb->sungetc(), __eof))\r\n  __err |= ios_base::badbit;\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n"]
[81.430089, "o", "       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     this->setstate(__err);\r\n }\r\n      return *this;\r\n    }\r\n\r\n"]
[81.430114, "o", "  template<typename _CharT, typename _Traits>\r\n    int\r\n    basic_istream<_CharT, _Traits>::\r\n    sync(void)\r\n    {\r\n\r\n\r\n"]
[81.430224, "o", "      int __ret = -1;\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n     {\r\n       __streambuf_type* __sb = this->rdbuf();\r\n       if (__sb)\r\n  {\r\n    if (__sb->pubsync() == -1)\r\n      __err |= ios_base::badbit;\r\n    else\r\n      __ret = 0;\r\n  }\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n"]
[81.430254, "o", "     this->setstate(__err);\r\n }\r\n      return __ret;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    typename basic_istream<_CharT, _Traits>::pos_type\r\n    basic_istream<_CharT, _Traits>::\r\n    tellg(void)\r\n    {\r\n\r\n\r\n"]
[81.430279, "o", "      pos_type __ret = pos_type(-1);\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   try\r\n     {\r\n"]
[81.430305, "o", "       if (!this->fail())\r\n  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,\r\n        ios_base::in);\r\n     }\r\n"]
[81.430438, "o", "   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n }\r\n      return __ret;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n    seekg(pos_type __pos)\r\n    {\r\n\r\n\r\n\r\n      this->clear(this->rdstate() & ~ios_base::eofbit);\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n     {\r\n       if (!this->fail())\r\n  {\r\n\r\n    const pos_type __p = this->rdbuf()->pubseekpos(__pos,\r\n         ios_base::in);\r\n\r\n"]
[81.430468, "o", "\r\n    if (__p == pos_type(off_type(-1)))\r\n      __err |= ios_base::failbit;\r\n  }\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n"]
[81.430493, "o", "     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     this->setstate(__err);\r\n }\r\n"]
[81.430521, "o", "      return *this;\r\n    }\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    basic_istream<_CharT, _Traits>::\r\n"]
[81.430652, "o", "    seekg(off_type __off, ios_base::seekdir __dir)\r\n    {\r\n\r\n\r\n\r\n      this->clear(this->rdstate() & ~ios_base::eofbit);\r\n      sentry __cerb(*this, true);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n     {\r\n       if (!this->fail())\r\n  {\r\n\r\n    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,\r\n         ios_base::in);\r\n\r\n\r\n    if (__p == pos_type(off_type(-1)))\r\n      __err |= ios_base::failbit;\r\n  }\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       this->_M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { this->_M_setstate(ios_base::badbit); }\r\n"]
[81.430681, "o", "   if (__err)\r\n     this->setstate(__err);\r\n }\r\n      return *this;\r\n    }\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\r\n    {\r\n"]
[81.43077, "o", "      typedef basic_istream<_CharT, _Traits> __istream_type;\r\n      typedef typename __istream_type::int_type __int_type;\r\n\r\n      typename __istream_type::sentry __cerb(__in, false);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n     {\r\n       const __int_type __cb = __in.rdbuf()->sbumpc();\r\n       if (!_Traits::eq_int_type(__cb, _Traits::eof()))\r\n  __c = _Traits::to_char_type(__cb);\r\n       else\r\n  __err |= (ios_base::eofbit | ios_base::failbit);\r\n     }\r\n   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n"]
[81.4308, "o", "       __in._M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     { __in._M_setstate(ios_base::badbit); }\r\n   if (__err)\r\n     __in.setstate(__err);\r\n }\r\n      return __in;\r\n    }\r\n\r\n"]
[81.430826, "o", "  template<typename _CharT, typename _Traits>\r\n    void\r\n    __istream_extract(basic_istream<_CharT, _Traits>& __in, _CharT* __s,\r\n        streamsize __num)\r\n    {\r\n      typedef basic_istream<_CharT, _Traits> __istream_type;\r\n"]
[81.430951, "o", "      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;\r\n      typedef typename _Traits::int_type int_type;\r\n      typedef _CharT char_type;\r\n      typedef ctype<_CharT> __ctype_type;\r\n\r\n      streamsize __extracted = 0;\r\n      ios_base::iostate __err = ios_base::goodbit;\r\n      typename __istream_type::sentry __cerb(__in, false);\r\n      if (__cerb)\r\n {\r\n   try\r\n     {\r\n\r\n       streamsize __width = __in.width();\r\n       if (0 < __width && __width < __num)\r\n  __num = __width;\r\n\r\n       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\r\n\r\n       const int_type __eof = _Traits::eof();\r\n       __streambuf_type* __sb = __in.rdbuf();\r\n       int_type __c = __sb->sgetc();\r\n\r\n       while (__extracted < __num - 1\r\n"]
[81.430983, "o", "       && !_Traits::eq_int_type(__c, __eof)\r\n       && !__ct.is(ctype_base::space,\r\n     _Traits::to_char_type(__c)))\r\n  {\r\n    *__s++ = _Traits::to_char_type(__c);\r\n    ++__extracted;\r\n    __c = __sb->snextc();\r\n  }\r\n\r\n       if (__extracted < __num - 1\r\n    && _Traits::eq_int_type(__c, __eof))\r\n"]
[81.431009, "o", "  __err |= ios_base::eofbit;\r\n\r\n\r\n\r\n       *__s = char_type();\r\n       __in.width(0);\r\n     }\r\n"]
[81.431034, "o", "   catch(__cxxabiv1::__forced_unwind&)\r\n     {\r\n       __in._M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n"]
[81.431171, "o", "   catch(...)\r\n     { __in._M_setstate(ios_base::badbit); }\r\n }\r\n      if (!__extracted)\r\n __err |= ios_base::failbit;\r\n      if (__err)\r\n __in.setstate(__err);\r\n    }\r\n\r\n\r\n  template<typename _CharT, typename _Traits>\r\n    basic_istream<_CharT, _Traits>&\r\n    ws(basic_istream<_CharT, _Traits>& __in)\r\n    {\r\n      typedef basic_istream<_CharT, _Traits> __istream_type;\r\n      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;\r\n      typedef typename __istream_type::int_type __int_type;\r\n      typedef ctype<_CharT> __ctype_type;\r\n\r\n\r\n\r\n      typename __istream_type::sentry __cerb(__in, true);\r\n      if (__cerb)\r\n {\r\n   ios_base::iostate __err = ios_base::goodbit;\r\n   try\r\n     {\r\n       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\r\n       const __int_type __eof = _Traits::eof();\r\n       __streambuf_type* __sb = __in.rdbuf();\r\n"]
[81.431203, "o", "       __int_type __c = __sb->sgetc();\r\n\r\n       while (true)\r\n  {\r\n    if (_Traits::eq_int_type(__c, __eof))\r\n      {\r\n        __err = ios_base::eofbit;\r\n        break;\r\n      }\r\n    if (!__ct.is(ctype_base::space, _Traits::to_char_type(__c)))\r\n      break;\r\n"]
[81.431231, "o", "    __c = __sb->snextc();\r\n  }\r\n     }\r\n   catch(const __cxxabiv1::__forced_unwind&)\r\n     {\r\n"]
[81.431342, "o", "       __in._M_setstate(ios_base::badbit);\r\n       throw;\r\n     }\r\n   catch(...)\r\n     {\r\n       __in._M_setstate(ios_base::badbit);\r\n     }\r\n   if (__err)\r\n     __in.setstate(__err);\r\n }\r\n      return __in;\r\n    }\r\n\r\n\r\n\r\n\r\n  extern template class basic_istream<char>;\r\n  extern template istream& ws(istream&);\r\n  extern template istream& operator>>(istream&, char&);\r\n  extern template istream& operator>>(istream&, unsigned char&);\r\n  extern template istream& operator>>(istream&, signed char&);\r\n\r\n  extern template istream& istream::_M_extract(unsigned short&);\r\n  extern template istream& istream::_M_extract(unsigned int&);\r\n"]
[81.431372, "o", "  extern template istream& istream::_M_extract(long&);\r\n  extern template istream& istream::_M_extract(unsigned long&);\r\n  extern template istream& istream::_M_extract(bool&);\r\n\r\n  extern template istream& istream::_M_extract(long long&);\r\n  extern template istream& istream::_M_extract(unsigned long long&);\r\n\r\n  extern template istream& istream::_M_extract(float&);\r\n  extern template istream& istream::_M_extract(double&);\r\n"]
[81.4314, "o", "  extern template istream& istream::_M_extract(long double&);\r\n  extern template istream& istream::_M_extract(void*&);\r\n\r\n  extern template class basic_iostream<char>;\r\n\r\n"]
[81.431428, "o", "\r\n  extern template class basic_istream<wchar_t>;\r\n  extern template wistream& ws(wistream&);\r\n  extern template wistream& operator>>(wistream&, wchar_t&);\r\n  extern template void __istream_extract(wistream&, wchar_t*, streamsize);\r\n\r\n"]
[81.431558, "o", "  extern template wistream& wistream::_M_extract(unsigned short&);\r\n  extern template wistream& wistream::_M_extract(unsigned int&);\r\n  extern template wistream& wistream::_M_extract(long&);\r\n  extern template wistream& wistream::_M_extract(unsigned long&);\r\n  extern template wistream& wistream::_M_extract(bool&);\r\n\r\n  extern template wistream& wistream::_M_extract(long long&);\r\n  extern template wistream& wistream::_M_extract(unsigned long long&);\r\n\r\n  extern template wistream& wistream::_M_extract(float&);\r\n  extern template wistream& wistream::_M_extract(double&);\r\n  extern template wistream& wistream::_M_extract(long double&);\r\n  extern template wistream& wistream::_M_extract(void*&);\r\n\r\n  extern template class basic_iostream<wchar_t>;\r\n\r\n\r\n\r\n\r\n}\r\n# 1107 \"/usr/include/c++/14.2.1/istream\" 2 3\r\n# 43 \"/usr/include/c++/14.2.1/iostream\" 2 3\r\n\r\n"]
[81.431589, "o", "namespace std __attribute__ ((__visibility__ (\"default\")))\r\n{\r\n\r\n# 62 \"/usr/include/c++/14.2.1/iostream\" 3\r\n  extern istream cin;\r\n  extern ostream cout;\r\n  extern ostream cerr;\r\n  extern ostream clog;\r\n\r\n\r\n  extern wistream wcin;\r\n"]
[81.431685, "o", "  extern wostream wcout;\r\n  extern wostream wcerr;\r\n  extern wostream wclog;\r\n# 82 \"/usr/include/c++/14.2.1/iostream\" 3\r\n  __extension__ __asm (\".globl _ZSt21ios_base_library_initv\");\r\n\r\n\r\n\r\n}\r\n# 2 \"test.cpp\" 2\r\n\r\n# 1 \"include.h\" 1\r\n\r\n# 1 \"include.h\"\r\n"]
[81.431715, "o", "int f(int a, int b) {\r\n# 4 \"test.cpp\" 2\r\nint result{a + b};\r\nreturn 3 * result;\r\n}\r\n\r\nint main() { std::cout << f(3, 5) << \"\\n\"; }\r\n"]
[81.435215, "o", "\u001b]0;tomasi@maurizio-tombook:~\u0007"]
[81.435263, "o", "\u001b[?2004h\u001b[01;32m[tomasi@maurizio-tombook\u001b[01;37m ~\u001b[01;32m]$\u001b[00m "]
[88.233451, "o", "\u001b[?2004l\r\r\nexit\r\n"]
